// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tasks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TasksClient interface {
	Task(ctx context.Context, opts ...grpc.CallOption) (Tasks_TaskClient, error)
}

type tasksClient struct {
	cc grpc.ClientConnInterface
}

func NewTasksClient(cc grpc.ClientConnInterface) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) Task(ctx context.Context, opts ...grpc.CallOption) (Tasks_TaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tasks_ServiceDesc.Streams[0], "/tasks.Tasks/Task", opts...)
	if err != nil {
		return nil, err
	}
	x := &tasksTaskClient{stream}
	return x, nil
}

type Tasks_TaskClient interface {
	Send(*Client) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type tasksTaskClient struct {
	grpc.ClientStream
}

func (x *tasksTaskClient) Send(m *Client) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tasksTaskClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TasksServer is the server API for Tasks service.
// All implementations must embed UnimplementedTasksServer
// for forward compatibility
type TasksServer interface {
	Task(Tasks_TaskServer) error
	mustEmbedUnimplementedTasksServer()
}

// UnimplementedTasksServer must be embedded to have forward compatible implementations.
type UnimplementedTasksServer struct {
}

func (UnimplementedTasksServer) Task(Tasks_TaskServer) error {
	return status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (UnimplementedTasksServer) mustEmbedUnimplementedTasksServer() {}

// UnsafeTasksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TasksServer will
// result in compilation errors.
type UnsafeTasksServer interface {
	mustEmbedUnimplementedTasksServer()
}

func RegisterTasksServer(s grpc.ServiceRegistrar, srv TasksServer) {
	s.RegisterService(&Tasks_ServiceDesc, srv)
}

func _Tasks_Task_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TasksServer).Task(&tasksTaskServer{stream})
}

type Tasks_TaskServer interface {
	Send(*Status) error
	Recv() (*Client, error)
	grpc.ServerStream
}

type tasksTaskServer struct {
	grpc.ServerStream
}

func (x *tasksTaskServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tasksTaskServer) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Tasks_ServiceDesc is the grpc.ServiceDesc for Tasks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tasks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Task",
			Handler:       _Tasks_Task_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "TasksController.proto",
}
