// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package module

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleClient interface {
	Task(ctx context.Context, opts ...grpc.CallOption) (Module_TaskClient, error)
}

type moduleClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleClient(cc grpc.ClientConnInterface) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) Task(ctx context.Context, opts ...grpc.CallOption) (Module_TaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Module_ServiceDesc.Streams[0], "/module.Module/Task", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleTaskClient{stream}
	return x, nil
}

type Module_TaskClient interface {
	Send(*Controller) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type moduleTaskClient struct {
	grpc.ClientStream
}

func (x *moduleTaskClient) Send(m *Controller) error {
	return x.ClientStream.SendMsg(m)
}

func (x *moduleTaskClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModuleServer is the server API for Module service.
// All implementations must embed UnimplementedModuleServer
// for forward compatibility
type ModuleServer interface {
	Task(Module_TaskServer) error
	mustEmbedUnimplementedModuleServer()
}

// UnimplementedModuleServer must be embedded to have forward compatible implementations.
type UnimplementedModuleServer struct {
}

func (UnimplementedModuleServer) Task(Module_TaskServer) error {
	return status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (UnimplementedModuleServer) mustEmbedUnimplementedModuleServer() {}

// UnsafeModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServer will
// result in compilation errors.
type UnsafeModuleServer interface {
	mustEmbedUnimplementedModuleServer()
}

func RegisterModuleServer(s grpc.ServiceRegistrar, srv ModuleServer) {
	s.RegisterService(&Module_ServiceDesc, srv)
}

func _Module_Task_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModuleServer).Task(&moduleTaskServer{stream})
}

type Module_TaskServer interface {
	Send(*Status) error
	Recv() (*Controller, error)
	grpc.ServerStream
}

type moduleTaskServer struct {
	grpc.ServerStream
}

func (x *moduleTaskServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *moduleTaskServer) Recv() (*Controller, error) {
	m := new(Controller)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Module_ServiceDesc is the grpc.ServiceDesc for Module service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Module_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "module.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Task",
			Handler:       _Module_Task_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Module.proto",
}
