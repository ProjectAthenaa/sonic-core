// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: Captcha.proto

package captcha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CaptchaVersion int32

const (
	CaptchaVersion_ReCaptchaV2Checkbox   CaptchaVersion = 0
	CaptchaVersion_ReCaptchaV2Invisible  CaptchaVersion = 1
	CaptchaVersion_ReCaptchaV3           CaptchaVersion = 2
	CaptchaVersion_HCaptchaCheckbox      CaptchaVersion = 3
	CaptchaVersion_HCaptchaInvisible     CaptchaVersion = 4
	CaptchaVersion_GeeTest               CaptchaVersion = 5
	CaptchaVersion_ReCaptchaV3Enterprise CaptchaVersion = 6
)

// Enum value maps for CaptchaVersion.
var (
	CaptchaVersion_name = map[int32]string{
		0: "ReCaptchaV2Checkbox",
		1: "ReCaptchaV2Invisible",
		2: "ReCaptchaV3",
		3: "HCaptchaCheckbox",
		4: "HCaptchaInvisible",
		5: "GeeTest",
		6: "ReCaptchaV3Enterprise",
	}
	CaptchaVersion_value = map[string]int32{
		"ReCaptchaV2Checkbox":   0,
		"ReCaptchaV2Invisible":  1,
		"ReCaptchaV3":           2,
		"HCaptchaCheckbox":      3,
		"HCaptchaInvisible":     4,
		"GeeTest":               5,
		"ReCaptchaV3Enterprise": 6,
	}
)

func (x CaptchaVersion) Enum() *CaptchaVersion {
	p := new(CaptchaVersion)
	*p = x
	return p
}

func (x CaptchaVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptchaVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_Captcha_proto_enumTypes[0].Descriptor()
}

func (CaptchaVersion) Type() protoreflect.EnumType {
	return &file_Captcha_proto_enumTypes[0]
}

func (x CaptchaVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaptchaVersion.Descriptor instead.
func (CaptchaVersion) EnumDescriptor() ([]byte, []int) {
	return file_Captcha_proto_rawDescGZIP(), []int{0}
}

type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID           string            `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	ApiKey           string            `protobuf:"bytes,2,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	CreatedAt        int64             `protobuf:"varint,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Url              string            `protobuf:"bytes,4,opt,name=Url,proto3" json:"Url,omitempty"`
	SiteKey          string            `protobuf:"bytes,5,opt,name=SiteKey,proto3" json:"SiteKey,omitempty"`
	Version          int32             `protobuf:"varint,6,opt,name=Version,proto3" json:"Version,omitempty"`
	Action           CaptchaVersion    `protobuf:"varint,7,opt,name=Action,proto3,enum=CaptchaVersion" json:"Action,omitempty"`
	MinScore         float32           `protobuf:"fixed32,8,opt,name=MinScore,proto3" json:"MinScore,omitempty"`
	ProxyRequired    bool              `protobuf:"varint,9,opt,name=ProxyRequired,proto3" json:"ProxyRequired,omitempty"`
	Cookies          string            `protobuf:"bytes,10,opt,name=Cookies,proto3" json:"Cookies,omitempty"`
	RenderParameters map[string]string `protobuf:"bytes,11,rep,name=RenderParameters,proto3" json:"RenderParameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Captcha_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_Captcha_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_Captcha_proto_rawDescGZIP(), []int{0}
}

func (x *Details) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *Details) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *Details) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Details) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Details) GetSiteKey() string {
	if x != nil {
		return x.SiteKey
	}
	return ""
}

func (x *Details) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Details) GetAction() CaptchaVersion {
	if x != nil {
		return x.Action
	}
	return CaptchaVersion_ReCaptchaV2Checkbox
}

func (x *Details) GetMinScore() float32 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *Details) GetProxyRequired() bool {
	if x != nil {
		return x.ProxyRequired
	}
	return false
}

func (x *Details) GetCookies() string {
	if x != nil {
		return x.Cookies
	}
	return ""
}

func (x *Details) GetRenderParameters() map[string]string {
	if x != nil {
		return x.RenderParameters
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    string   `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	ApiKey    string   `protobuf:"bytes,2,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	Token     string   `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	CreatedAt int64    `protobuf:"varint,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Details   *Details `protobuf:"bytes,12,opt,name=Details,proto3" json:"Details,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Captcha_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_Captcha_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_Captcha_proto_rawDescGZIP(), []int{1}
}

func (x *Token) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *Token) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Token) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Token) GetDetails() *Details {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_Captcha_proto protoreflect.FileDescriptor

var file_Captcha_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb3, 0x03, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x69,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x43, 0x0a, 0x15, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2a, 0xa9, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65,
	0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x56, 0x32, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f,
	0x78, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x56, 0x32, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x65, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x56, 0x33, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x48, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62,
	0x6f, 0x78, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x65, 0x65, 0x54, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x43, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x56, 0x33, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x10, 0x06, 0x32, 0x2b, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x20,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x08, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x1a, 0x06, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x61, 0x2f, 0x73, 0x6f,
	0x6e, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Captcha_proto_rawDescOnce sync.Once
	file_Captcha_proto_rawDescData = file_Captcha_proto_rawDesc
)

func file_Captcha_proto_rawDescGZIP() []byte {
	file_Captcha_proto_rawDescOnce.Do(func() {
		file_Captcha_proto_rawDescData = protoimpl.X.CompressGZIP(file_Captcha_proto_rawDescData)
	})
	return file_Captcha_proto_rawDescData
}

var file_Captcha_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Captcha_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_Captcha_proto_goTypes = []interface{}{
	(CaptchaVersion)(0), // 0: CaptchaVersion
	(*Details)(nil),     // 1: Details
	(*Token)(nil),       // 2: Token
	nil,                 // 3: Details.RenderParametersEntry
}
var file_Captcha_proto_depIdxs = []int32{
	0, // 0: Details.Action:type_name -> CaptchaVersion
	3, // 1: Details.RenderParameters:type_name -> Details.RenderParametersEntry
	1, // 2: Token.Details:type_name -> Details
	1, // 3: Captcha.GetToken:input_type -> Details
	2, // 4: Captcha.GetToken:output_type -> Token
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_Captcha_proto_init() }
func file_Captcha_proto_init() {
	if File_Captcha_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Captcha_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Captcha_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Captcha_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Captcha_proto_goTypes,
		DependencyIndexes: file_Captcha_proto_depIdxs,
		EnumInfos:         file_Captcha_proto_enumTypes,
		MessageInfos:      file_Captcha_proto_msgTypes,
	}.Build()
	File_Captcha_proto = out.File
	file_Captcha_proto_rawDesc = nil
	file_Captcha_proto_goTypes = nil
	file_Captcha_proto_depIdxs = nil
}
