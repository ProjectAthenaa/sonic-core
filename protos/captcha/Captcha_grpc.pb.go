// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package captcha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CaptchaClient is the client API for Captcha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptchaClient interface {
	GetToken(ctx context.Context, in *Details, opts ...grpc.CallOption) (Captcha_GetTokenClient, error)
}

type captchaClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptchaClient(cc grpc.ClientConnInterface) CaptchaClient {
	return &captchaClient{cc}
}

func (c *captchaClient) GetToken(ctx context.Context, in *Details, opts ...grpc.CallOption) (Captcha_GetTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Captcha_ServiceDesc.Streams[0], "/Captcha/GetToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &captchaGetTokenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captcha_GetTokenClient interface {
	Recv() (*Token, error)
	grpc.ClientStream
}

type captchaGetTokenClient struct {
	grpc.ClientStream
}

func (x *captchaGetTokenClient) Recv() (*Token, error) {
	m := new(Token)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CaptchaServer is the server API for Captcha service.
// All implementations must embed UnimplementedCaptchaServer
// for forward compatibility
type CaptchaServer interface {
	GetToken(*Details, Captcha_GetTokenServer) error
	mustEmbedUnimplementedCaptchaServer()
}

// UnimplementedCaptchaServer must be embedded to have forward compatible implementations.
type UnimplementedCaptchaServer struct {
}

func (UnimplementedCaptchaServer) GetToken(*Details, Captcha_GetTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedCaptchaServer) mustEmbedUnimplementedCaptchaServer() {}

// UnsafeCaptchaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptchaServer will
// result in compilation errors.
type UnsafeCaptchaServer interface {
	mustEmbedUnimplementedCaptchaServer()
}

func RegisterCaptchaServer(s grpc.ServiceRegistrar, srv CaptchaServer) {
	s.RegisterService(&Captcha_ServiceDesc, srv)
}

func _Captcha_GetToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Details)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptchaServer).GetToken(m, &captchaGetTokenServer{stream})
}

type Captcha_GetTokenServer interface {
	Send(*Token) error
	grpc.ServerStream
}

type captchaGetTokenServer struct {
	grpc.ServerStream
}

func (x *captchaGetTokenServer) Send(m *Token) error {
	return x.ServerStream.SendMsg(m)
}

// Captcha_ServiceDesc is the grpc.ServiceDesc for Captcha service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Captcha_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Captcha",
	HandlerType: (*CaptchaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetToken",
			Handler:       _Captcha_GetToken_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Captcha.proto",
}
