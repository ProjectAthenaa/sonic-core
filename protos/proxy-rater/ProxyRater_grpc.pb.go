// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxy_rater

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyRaterClient is the client API for ProxyRater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyRaterClient interface {
	GetProxy(ctx context.Context, in *Site, opts ...grpc.CallOption) (*Proxy, error)
}

type proxyRaterClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyRaterClient(cc grpc.ClientConnInterface) ProxyRaterClient {
	return &proxyRaterClient{cc}
}

func (c *proxyRaterClient) GetProxy(ctx context.Context, in *Site, opts ...grpc.CallOption) (*Proxy, error) {
	out := new(Proxy)
	err := c.cc.Invoke(ctx, "/proxy_rater.ProxyRater/GetProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyRaterServer is the server API for ProxyRater service.
// All implementations must embed UnimplementedProxyRaterServer
// for forward compatibility
type ProxyRaterServer interface {
	GetProxy(context.Context, *Site) (*Proxy, error)
	mustEmbedUnimplementedProxyRaterServer()
}

// UnimplementedProxyRaterServer must be embedded to have forward compatible implementations.
type UnimplementedProxyRaterServer struct {
}

func (UnimplementedProxyRaterServer) GetProxy(context.Context, *Site) (*Proxy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProxy not implemented")
}
func (UnimplementedProxyRaterServer) mustEmbedUnimplementedProxyRaterServer() {}

// UnsafeProxyRaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyRaterServer will
// result in compilation errors.
type UnsafeProxyRaterServer interface {
	mustEmbedUnimplementedProxyRaterServer()
}

func RegisterProxyRaterServer(s grpc.ServiceRegistrar, srv ProxyRaterServer) {
	s.RegisterService(&ProxyRater_ServiceDesc, srv)
}

func _ProxyRater_GetProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyRaterServer).GetProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy_rater.ProxyRater/GetProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyRaterServer).GetProxy(ctx, req.(*Site))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyRater_ServiceDesc is the grpc.ServiceDesc for ProxyRater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyRater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy_rater.ProxyRater",
	HandlerType: (*ProxyRaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProxy",
			Handler:    _ProxyRater_GetProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProxyRater.proto",
}
