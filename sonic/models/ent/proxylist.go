// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/proxylist"
)

// ProxyList is the model entity for the ProxyList schema.
type ProxyList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Type holds the value of the "Type" field.
	Type proxylist.Type `json:"Type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProxyListQuery when eager-loading is set.
	Edges ProxyListEdges `json:"edges"`
}

// ProxyListEdges holds the relations/edges for other nodes in the graph.
type ProxyListEdges struct {
	// App holds the value of the App edge.
	App []*App `json:"App,omitempty"`
	// Proxies holds the value of the Proxies edge.
	Proxies []*Proxy `json:"Proxies,omitempty"`
	// Task holds the value of the Task edge.
	Task []*Task `json:"Task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e ProxyListEdges) AppOrErr() ([]*App, error) {
	if e.loadedTypes[0] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "App"}
}

// ProxiesOrErr returns the Proxies value or an error if the edge
// was not loaded in eager-loading.
func (e ProxyListEdges) ProxiesOrErr() ([]*Proxy, error) {
	if e.loadedTypes[1] {
		return e.Proxies, nil
	}
	return nil, &NotLoadedError{edge: "Proxies"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading.
func (e ProxyListEdges) TaskOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "Task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProxyList) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case proxylist.FieldID:
			values[i] = new(sql.NullInt64)
		case proxylist.FieldName, proxylist.FieldType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProxyList", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProxyList fields.
func (pl *ProxyList) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proxylist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case proxylist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case proxylist.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				pl.Type = proxylist.Type(value.String)
			}
		}
	}
	return nil
}

// QueryApp queries the "App" edge of the ProxyList entity.
func (pl *ProxyList) QueryApp() *AppQuery {
	return (&ProxyListClient{config: pl.config}).QueryApp(pl)
}

// QueryProxies queries the "Proxies" edge of the ProxyList entity.
func (pl *ProxyList) QueryProxies() *ProxyQuery {
	return (&ProxyListClient{config: pl.config}).QueryProxies(pl)
}

// QueryTask queries the "Task" edge of the ProxyList entity.
func (pl *ProxyList) QueryTask() *TaskQuery {
	return (&ProxyListClient{config: pl.config}).QueryTask(pl)
}

// Update returns a builder for updating this ProxyList.
// Note that you need to call ProxyList.Unwrap() before calling this method if this ProxyList
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *ProxyList) Update() *ProxyListUpdateOne {
	return (&ProxyListClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the ProxyList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *ProxyList) Unwrap() *ProxyList {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProxyList is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *ProxyList) String() string {
	var builder strings.Builder
	builder.WriteString("ProxyList(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", Name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", Type=")
	builder.WriteString(fmt.Sprintf("%v", pl.Type))
	builder.WriteByte(')')
	return builder.String()
}

// ProxyLists is a parsable slice of ProxyList.
type ProxyLists []*ProxyList

func (pl ProxyLists) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
