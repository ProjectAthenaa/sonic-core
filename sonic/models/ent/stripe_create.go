// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/stripe"
)

// StripeCreate is the builder for creating a Stripe entity.
type StripeCreate struct {
	config
	mutation *StripeMutation
	hooks    []Hook
}

// SetCustomerID sets the "CustomerID" field.
func (sc *StripeCreate) SetCustomerID(s string) *StripeCreate {
	sc.mutation.SetCustomerID(s)
	return sc
}

// SetSubscriptionID sets the "SubscriptionID" field.
func (sc *StripeCreate) SetSubscriptionID(s string) *StripeCreate {
	sc.mutation.SetSubscriptionID(s)
	return sc
}

// SetNillableSubscriptionID sets the "SubscriptionID" field if the given value is not nil.
func (sc *StripeCreate) SetNillableSubscriptionID(s *string) *StripeCreate {
	if s != nil {
		sc.SetSubscriptionID(*s)
	}
	return sc
}

// SetRenewalDate sets the "RenewalDate" field.
func (sc *StripeCreate) SetRenewalDate(t time.Time) *StripeCreate {
	sc.mutation.SetRenewalDate(t)
	return sc
}

// SetNillableRenewalDate sets the "RenewalDate" field if the given value is not nil.
func (sc *StripeCreate) SetNillableRenewalDate(t *time.Time) *StripeCreate {
	if t != nil {
		sc.SetRenewalDate(*t)
	}
	return sc
}

// SetLicenseID sets the "License" edge to the License entity by ID.
func (sc *StripeCreate) SetLicenseID(id int) *StripeCreate {
	sc.mutation.SetLicenseID(id)
	return sc
}

// SetNillableLicenseID sets the "License" edge to the License entity by ID if the given value is not nil.
func (sc *StripeCreate) SetNillableLicenseID(id *int) *StripeCreate {
	if id != nil {
		sc = sc.SetLicenseID(*id)
	}
	return sc
}

// SetLicense sets the "License" edge to the License entity.
func (sc *StripeCreate) SetLicense(l *License) *StripeCreate {
	return sc.SetLicenseID(l.ID)
}

// Mutation returns the StripeMutation object of the builder.
func (sc *StripeCreate) Mutation() *StripeMutation {
	return sc.mutation
}

// Save creates the Stripe in the database.
func (sc *StripeCreate) Save(ctx context.Context) (*Stripe, error) {
	var (
		err  error
		node *Stripe
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StripeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StripeCreate) SaveX(ctx context.Context) *Stripe {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (sc *StripeCreate) check() error {
	if _, ok := sc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "CustomerID", err: errors.New("ent: missing required field \"CustomerID\"")}
	}
	return nil
}

func (sc *StripeCreate) sqlSave(ctx context.Context) (*Stripe, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *StripeCreate) createSpec() (*Stripe, *sqlgraph.CreateSpec) {
	var (
		_node = &Stripe{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stripe.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stripe.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.CustomerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stripe.FieldCustomerID,
		})
		_node.CustomerID = value
	}
	if value, ok := sc.mutation.SubscriptionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stripe.FieldSubscriptionID,
		})
		_node.SubscriptionID = value
	}
	if value, ok := sc.mutation.RenewalDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stripe.FieldRenewalDate,
		})
		_node.RenewalDate = value
	}
	if nodes := sc.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stripe.LicenseTable,
			Columns: []string{stripe.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.license_stripe = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StripeCreateBulk is the builder for creating many Stripe entities in bulk.
type StripeCreateBulk struct {
	config
	builders []*StripeCreate
}

// Save creates the Stripe entities in the database.
func (scb *StripeCreateBulk) Save(ctx context.Context) ([]*Stripe, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stripe, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StripeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StripeCreateBulk) SaveX(ctx context.Context) []*Stripe {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
