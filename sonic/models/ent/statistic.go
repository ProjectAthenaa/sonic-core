// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/statistic"
)

// Statistic is the model entity for the Statistic schema.
type Statistic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "Type" field.
	Type statistic.Type `json:"Type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatisticQuery when eager-loading is set.
	Edges StatisticEdges `json:"edges"`
}

// StatisticEdges holds the relations/edges for other nodes in the graph.
type StatisticEdges struct {
	// User holds the value of the User edge.
	User []*User `json:"User,omitempty"`
	// Product holds the value of the Product edge.
	Product []*Product `json:"Product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e StatisticEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "User"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e StatisticEdges) ProductOrErr() ([]*Product, error) {
	if e.loadedTypes[1] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "Product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Statistic) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case statistic.FieldID:
			values[i] = new(sql.NullInt64)
		case statistic.FieldType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Statistic", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Statistic fields.
func (s *Statistic) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statistic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case statistic.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				s.Type = statistic.Type(value.String)
			}
		}
	}
	return nil
}

// QueryUser queries the "User" edge of the Statistic entity.
func (s *Statistic) QueryUser() *UserQuery {
	return (&StatisticClient{config: s.config}).QueryUser(s)
}

// QueryProduct queries the "Product" edge of the Statistic entity.
func (s *Statistic) QueryProduct() *ProductQuery {
	return (&StatisticClient{config: s.config}).QueryProduct(s)
}

// Update returns a builder for updating this Statistic.
// Note that you need to call Statistic.Unwrap() before calling this method if this Statistic
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Statistic) Update() *StatisticUpdateOne {
	return (&StatisticClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Statistic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Statistic) Unwrap() *Statistic {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Statistic is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Statistic) String() string {
	var builder strings.Builder
	builder.WriteString("Statistic(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", Type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Statistics is a parsable slice of Statistic.
type Statistics []*Statistic

func (s Statistics) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
