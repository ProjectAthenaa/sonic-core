// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/settings"
)

// Settings is the model entity for the Settings schema.
type Settings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SuccessWebhook holds the value of the "SuccessWebhook" field.
	SuccessWebhook string `json:"SuccessWebhook,omitempty"`
	// DeclineWebhook holds the value of the "DeclineWebhook" field.
	DeclineWebhook string `json:"DeclineWebhook,omitempty"`
	// CheckoutDelay holds the value of the "CheckoutDelay" field.
	CheckoutDelay int `json:"CheckoutDelay,omitempty"`
	// ATCDelay holds the value of the "ATCDelay" field.
	ATCDelay int `json:"ATCDelay,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SettingsQuery when eager-loading is set.
	Edges        SettingsEdges `json:"edges"`
	app_settings *int
}

// SettingsEdges holds the relations/edges for other nodes in the graph.
type SettingsEdges struct {
	// App holds the value of the App edge.
	App *App `json:"App,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SettingsEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge App was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "App"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Settings) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case settings.FieldID, settings.FieldCheckoutDelay, settings.FieldATCDelay:
			values[i] = new(sql.NullInt64)
		case settings.FieldSuccessWebhook, settings.FieldDeclineWebhook:
			values[i] = new(sql.NullString)
		case settings.ForeignKeys[0]: // app_settings
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Settings", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Settings fields.
func (s *Settings) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case settings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case settings.FieldSuccessWebhook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SuccessWebhook", values[i])
			} else if value.Valid {
				s.SuccessWebhook = value.String
			}
		case settings.FieldDeclineWebhook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeclineWebhook", values[i])
			} else if value.Valid {
				s.DeclineWebhook = value.String
			}
		case settings.FieldCheckoutDelay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CheckoutDelay", values[i])
			} else if value.Valid {
				s.CheckoutDelay = int(value.Int64)
			}
		case settings.FieldATCDelay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ATCDelay", values[i])
			} else if value.Valid {
				s.ATCDelay = int(value.Int64)
			}
		case settings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field app_settings", value)
			} else if value.Valid {
				s.app_settings = new(int)
				*s.app_settings = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryApp queries the "App" edge of the Settings entity.
func (s *Settings) QueryApp() *AppQuery {
	return (&SettingsClient{config: s.config}).QueryApp(s)
}

// Update returns a builder for updating this Settings.
// Note that you need to call Settings.Unwrap() before calling this method if this Settings
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Settings) Update() *SettingsUpdateOne {
	return (&SettingsClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Settings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Settings) Unwrap() *Settings {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Settings is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Settings) String() string {
	var builder strings.Builder
	builder.WriteString("Settings(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", SuccessWebhook=")
	builder.WriteString(s.SuccessWebhook)
	builder.WriteString(", DeclineWebhook=")
	builder.WriteString(s.DeclineWebhook)
	builder.WriteString(", CheckoutDelay=")
	builder.WriteString(fmt.Sprintf("%v", s.CheckoutDelay))
	builder.WriteString(", ATCDelay=")
	builder.WriteString(fmt.Sprintf("%v", s.ATCDelay))
	builder.WriteByte(')')
	return builder.String()
}

// SettingsSlice is a parsable slice of Settings.
type SettingsSlice []*Settings

func (s SettingsSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
