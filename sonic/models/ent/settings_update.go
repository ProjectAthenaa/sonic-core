// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/settings"
)

// SettingsUpdate is the builder for updating Settings entities.
type SettingsUpdate struct {
	config
	hooks    []Hook
	mutation *SettingsMutation
}

// Where adds a new predicate for the SettingsUpdate builder.
func (su *SettingsUpdate) Where(ps ...predicate.Settings) *SettingsUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetSuccessWebhook sets the "SuccessWebhook" field.
func (su *SettingsUpdate) SetSuccessWebhook(s string) *SettingsUpdate {
	su.mutation.SetSuccessWebhook(s)
	return su
}

// SetDeclineWebhook sets the "DeclineWebhook" field.
func (su *SettingsUpdate) SetDeclineWebhook(s string) *SettingsUpdate {
	su.mutation.SetDeclineWebhook(s)
	return su
}

// SetCheckoutDelay sets the "CheckoutDelay" field.
func (su *SettingsUpdate) SetCheckoutDelay(i int) *SettingsUpdate {
	su.mutation.ResetCheckoutDelay()
	su.mutation.SetCheckoutDelay(i)
	return su
}

// AddCheckoutDelay adds i to the "CheckoutDelay" field.
func (su *SettingsUpdate) AddCheckoutDelay(i int) *SettingsUpdate {
	su.mutation.AddCheckoutDelay(i)
	return su
}

// SetATCDelay sets the "ATCDelay" field.
func (su *SettingsUpdate) SetATCDelay(i int) *SettingsUpdate {
	su.mutation.ResetATCDelay()
	su.mutation.SetATCDelay(i)
	return su
}

// AddATCDelay adds i to the "ATCDelay" field.
func (su *SettingsUpdate) AddATCDelay(i int) *SettingsUpdate {
	su.mutation.AddATCDelay(i)
	return su
}

// SetAppID sets the "App" edge to the App entity by ID.
func (su *SettingsUpdate) SetAppID(id int) *SettingsUpdate {
	su.mutation.SetAppID(id)
	return su
}

// SetApp sets the "App" edge to the App entity.
func (su *SettingsUpdate) SetApp(a *App) *SettingsUpdate {
	return su.SetAppID(a.ID)
}

// Mutation returns the SettingsMutation object of the builder.
func (su *SettingsUpdate) Mutation() *SettingsMutation {
	return su.mutation
}

// ClearApp clears the "App" edge to the App entity.
func (su *SettingsUpdate) ClearApp() *SettingsUpdate {
	su.mutation.ClearApp()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettingsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettingsUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettingsUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SettingsUpdate) check() error {
	if _, ok := su.mutation.AppID(); su.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"App\"")
	}
	return nil
}

func (su *SettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   settings.Table,
			Columns: settings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: settings.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SuccessWebhook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldSuccessWebhook,
		})
	}
	if value, ok := su.mutation.DeclineWebhook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldDeclineWebhook,
		})
	}
	if value, ok := su.mutation.CheckoutDelay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldCheckoutDelay,
		})
	}
	if value, ok := su.mutation.AddedCheckoutDelay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldCheckoutDelay,
		})
	}
	if value, ok := su.mutation.ATCDelay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldATCDelay,
		})
	}
	if value, ok := su.mutation.AddedATCDelay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldATCDelay,
		})
	}
	if su.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settings.AppTable,
			Columns: []string{settings.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settings.AppTable,
			Columns: []string{settings.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SettingsUpdateOne is the builder for updating a single Settings entity.
type SettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettingsMutation
}

// SetSuccessWebhook sets the "SuccessWebhook" field.
func (suo *SettingsUpdateOne) SetSuccessWebhook(s string) *SettingsUpdateOne {
	suo.mutation.SetSuccessWebhook(s)
	return suo
}

// SetDeclineWebhook sets the "DeclineWebhook" field.
func (suo *SettingsUpdateOne) SetDeclineWebhook(s string) *SettingsUpdateOne {
	suo.mutation.SetDeclineWebhook(s)
	return suo
}

// SetCheckoutDelay sets the "CheckoutDelay" field.
func (suo *SettingsUpdateOne) SetCheckoutDelay(i int) *SettingsUpdateOne {
	suo.mutation.ResetCheckoutDelay()
	suo.mutation.SetCheckoutDelay(i)
	return suo
}

// AddCheckoutDelay adds i to the "CheckoutDelay" field.
func (suo *SettingsUpdateOne) AddCheckoutDelay(i int) *SettingsUpdateOne {
	suo.mutation.AddCheckoutDelay(i)
	return suo
}

// SetATCDelay sets the "ATCDelay" field.
func (suo *SettingsUpdateOne) SetATCDelay(i int) *SettingsUpdateOne {
	suo.mutation.ResetATCDelay()
	suo.mutation.SetATCDelay(i)
	return suo
}

// AddATCDelay adds i to the "ATCDelay" field.
func (suo *SettingsUpdateOne) AddATCDelay(i int) *SettingsUpdateOne {
	suo.mutation.AddATCDelay(i)
	return suo
}

// SetAppID sets the "App" edge to the App entity by ID.
func (suo *SettingsUpdateOne) SetAppID(id int) *SettingsUpdateOne {
	suo.mutation.SetAppID(id)
	return suo
}

// SetApp sets the "App" edge to the App entity.
func (suo *SettingsUpdateOne) SetApp(a *App) *SettingsUpdateOne {
	return suo.SetAppID(a.ID)
}

// Mutation returns the SettingsMutation object of the builder.
func (suo *SettingsUpdateOne) Mutation() *SettingsMutation {
	return suo.mutation
}

// ClearApp clears the "App" edge to the App entity.
func (suo *SettingsUpdateOne) ClearApp() *SettingsUpdateOne {
	suo.mutation.ClearApp()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SettingsUpdateOne) Select(field string, fields ...string) *SettingsUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Settings entity.
func (suo *SettingsUpdateOne) Save(ctx context.Context) (*Settings, error) {
	var (
		err  error
		node *Settings
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettingsUpdateOne) SaveX(ctx context.Context) *Settings {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettingsUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SettingsUpdateOne) check() error {
	if _, ok := suo.mutation.AppID(); suo.mutation.AppCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"App\"")
	}
	return nil
}

func (suo *SettingsUpdateOne) sqlSave(ctx context.Context) (_node *Settings, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   settings.Table,
			Columns: settings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: settings.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Settings.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, settings.FieldID)
		for _, f := range fields {
			if !settings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != settings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SuccessWebhook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldSuccessWebhook,
		})
	}
	if value, ok := suo.mutation.DeclineWebhook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldDeclineWebhook,
		})
	}
	if value, ok := suo.mutation.CheckoutDelay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldCheckoutDelay,
		})
	}
	if value, ok := suo.mutation.AddedCheckoutDelay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldCheckoutDelay,
		})
	}
	if value, ok := suo.mutation.ATCDelay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldATCDelay,
		})
	}
	if value, ok := suo.mutation.AddedATCDelay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldATCDelay,
		})
	}
	if suo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settings.AppTable,
			Columns: []string{settings.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settings.AppTable,
			Columns: []string{settings.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Settings{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
