// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/billing"
)

// Billing is the model entity for the Billing schema.
type Billing struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CardholderName holds the value of the "CardholderName" field.
	CardholderName string `json:"CardholderName,omitempty"`
	// CardNumber holds the value of the "CardNumber" field.
	CardNumber string `json:"CardNumber,omitempty"`
	// ExpiryMonth holds the value of the "ExpiryMonth" field.
	ExpiryMonth string `json:"ExpiryMonth,omitempty"`
	// ExpiryYear holds the value of the "ExpiryYear" field.
	ExpiryYear string `json:"ExpiryYear,omitempty"`
	// CVV holds the value of the "CVV" field.
	CVV string `json:"CVV,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingQuery when eager-loading is set.
	Edges BillingEdges `json:"edges"`
}

// BillingEdges holds the relations/edges for other nodes in the graph.
type BillingEdges struct {
	// Profile holds the value of the Profile edge.
	Profile []*Profile `json:"Profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading.
func (e BillingEdges) ProfileOrErr() ([]*Profile, error) {
	if e.loadedTypes[0] {
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "Profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Billing) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case billing.FieldID:
			values[i] = new(sql.NullInt64)
		case billing.FieldCardholderName, billing.FieldCardNumber, billing.FieldExpiryMonth, billing.FieldExpiryYear, billing.FieldCVV:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Billing", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Billing fields.
func (b *Billing) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billing.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case billing.FieldCardholderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CardholderName", values[i])
			} else if value.Valid {
				b.CardholderName = value.String
			}
		case billing.FieldCardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CardNumber", values[i])
			} else if value.Valid {
				b.CardNumber = value.String
			}
		case billing.FieldExpiryMonth:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExpiryMonth", values[i])
			} else if value.Valid {
				b.ExpiryMonth = value.String
			}
		case billing.FieldExpiryYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExpiryYear", values[i])
			} else if value.Valid {
				b.ExpiryYear = value.String
			}
		case billing.FieldCVV:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CVV", values[i])
			} else if value.Valid {
				b.CVV = value.String
			}
		}
	}
	return nil
}

// QueryProfile queries the "Profile" edge of the Billing entity.
func (b *Billing) QueryProfile() *ProfileQuery {
	return (&BillingClient{config: b.config}).QueryProfile(b)
}

// Update returns a builder for updating this Billing.
// Note that you need to call Billing.Unwrap() before calling this method if this Billing
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Billing) Update() *BillingUpdateOne {
	return (&BillingClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Billing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Billing) Unwrap() *Billing {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Billing is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Billing) String() string {
	var builder strings.Builder
	builder.WriteString("Billing(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", CardholderName=")
	builder.WriteString(b.CardholderName)
	builder.WriteString(", CardNumber=")
	builder.WriteString(b.CardNumber)
	builder.WriteString(", ExpiryMonth=")
	builder.WriteString(b.ExpiryMonth)
	builder.WriteString(", ExpiryYear=")
	builder.WriteString(b.ExpiryYear)
	builder.WriteString(", CVV=")
	builder.WriteString(b.CVV)
	builder.WriteByte(')')
	return builder.String()
}

// Billings is a parsable slice of Billing.
type Billings []*Billing

func (b Billings) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
