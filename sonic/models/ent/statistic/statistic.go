// Code generated by entc, DO NOT EDIT.

package statistic

import (
	"fmt"
)

const (
	// Label holds the string label denoting the statistic type in the database.
	Label = "statistic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "User"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "Product"
	// Table holds the table name of the statistic in the database.
	Table = "statistics"
	// UserTable is the table the holds the User relation/edge. The primary key declared below.
	UserTable = "user_Statistics"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// ProductTable is the table the holds the Product relation/edge. The primary key declared below.
	ProductTable = "statistic_Product"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
)

// Columns holds all SQL columns for statistic fields.
var Columns = []string{
	FieldID,
	FieldType,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the User relation (M2M).
	UserPrimaryKey = []string{"user_id", "statistic_id"}
	// ProductPrimaryKey and ProductColumn2 are the table columns denoting the
	// primary key for the Product relation (M2M).
	ProductPrimaryKey = []string{"statistic_id", "product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "Type" enum field.
type Type string

// Type values.
const (
	TypeCheckout Type = "Checkout"
	TypeDecline  Type = "Decline"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "Type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCheckout, TypeDecline:
		return nil
	default:
		return fmt.Errorf("statistic: invalid enum value for Type field: %q", _type)
	}
}
