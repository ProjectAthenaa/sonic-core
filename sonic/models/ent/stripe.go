// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/stripe"
)

// Stripe is the model entity for the Stripe schema.
type Stripe struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomerID holds the value of the "CustomerID" field.
	CustomerID string `json:"CustomerID,omitempty"`
	// SubscriptionID holds the value of the "SubscriptionID" field.
	SubscriptionID string `json:"SubscriptionID,omitempty"`
	// RenewalDate holds the value of the "RenewalDate" field.
	RenewalDate time.Time `json:"RenewalDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StripeQuery when eager-loading is set.
	Edges          StripeEdges `json:"edges"`
	license_stripe *int
}

// StripeEdges holds the relations/edges for other nodes in the graph.
type StripeEdges struct {
	// License holds the value of the License edge.
	License *License `json:"License,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LicenseOrErr returns the License value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StripeEdges) LicenseOrErr() (*License, error) {
	if e.loadedTypes[0] {
		if e.License == nil {
			// The edge License was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: license.Label}
		}
		return e.License, nil
	}
	return nil, &NotLoadedError{edge: "License"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stripe) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stripe.FieldID:
			values[i] = new(sql.NullInt64)
		case stripe.FieldCustomerID, stripe.FieldSubscriptionID:
			values[i] = new(sql.NullString)
		case stripe.FieldRenewalDate:
			values[i] = new(sql.NullTime)
		case stripe.ForeignKeys[0]: // license_stripe
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stripe", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stripe fields.
func (s *Stripe) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stripe.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case stripe.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CustomerID", values[i])
			} else if value.Valid {
				s.CustomerID = value.String
			}
		case stripe.FieldSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SubscriptionID", values[i])
			} else if value.Valid {
				s.SubscriptionID = value.String
			}
		case stripe.FieldRenewalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field RenewalDate", values[i])
			} else if value.Valid {
				s.RenewalDate = value.Time
			}
		case stripe.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field license_stripe", value)
			} else if value.Valid {
				s.license_stripe = new(int)
				*s.license_stripe = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryLicense queries the "License" edge of the Stripe entity.
func (s *Stripe) QueryLicense() *LicenseQuery {
	return (&StripeClient{config: s.config}).QueryLicense(s)
}

// Update returns a builder for updating this Stripe.
// Note that you need to call Stripe.Unwrap() before calling this method if this Stripe
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stripe) Update() *StripeUpdateOne {
	return (&StripeClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Stripe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stripe) Unwrap() *Stripe {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stripe is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stripe) String() string {
	var builder strings.Builder
	builder.WriteString("Stripe(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", CustomerID=")
	builder.WriteString(s.CustomerID)
	builder.WriteString(", SubscriptionID=")
	builder.WriteString(s.SubscriptionID)
	builder.WriteString(", RenewalDate=")
	builder.WriteString(s.RenewalDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Stripes is a parsable slice of Stripe.
type Stripes []*Stripe

func (s Stripes) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
