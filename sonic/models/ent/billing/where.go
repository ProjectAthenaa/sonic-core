// Code generated by entc, DO NOT EDIT.

package billing

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CardholderName applies equality check predicate on the "CardholderName" field. It's identical to CardholderNameEQ.
func CardholderName(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardholderName), v))
	})
}

// CardNumber applies equality check predicate on the "CardNumber" field. It's identical to CardNumberEQ.
func CardNumber(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardNumber), v))
	})
}

// ExpiryMonth applies equality check predicate on the "ExpiryMonth" field. It's identical to ExpiryMonthEQ.
func ExpiryMonth(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryYear applies equality check predicate on the "ExpiryYear" field. It's identical to ExpiryYearEQ.
func ExpiryYear(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiryYear), v))
	})
}

// CVV applies equality check predicate on the "CVV" field. It's identical to CVVEQ.
func CVV(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCVV), v))
	})
}

// CardholderNameEQ applies the EQ predicate on the "CardholderName" field.
func CardholderNameEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardholderName), v))
	})
}

// CardholderNameNEQ applies the NEQ predicate on the "CardholderName" field.
func CardholderNameNEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardholderName), v))
	})
}

// CardholderNameIn applies the In predicate on the "CardholderName" field.
func CardholderNameIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCardholderName), v...))
	})
}

// CardholderNameNotIn applies the NotIn predicate on the "CardholderName" field.
func CardholderNameNotIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCardholderName), v...))
	})
}

// CardholderNameGT applies the GT predicate on the "CardholderName" field.
func CardholderNameGT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCardholderName), v))
	})
}

// CardholderNameGTE applies the GTE predicate on the "CardholderName" field.
func CardholderNameGTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCardholderName), v))
	})
}

// CardholderNameLT applies the LT predicate on the "CardholderName" field.
func CardholderNameLT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCardholderName), v))
	})
}

// CardholderNameLTE applies the LTE predicate on the "CardholderName" field.
func CardholderNameLTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCardholderName), v))
	})
}

// CardholderNameContains applies the Contains predicate on the "CardholderName" field.
func CardholderNameContains(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCardholderName), v))
	})
}

// CardholderNameHasPrefix applies the HasPrefix predicate on the "CardholderName" field.
func CardholderNameHasPrefix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCardholderName), v))
	})
}

// CardholderNameHasSuffix applies the HasSuffix predicate on the "CardholderName" field.
func CardholderNameHasSuffix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCardholderName), v))
	})
}

// CardholderNameEqualFold applies the EqualFold predicate on the "CardholderName" field.
func CardholderNameEqualFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCardholderName), v))
	})
}

// CardholderNameContainsFold applies the ContainsFold predicate on the "CardholderName" field.
func CardholderNameContainsFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCardholderName), v))
	})
}

// CardNumberEQ applies the EQ predicate on the "CardNumber" field.
func CardNumberEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardNumber), v))
	})
}

// CardNumberNEQ applies the NEQ predicate on the "CardNumber" field.
func CardNumberNEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardNumber), v))
	})
}

// CardNumberIn applies the In predicate on the "CardNumber" field.
func CardNumberIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCardNumber), v...))
	})
}

// CardNumberNotIn applies the NotIn predicate on the "CardNumber" field.
func CardNumberNotIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCardNumber), v...))
	})
}

// CardNumberGT applies the GT predicate on the "CardNumber" field.
func CardNumberGT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCardNumber), v))
	})
}

// CardNumberGTE applies the GTE predicate on the "CardNumber" field.
func CardNumberGTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCardNumber), v))
	})
}

// CardNumberLT applies the LT predicate on the "CardNumber" field.
func CardNumberLT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCardNumber), v))
	})
}

// CardNumberLTE applies the LTE predicate on the "CardNumber" field.
func CardNumberLTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCardNumber), v))
	})
}

// CardNumberContains applies the Contains predicate on the "CardNumber" field.
func CardNumberContains(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCardNumber), v))
	})
}

// CardNumberHasPrefix applies the HasPrefix predicate on the "CardNumber" field.
func CardNumberHasPrefix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCardNumber), v))
	})
}

// CardNumberHasSuffix applies the HasSuffix predicate on the "CardNumber" field.
func CardNumberHasSuffix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCardNumber), v))
	})
}

// CardNumberEqualFold applies the EqualFold predicate on the "CardNumber" field.
func CardNumberEqualFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCardNumber), v))
	})
}

// CardNumberContainsFold applies the ContainsFold predicate on the "CardNumber" field.
func CardNumberContainsFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCardNumber), v))
	})
}

// ExpiryMonthEQ applies the EQ predicate on the "ExpiryMonth" field.
func ExpiryMonthEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthNEQ applies the NEQ predicate on the "ExpiryMonth" field.
func ExpiryMonthNEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthIn applies the In predicate on the "ExpiryMonth" field.
func ExpiryMonthIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiryMonth), v...))
	})
}

// ExpiryMonthNotIn applies the NotIn predicate on the "ExpiryMonth" field.
func ExpiryMonthNotIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiryMonth), v...))
	})
}

// ExpiryMonthGT applies the GT predicate on the "ExpiryMonth" field.
func ExpiryMonthGT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthGTE applies the GTE predicate on the "ExpiryMonth" field.
func ExpiryMonthGTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthLT applies the LT predicate on the "ExpiryMonth" field.
func ExpiryMonthLT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthLTE applies the LTE predicate on the "ExpiryMonth" field.
func ExpiryMonthLTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthContains applies the Contains predicate on the "ExpiryMonth" field.
func ExpiryMonthContains(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthHasPrefix applies the HasPrefix predicate on the "ExpiryMonth" field.
func ExpiryMonthHasPrefix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthHasSuffix applies the HasSuffix predicate on the "ExpiryMonth" field.
func ExpiryMonthHasSuffix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthEqualFold applies the EqualFold predicate on the "ExpiryMonth" field.
func ExpiryMonthEqualFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryMonthContainsFold applies the ContainsFold predicate on the "ExpiryMonth" field.
func ExpiryMonthContainsFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExpiryMonth), v))
	})
}

// ExpiryYearEQ applies the EQ predicate on the "ExpiryYear" field.
func ExpiryYearEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearNEQ applies the NEQ predicate on the "ExpiryYear" field.
func ExpiryYearNEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearIn applies the In predicate on the "ExpiryYear" field.
func ExpiryYearIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiryYear), v...))
	})
}

// ExpiryYearNotIn applies the NotIn predicate on the "ExpiryYear" field.
func ExpiryYearNotIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiryYear), v...))
	})
}

// ExpiryYearGT applies the GT predicate on the "ExpiryYear" field.
func ExpiryYearGT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearGTE applies the GTE predicate on the "ExpiryYear" field.
func ExpiryYearGTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearLT applies the LT predicate on the "ExpiryYear" field.
func ExpiryYearLT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearLTE applies the LTE predicate on the "ExpiryYear" field.
func ExpiryYearLTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearContains applies the Contains predicate on the "ExpiryYear" field.
func ExpiryYearContains(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearHasPrefix applies the HasPrefix predicate on the "ExpiryYear" field.
func ExpiryYearHasPrefix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearHasSuffix applies the HasSuffix predicate on the "ExpiryYear" field.
func ExpiryYearHasSuffix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearEqualFold applies the EqualFold predicate on the "ExpiryYear" field.
func ExpiryYearEqualFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExpiryYear), v))
	})
}

// ExpiryYearContainsFold applies the ContainsFold predicate on the "ExpiryYear" field.
func ExpiryYearContainsFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExpiryYear), v))
	})
}

// CVVEQ applies the EQ predicate on the "CVV" field.
func CVVEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCVV), v))
	})
}

// CVVNEQ applies the NEQ predicate on the "CVV" field.
func CVVNEQ(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCVV), v))
	})
}

// CVVIn applies the In predicate on the "CVV" field.
func CVVIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCVV), v...))
	})
}

// CVVNotIn applies the NotIn predicate on the "CVV" field.
func CVVNotIn(vs ...string) predicate.Billing {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Billing(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCVV), v...))
	})
}

// CVVGT applies the GT predicate on the "CVV" field.
func CVVGT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCVV), v))
	})
}

// CVVGTE applies the GTE predicate on the "CVV" field.
func CVVGTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCVV), v))
	})
}

// CVVLT applies the LT predicate on the "CVV" field.
func CVVLT(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCVV), v))
	})
}

// CVVLTE applies the LTE predicate on the "CVV" field.
func CVVLTE(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCVV), v))
	})
}

// CVVContains applies the Contains predicate on the "CVV" field.
func CVVContains(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCVV), v))
	})
}

// CVVHasPrefix applies the HasPrefix predicate on the "CVV" field.
func CVVHasPrefix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCVV), v))
	})
}

// CVVHasSuffix applies the HasSuffix predicate on the "CVV" field.
func CVVHasSuffix(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCVV), v))
	})
}

// CVVEqualFold applies the EqualFold predicate on the "CVV" field.
func CVVEqualFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCVV), v))
	})
}

// CVVContainsFold applies the ContainsFold predicate on the "CVV" field.
func CVVContainsFold(v string) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCVV), v))
	})
}

// HasProfile applies the HasEdge predicate on the "Profile" edge.
func HasProfile() predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProfileTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProfileTable, ProfilePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "Profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProfileInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProfileTable, ProfilePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Billing) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Billing) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Billing) predicate.Billing {
	return predicate.Billing(func(s *sql.Selector) {
		p(s.Not())
	})
}
