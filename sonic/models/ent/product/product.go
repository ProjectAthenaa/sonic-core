// Code generated by entc, DO NOT EDIT.

package product

import (
	"fmt"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldLookupType holds the string denoting the lookuptype field in the database.
	FieldLookupType = "lookup_type"
	// FieldPositiveKeywords holds the string denoting the positivekeywords field in the database.
	FieldPositiveKeywords = "positive_keywords"
	// FieldNegativeKeywords holds the string denoting the negativekeywords field in the database.
	FieldNegativeKeywords = "negative_keywords"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldSizes holds the string denoting the sizes field in the database.
	FieldSizes = "sizes"
	// FieldColors holds the string denoting the colors field in the database.
	FieldColors = "colors"
	// FieldSite holds the string denoting the site field in the database.
	FieldSite = "site"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "Task"
	// EdgeStatistic holds the string denoting the statistic edge name in mutations.
	EdgeStatistic = "Statistic"
	// Table holds the table name of the product in the database.
	Table = "products"
	// TaskTable is the table the holds the Task relation/edge. The primary key declared below.
	TaskTable = "task_Product"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// StatisticTable is the table the holds the Statistic relation/edge. The primary key declared below.
	StatisticTable = "statistic_Product"
	// StatisticInverseTable is the table name for the Statistic entity.
	// It exists in this package in order to avoid circular dependency with the "statistic" package.
	StatisticInverseTable = "statistics"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldImage,
	FieldLookupType,
	FieldPositiveKeywords,
	FieldNegativeKeywords,
	FieldLink,
	FieldQuantity,
	FieldSizes,
	FieldColors,
	FieldSite,
	FieldMetadata,
}

var (
	// TaskPrimaryKey and TaskColumn2 are the table columns denoting the
	// primary key for the Task relation (M2M).
	TaskPrimaryKey = []string{"task_id", "product_id"}
	// StatisticPrimaryKey and StatisticColumn2 are the table columns denoting the
	// primary key for the Statistic relation (M2M).
	StatisticPrimaryKey = []string{"statistic_id", "product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// LookupType defines the type for the "LookupType" enum field.
type LookupType string

// LookupType values.
const (
	LookupTypeKeywords LookupType = "Keywords"
	LookupTypeLink     LookupType = "Link"
)

func (_lookuptype LookupType) String() string {
	return string(_lookuptype)
}

// LookupTypeValidator is a validator for the "LookupType" field enum values. It is called by the builders before save.
func LookupTypeValidator(_lookuptype LookupType) error {
	switch _lookuptype {
	case LookupTypeKeywords, LookupTypeLink:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for LookupType field: %q", _lookuptype)
	}
}

// Site defines the type for the "Site" enum field.
type Site string

// Site values.
const (
	SiteFinishLine     Site = "FinishLine"
	SiteJD_Sports      Site = "JD_Sports"
	SiteYeezySupply    Site = "YeezySupply"
	SiteSupreme        Site = "Supreme"
	SiteEastbay_US     Site = "Eastbay_US"
	SiteChamps_US      Site = "Champs_US"
	SiteFootaction_US  Site = "Footaction_US"
	SiteFootlocker_US  Site = "Footlocker_US"
	SiteBestbuy        Site = "Bestbuy"
	SitePokemon_Center Site = "Pokemon_Center"
	SitePanini_US      Site = "Panini_US"
	SiteTopss          Site = "Topss"
	SiteNordstorm      Site = "Nordstorm"
	SiteEnd            Site = "End"
	SiteTarget         Site = "Target"
	SiteAmazon         Site = "Amazon"
	SiteSolebox        Site = "Solebox"
	SiteOnygo          Site = "Onygo"
	SiteSnipes         Site = "Snipes"
	SiteSsense         Site = "Ssense"
	SiteWalmart        Site = "Walmart"
	SiteHibbet         Site = "Hibbet"
)

func (_site Site) String() string {
	return string(_site)
}

// SiteValidator is a validator for the "Site" field enum values. It is called by the builders before save.
func SiteValidator(_site Site) error {
	switch _site {
	case SiteFinishLine, SiteJD_Sports, SiteYeezySupply, SiteSupreme, SiteEastbay_US, SiteChamps_US, SiteFootaction_US, SiteFootlocker_US, SiteBestbuy, SitePokemon_Center, SitePanini_US, SiteTopss, SiteNordstorm, SiteEnd, SiteTarget, SiteAmazon, SiteSolebox, SiteOnygo, SiteSnipes, SiteSsense, SiteWalmart, SiteHibbet:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for Site field: %q", _site)
	}
}
