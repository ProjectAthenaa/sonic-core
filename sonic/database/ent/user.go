// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/metadata"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/release"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Disabled holds the value of the "Disabled" field.
	Disabled bool `json:"Disabled,omitempty"`
	// TasksRan holds the value of the "TasksRan" field.
	TasksRan int `json:"TasksRan,omitempty"`
	// TotalDeclines holds the value of the "TotalDeclines" field.
	TotalDeclines int `json:"TotalDeclines,omitempty"`
	// MoneySpent holds the value of the "MoneySpent" field.
	MoneySpent float64 `json:"MoneySpent,omitempty"`
	// TotalCheckouts holds the value of the "TotalCheckouts" field.
	TotalCheckouts int `json:"TotalCheckouts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges             UserEdges `json:"edges"`
	release_customers *uuid.UUID
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// License holds the value of the License edge.
	License *License `json:"License,omitempty"`
	// Checkouts holds the value of the Checkouts edge.
	Checkouts []*Checkout `json:"Checkouts,omitempty"`
	// App holds the value of the App edge.
	App *App `json:"App,omitempty"`
	// Metadata holds the value of the Metadata edge.
	Metadata *Metadata `json:"Metadata,omitempty"`
	// Sessions holds the value of the Sessions edge.
	Sessions []*Session `json:"Sessions,omitempty"`
	// Release holds the value of the Release edge.
	Release *Release `json:"Release,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// LicenseOrErr returns the License value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) LicenseOrErr() (*License, error) {
	if e.loadedTypes[0] {
		if e.License == nil {
			// The edge License was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: license.Label}
		}
		return e.License, nil
	}
	return nil, &NotLoadedError{edge: "License"}
}

// CheckoutsOrErr returns the Checkouts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CheckoutsOrErr() ([]*Checkout, error) {
	if e.loadedTypes[1] {
		return e.Checkouts, nil
	}
	return nil, &NotLoadedError{edge: "Checkouts"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[2] {
		if e.App == nil {
			// The edge App was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "App"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[3] {
		if e.Metadata == nil {
			// The edge Metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "Metadata"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[4] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "Sessions"}
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ReleaseOrErr() (*Release, error) {
	if e.loadedTypes[5] {
		if e.Release == nil {
			// The edge Release was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: release.Label}
		}
		return e.Release, nil
	}
	return nil, &NotLoadedError{edge: "Release"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldDisabled:
			values[i] = new(sql.NullBool)
		case user.FieldMoneySpent:
			values[i] = new(sql.NullFloat64)
		case user.FieldTasksRan, user.FieldTotalDeclines, user.FieldTotalCheckouts:
			values[i] = new(sql.NullInt64)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		case user.ForeignKeys[0]: // release_customers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Disabled", values[i])
			} else if value.Valid {
				u.Disabled = value.Bool
			}
		case user.FieldTasksRan:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TasksRan", values[i])
			} else if value.Valid {
				u.TasksRan = int(value.Int64)
			}
		case user.FieldTotalDeclines:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TotalDeclines", values[i])
			} else if value.Valid {
				u.TotalDeclines = int(value.Int64)
			}
		case user.FieldMoneySpent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field MoneySpent", values[i])
			} else if value.Valid {
				u.MoneySpent = value.Float64
			}
		case user.FieldTotalCheckouts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TotalCheckouts", values[i])
			} else if value.Valid {
				u.TotalCheckouts = int(value.Int64)
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field release_customers", values[i])
			} else if value.Valid {
				u.release_customers = new(uuid.UUID)
				*u.release_customers = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryLicense queries the "License" edge of the User entity.
func (u *User) QueryLicense() *LicenseQuery {
	return (&UserClient{config: u.config}).QueryLicense(u)
}

// QueryCheckouts queries the "Checkouts" edge of the User entity.
func (u *User) QueryCheckouts() *CheckoutQuery {
	return (&UserClient{config: u.config}).QueryCheckouts(u)
}

// QueryApp queries the "App" edge of the User entity.
func (u *User) QueryApp() *AppQuery {
	return (&UserClient{config: u.config}).QueryApp(u)
}

// QueryMetadata queries the "Metadata" edge of the User entity.
func (u *User) QueryMetadata() *MetadataQuery {
	return (&UserClient{config: u.config}).QueryMetadata(u)
}

// QuerySessions queries the "Sessions" edge of the User entity.
func (u *User) QuerySessions() *SessionQuery {
	return (&UserClient{config: u.config}).QuerySessions(u)
}

// QueryRelease queries the "Release" edge of the User entity.
func (u *User) QueryRelease() *ReleaseQuery {
	return (&UserClient{config: u.config}).QueryRelease(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", Disabled=")
	builder.WriteString(fmt.Sprintf("%v", u.Disabled))
	builder.WriteString(", TasksRan=")
	builder.WriteString(fmt.Sprintf("%v", u.TasksRan))
	builder.WriteString(", TotalDeclines=")
	builder.WriteString(fmt.Sprintf("%v", u.TotalDeclines))
	builder.WriteString(", MoneySpent=")
	builder.WriteString(fmt.Sprintf("%v", u.MoneySpent))
	builder.WriteString(", TotalCheckouts=")
	builder.WriteString(fmt.Sprintf("%v", u.TotalCheckouts))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
