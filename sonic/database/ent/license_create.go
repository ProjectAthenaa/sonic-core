// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/stripe"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/user"
)

// LicenseCreate is the builder for creating a License entity.
type LicenseCreate struct {
	config
	mutation *LicenseMutation
	hooks    []Hook
}

// SetKey sets the "Key" field.
func (lc *LicenseCreate) SetKey(s string) *LicenseCreate {
	lc.mutation.SetKey(s)
	return lc
}

// SetHardwareID sets the "HardwareID" field.
func (lc *LicenseCreate) SetHardwareID(s string) *LicenseCreate {
	lc.mutation.SetHardwareID(s)
	return lc
}

// SetNillableHardwareID sets the "HardwareID" field if the given value is not nil.
func (lc *LicenseCreate) SetNillableHardwareID(s *string) *LicenseCreate {
	if s != nil {
		lc.SetHardwareID(*s)
	}
	return lc
}

// SetMobileHardwareID sets the "MobileHardwareID" field.
func (lc *LicenseCreate) SetMobileHardwareID(s string) *LicenseCreate {
	lc.mutation.SetMobileHardwareID(s)
	return lc
}

// SetNillableMobileHardwareID sets the "MobileHardwareID" field if the given value is not nil.
func (lc *LicenseCreate) SetNillableMobileHardwareID(s *string) *LicenseCreate {
	if s != nil {
		lc.SetMobileHardwareID(*s)
	}
	return lc
}

// SetType sets the "Type" field.
func (lc *LicenseCreate) SetType(l license.Type) *LicenseCreate {
	lc.mutation.SetType(l)
	return lc
}

// SetUserID sets the "User" edge to the User entity by ID.
func (lc *LicenseCreate) SetUserID(id int) *LicenseCreate {
	lc.mutation.SetUserID(id)
	return lc
}

// SetUser sets the "User" edge to the User entity.
func (lc *LicenseCreate) SetUser(u *User) *LicenseCreate {
	return lc.SetUserID(u.ID)
}

// AddStripeIDs adds the "Stripe" edge to the Stripe entity by IDs.
func (lc *LicenseCreate) AddStripeIDs(ids ...int) *LicenseCreate {
	lc.mutation.AddStripeIDs(ids...)
	return lc
}

// AddStripe adds the "Stripe" edges to the Stripe entity.
func (lc *LicenseCreate) AddStripe(s ...*Stripe) *LicenseCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lc.AddStripeIDs(ids...)
}

// Mutation returns the LicenseMutation object of the builder.
func (lc *LicenseCreate) Mutation() *LicenseMutation {
	return lc.mutation
}

// Save creates the License in the database.
func (lc *LicenseCreate) Save(ctx context.Context) (*License, error) {
	var (
		err  error
		node *License
	)
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			node, err = lc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LicenseCreate) SaveX(ctx context.Context) *License {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (lc *LicenseCreate) check() error {
	if _, ok := lc.mutation.Key(); !ok {
		return &ValidationError{Name: "Key", err: errors.New("ent: missing required field \"Key\"")}
	}
	if _, ok := lc.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New("ent: missing required field \"Type\"")}
	}
	if v, ok := lc.mutation.GetType(); ok {
		if err := license.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	if _, ok := lc.mutation.UserID(); !ok {
		return &ValidationError{Name: "User", err: errors.New("ent: missing required edge \"User\"")}
	}
	return nil
}

func (lc *LicenseCreate) sqlSave(ctx context.Context) (*License, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lc *LicenseCreate) createSpec() (*License, *sqlgraph.CreateSpec) {
	var (
		_node = &License{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: license.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: license.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := lc.mutation.HardwareID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldHardwareID,
		})
		_node.HardwareID = value
	}
	if value, ok := lc.mutation.MobileHardwareID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldMobileHardwareID,
		})
		_node.MobileHardwareID = value
	}
	if value, ok := lc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: license.FieldType,
		})
		_node.Type = value
	}
	if nodes := lc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   license.UserTable,
			Columns: []string{license.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_license = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.StripeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   license.StripeTable,
			Columns: []string{license.StripeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stripe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LicenseCreateBulk is the builder for creating many License entities in bulk.
type LicenseCreateBulk struct {
	config
	builders []*LicenseCreate
}

// Save creates the License entities in the database.
func (lcb *LicenseCreateBulk) Save(ctx context.Context) ([]*License, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*License, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LicenseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LicenseCreateBulk) SaveX(ctx context.Context) []*License {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
