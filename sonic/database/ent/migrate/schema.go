// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountGroupsColumns holds the columns for the "account_groups" table.
	AccountGroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "site", Type: field.TypeEnum, Enums: []string{"FinishLine", "JD_Sports", "YeezySupply", "Supreme", "Eastbay_US", "Champs_US", "Footaction_US", "Footlocker_US", "Bestbuy", "Pokemon_Center", "Panini_US", "Topss", "Nordstorm", "End", "Target", "Amazon", "Solebox", "Onygo", "Snipes", "Ssense", "Walmart", "Hibbet"}},
		{Name: "accounts", Type: field.TypeOther, SchemaType: map[string]string{"postgres": "bytea"}},
		{Name: "app_account_groups", Type: field.TypeUUID, Nullable: true},
	}
	// AccountGroupsTable holds the schema information for the "account_groups" table.
	AccountGroupsTable = &schema.Table{
		Name:       "account_groups",
		Columns:    AccountGroupsColumns,
		PrimaryKey: []*schema.Column{AccountGroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_groups_apps_AccountGroups",
				Columns:    []*schema.Column{AccountGroupsColumns[6]},
				RefColumns: []*schema.Column{AppsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "address_line", Type: field.TypeString},
		{Name: "address_line2", Type: field.TypeString, Nullable: true},
		{Name: "country", Type: field.TypeString},
		{Name: "state", Type: field.TypeString},
		{Name: "city", Type: field.TypeString},
		{Name: "zip", Type: field.TypeString},
		{Name: "shipping_shipping_address", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:       "addresses",
		Columns:    AddressesColumns,
		PrimaryKey: []*schema.Column{AddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "addresses_shippings_ShippingAddress",
				Columns:    []*schema.Column{AddressesColumns[9]},
				RefColumns: []*schema.Column{ShippingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AppsColumns holds the columns for the "apps" table.
	AppsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_app", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// AppsTable holds the schema information for the "apps" table.
	AppsTable = &schema.Table{
		Name:       "apps",
		Columns:    AppsColumns,
		PrimaryKey: []*schema.Column{AppsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "apps_users_App",
				Columns:    []*schema.Column{AppsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// BillingsColumns holds the columns for the "billings" table.
	BillingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "cardholder_name", Type: field.TypeString},
		{Name: "card_number", Type: field.TypeString},
		{Name: "expiry_month", Type: field.TypeString},
		{Name: "expiry_year", Type: field.TypeString},
		{Name: "cvv", Type: field.TypeString},
	}
	// BillingsTable holds the schema information for the "billings" table.
	BillingsTable = &schema.Table{
		Name:        "billings",
		Columns:     BillingsColumns,
		PrimaryKey:  []*schema.Column{BillingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CalendarsColumns holds the columns for the "calendars" table.
	CalendarsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "release_date", Type: field.TypeTime},
		{Name: "product_image", Type: field.TypeString, Default: "placeholder_image_here"},
		{Name: "product_name", Type: field.TypeString},
		{Name: "hyped_release", Type: field.TypeBool},
		{Name: "users_running", Type: field.TypeInt},
	}
	// CalendarsTable holds the schema information for the "calendars" table.
	CalendarsTable = &schema.Table{
		Name:        "calendars",
		Columns:     CalendarsColumns,
		PrimaryKey:  []*schema.Column{CalendarsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// LicensesColumns holds the columns for the "licenses" table.
	LicensesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "key", Type: field.TypeString},
		{Name: "hardware_id", Type: field.TypeString, Nullable: true},
		{Name: "mobile_hardware_id", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"Lifetime", "Renewal", "Beta", "Weekly", "FNF"}},
		{Name: "user_license", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// LicensesTable holds the schema information for the "licenses" table.
	LicensesTable = &schema.Table{
		Name:       "licenses",
		Columns:    LicensesColumns,
		PrimaryKey: []*schema.Column{LicensesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "licenses_users_License",
				Columns:    []*schema.Column{LicensesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MetadataColumns holds the columns for the "metadata" table.
	MetadataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "first_login", Type: field.TypeBool, Default: true},
		{Name: "theme", Type: field.TypeEnum, Enums: []string{"Variation1", "Variation2", "Variation3", "Variation4"}, Default: "Variation1"},
		{Name: "user_metadata", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// MetadataTable holds the schema information for the "metadata" table.
	MetadataTable = &schema.Table{
		Name:       "metadata",
		Columns:    MetadataColumns,
		PrimaryKey: []*schema.Column{MetadataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "metadata_users_Metadata",
				Columns:    []*schema.Column{MetadataColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "image", Type: field.TypeString, Nullable: true},
		{Name: "lookup_type", Type: field.TypeEnum, Enums: []string{"Keywords", "Link"}},
		{Name: "positive_keywords", Type: field.TypeJSON, Nullable: true},
		{Name: "negative_keywords", Type: field.TypeJSON, Nullable: true},
		{Name: "link", Type: field.TypeString, Nullable: true},
		{Name: "quantity", Type: field.TypeInt32, Default: 1},
		{Name: "sizes", Type: field.TypeJSON, Nullable: true},
		{Name: "colors", Type: field.TypeJSON, Nullable: true},
		{Name: "site", Type: field.TypeEnum, Enums: []string{"FinishLine", "JD_Sports", "YeezySupply", "Supreme", "Eastbay_US", "Champs_US", "Footaction_US", "Footlocker_US", "Bestbuy", "Pokemon_Center", "Panini_US", "Topss", "Nordstorm", "End", "Target", "Amazon", "Solebox", "Onygo", "Snipes", "Ssense", "Walmart", "Hibbet"}},
		{Name: "metadata", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"postgres": "bytea"}},
		{Name: "calendar_quick_task", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_calendars_QuickTask",
				Columns:    []*schema.Column{ProductsColumns[14]},
				RefColumns: []*schema.Column{CalendarsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProfilesColumns holds the columns for the "profiles" table.
	ProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "profile_group_profiles", Type: field.TypeUUID, Nullable: true},
	}
	// ProfilesTable holds the schema information for the "profiles" table.
	ProfilesTable = &schema.Table{
		Name:       "profiles",
		Columns:    ProfilesColumns,
		PrimaryKey: []*schema.Column{ProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profiles_profile_groups_Profiles",
				Columns:    []*schema.Column{ProfilesColumns[5]},
				RefColumns: []*schema.Column{ProfileGroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProfileGroupsColumns holds the columns for the "profile_groups" table.
	ProfileGroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
	}
	// ProfileGroupsTable holds the schema information for the "profile_groups" table.
	ProfileGroupsTable = &schema.Table{
		Name:        "profile_groups",
		Columns:     ProfileGroupsColumns,
		PrimaryKey:  []*schema.Column{ProfileGroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ProxiesColumns holds the columns for the "proxies" table.
	ProxiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "ip", Type: field.TypeString},
		{Name: "port", Type: field.TypeString},
		{Name: "proxy_list_proxies", Type: field.TypeUUID, Nullable: true},
	}
	// ProxiesTable holds the schema information for the "proxies" table.
	ProxiesTable = &schema.Table{
		Name:       "proxies",
		Columns:    ProxiesColumns,
		PrimaryKey: []*schema.Column{ProxiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "proxies_proxy_lists_Proxies",
				Columns:    []*schema.Column{ProxiesColumns[7]},
				RefColumns: []*schema.Column{ProxyListsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProxyListsColumns holds the columns for the "proxy_lists" table.
	ProxyListsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Default: "Default"},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"Residential", "Datacenter", "ISP"}},
	}
	// ProxyListsTable holds the schema information for the "proxy_lists" table.
	ProxyListsTable = &schema.Table{
		Name:        "proxy_lists",
		Columns:     ProxyListsColumns,
		PrimaryKey:  []*schema.Column{ProxyListsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "device_name", Type: field.TypeString, Default: "Unknown"},
		{Name: "os", Type: field.TypeString, Default: "Unknown"},
		{Name: "device_type", Type: field.TypeEnum, Enums: []string{"Unknown", "Phone", "Tablet", "PC", "Laptop"}, Default: "Unknown"},
		{Name: "ip", Type: field.TypeString, Default: "Unknown"},
		{Name: "expired", Type: field.TypeBool, Default: false},
		{Name: "user_sessions", Type: field.TypeUUID, Nullable: true},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sessions_users_Sessions",
				Columns:    []*schema.Column{SessionsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SettingsColumns holds the columns for the "settings" table.
	SettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "success_webhook", Type: field.TypeString, Default: ""},
		{Name: "decline_webhook", Type: field.TypeString, Default: ""},
		{Name: "checkout_delay", Type: field.TypeInt32, Default: 0},
		{Name: "atc_delay", Type: field.TypeInt32, Default: 0},
		{Name: "app_settings", Type: field.TypeUUID, Nullable: true},
	}
	// SettingsTable holds the schema information for the "settings" table.
	SettingsTable = &schema.Table{
		Name:       "settings",
		Columns:    SettingsColumns,
		PrimaryKey: []*schema.Column{SettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "settings_apps_Settings",
				Columns:    []*schema.Column{SettingsColumns[7]},
				RefColumns: []*schema.Column{AppsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ShippingsColumns holds the columns for the "shippings" table.
	ShippingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "phone_number", Type: field.TypeString},
		{Name: "billing_is_shipping", Type: field.TypeBool},
		{Name: "profile_shipping", Type: field.TypeUUID, Nullable: true},
	}
	// ShippingsTable holds the schema information for the "shippings" table.
	ShippingsTable = &schema.Table{
		Name:       "shippings",
		Columns:    ShippingsColumns,
		PrimaryKey: []*schema.Column{ShippingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "shippings_profiles_Shipping",
				Columns:    []*schema.Column{ShippingsColumns[7]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StatisticsColumns holds the columns for the "statistics" table.
	StatisticsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"Checkout", "Decline"}},
	}
	// StatisticsTable holds the schema information for the "statistics" table.
	StatisticsTable = &schema.Table{
		Name:        "statistics",
		Columns:     StatisticsColumns,
		PrimaryKey:  []*schema.Column{StatisticsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// StripesColumns holds the columns for the "stripes" table.
	StripesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "customer_id", Type: field.TypeString},
		{Name: "subscription_id", Type: field.TypeString, Nullable: true},
		{Name: "renewal_date", Type: field.TypeTime, Nullable: true},
		{Name: "license_stripe", Type: field.TypeUUID, Nullable: true},
	}
	// StripesTable holds the schema information for the "stripes" table.
	StripesTable = &schema.Table{
		Name:       "stripes",
		Columns:    StripesColumns,
		PrimaryKey: []*schema.Column{StripesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "stripes_licenses_Stripe",
				Columns:    []*schema.Column{StripesColumns[6]},
				RefColumns: []*schema.Column{LicensesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "start_time", Type: field.TypeTime, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:        "tasks",
		Columns:     TasksColumns,
		PrimaryKey:  []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// TaskGroupsColumns holds the columns for the "task_groups" table.
	TaskGroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Default: "Default"},
	}
	// TaskGroupsTable holds the schema information for the "task_groups" table.
	TaskGroupsTable = &schema.Table{
		Name:        "task_groups",
		Columns:     TaskGroupsColumns,
		PrimaryKey:  []*schema.Column{TaskGroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "disabled", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// AppProxyListsColumns holds the columns for the "app_ProxyLists" table.
	AppProxyListsColumns = []*schema.Column{
		{Name: "app_id", Type: field.TypeUUID},
		{Name: "proxy_list_id", Type: field.TypeUUID},
	}
	// AppProxyListsTable holds the schema information for the "app_ProxyLists" table.
	AppProxyListsTable = &schema.Table{
		Name:       "app_ProxyLists",
		Columns:    AppProxyListsColumns,
		PrimaryKey: []*schema.Column{AppProxyListsColumns[0], AppProxyListsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "app_ProxyLists_app_id",
				Columns:    []*schema.Column{AppProxyListsColumns[0]},
				RefColumns: []*schema.Column{AppsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "app_ProxyLists_proxy_list_id",
				Columns:    []*schema.Column{AppProxyListsColumns[1]},
				RefColumns: []*schema.Column{ProxyListsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// AppProfileGroupsColumns holds the columns for the "app_ProfileGroups" table.
	AppProfileGroupsColumns = []*schema.Column{
		{Name: "app_id", Type: field.TypeUUID},
		{Name: "profile_group_id", Type: field.TypeUUID},
	}
	// AppProfileGroupsTable holds the schema information for the "app_ProfileGroups" table.
	AppProfileGroupsTable = &schema.Table{
		Name:       "app_ProfileGroups",
		Columns:    AppProfileGroupsColumns,
		PrimaryKey: []*schema.Column{AppProfileGroupsColumns[0], AppProfileGroupsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "app_ProfileGroups_app_id",
				Columns:    []*schema.Column{AppProfileGroupsColumns[0]},
				RefColumns: []*schema.Column{AppsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "app_ProfileGroups_profile_group_id",
				Columns:    []*schema.Column{AppProfileGroupsColumns[1]},
				RefColumns: []*schema.Column{ProfileGroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// AppTaskGroupsColumns holds the columns for the "app_TaskGroups" table.
	AppTaskGroupsColumns = []*schema.Column{
		{Name: "app_id", Type: field.TypeUUID},
		{Name: "task_group_id", Type: field.TypeUUID},
	}
	// AppTaskGroupsTable holds the schema information for the "app_TaskGroups" table.
	AppTaskGroupsTable = &schema.Table{
		Name:       "app_TaskGroups",
		Columns:    AppTaskGroupsColumns,
		PrimaryKey: []*schema.Column{AppTaskGroupsColumns[0], AppTaskGroupsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "app_TaskGroups_app_id",
				Columns:    []*schema.Column{AppTaskGroupsColumns[0]},
				RefColumns: []*schema.Column{AppsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "app_TaskGroups_task_group_id",
				Columns:    []*schema.Column{AppTaskGroupsColumns[1]},
				RefColumns: []*schema.Column{TaskGroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProfileBillingColumns holds the columns for the "profile_Billing" table.
	ProfileBillingColumns = []*schema.Column{
		{Name: "profile_id", Type: field.TypeUUID},
		{Name: "billing_id", Type: field.TypeUUID},
	}
	// ProfileBillingTable holds the schema information for the "profile_Billing" table.
	ProfileBillingTable = &schema.Table{
		Name:       "profile_Billing",
		Columns:    ProfileBillingColumns,
		PrimaryKey: []*schema.Column{ProfileBillingColumns[0], ProfileBillingColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profile_Billing_profile_id",
				Columns:    []*schema.Column{ProfileBillingColumns[0]},
				RefColumns: []*schema.Column{ProfilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "profile_Billing_billing_id",
				Columns:    []*schema.Column{ProfileBillingColumns[1]},
				RefColumns: []*schema.Column{BillingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ShippingBillingAddressColumns holds the columns for the "shipping_BillingAddress" table.
	ShippingBillingAddressColumns = []*schema.Column{
		{Name: "shipping_id", Type: field.TypeUUID},
		{Name: "address_id", Type: field.TypeUUID},
	}
	// ShippingBillingAddressTable holds the schema information for the "shipping_BillingAddress" table.
	ShippingBillingAddressTable = &schema.Table{
		Name:       "shipping_BillingAddress",
		Columns:    ShippingBillingAddressColumns,
		PrimaryKey: []*schema.Column{ShippingBillingAddressColumns[0], ShippingBillingAddressColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "shipping_BillingAddress_shipping_id",
				Columns:    []*schema.Column{ShippingBillingAddressColumns[0]},
				RefColumns: []*schema.Column{ShippingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "shipping_BillingAddress_address_id",
				Columns:    []*schema.Column{ShippingBillingAddressColumns[1]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StatisticProductColumns holds the columns for the "statistic_Product" table.
	StatisticProductColumns = []*schema.Column{
		{Name: "statistic_id", Type: field.TypeUUID},
		{Name: "product_id", Type: field.TypeUUID},
	}
	// StatisticProductTable holds the schema information for the "statistic_Product" table.
	StatisticProductTable = &schema.Table{
		Name:       "statistic_Product",
		Columns:    StatisticProductColumns,
		PrimaryKey: []*schema.Column{StatisticProductColumns[0], StatisticProductColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "statistic_Product_statistic_id",
				Columns:    []*schema.Column{StatisticProductColumns[0]},
				RefColumns: []*schema.Column{StatisticsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "statistic_Product_product_id",
				Columns:    []*schema.Column{StatisticProductColumns[1]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TaskProductColumns holds the columns for the "task_Product" table.
	TaskProductColumns = []*schema.Column{
		{Name: "task_id", Type: field.TypeUUID},
		{Name: "product_id", Type: field.TypeUUID},
	}
	// TaskProductTable holds the schema information for the "task_Product" table.
	TaskProductTable = &schema.Table{
		Name:       "task_Product",
		Columns:    TaskProductColumns,
		PrimaryKey: []*schema.Column{TaskProductColumns[0], TaskProductColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "task_Product_task_id",
				Columns:    []*schema.Column{TaskProductColumns[0]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "task_Product_product_id",
				Columns:    []*schema.Column{TaskProductColumns[1]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TaskProxyListColumns holds the columns for the "task_ProxyList" table.
	TaskProxyListColumns = []*schema.Column{
		{Name: "task_id", Type: field.TypeUUID},
		{Name: "proxy_list_id", Type: field.TypeUUID},
	}
	// TaskProxyListTable holds the schema information for the "task_ProxyList" table.
	TaskProxyListTable = &schema.Table{
		Name:       "task_ProxyList",
		Columns:    TaskProxyListColumns,
		PrimaryKey: []*schema.Column{TaskProxyListColumns[0], TaskProxyListColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "task_ProxyList_task_id",
				Columns:    []*schema.Column{TaskProxyListColumns[0]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "task_ProxyList_proxy_list_id",
				Columns:    []*schema.Column{TaskProxyListColumns[1]},
				RefColumns: []*schema.Column{ProxyListsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TaskProfileGroupColumns holds the columns for the "task_ProfileGroup" table.
	TaskProfileGroupColumns = []*schema.Column{
		{Name: "task_id", Type: field.TypeUUID},
		{Name: "profile_group_id", Type: field.TypeUUID},
	}
	// TaskProfileGroupTable holds the schema information for the "task_ProfileGroup" table.
	TaskProfileGroupTable = &schema.Table{
		Name:       "task_ProfileGroup",
		Columns:    TaskProfileGroupColumns,
		PrimaryKey: []*schema.Column{TaskProfileGroupColumns[0], TaskProfileGroupColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "task_ProfileGroup_task_id",
				Columns:    []*schema.Column{TaskProfileGroupColumns[0]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "task_ProfileGroup_profile_group_id",
				Columns:    []*schema.Column{TaskProfileGroupColumns[1]},
				RefColumns: []*schema.Column{ProfileGroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TaskGroupTasksColumns holds the columns for the "task_group_Tasks" table.
	TaskGroupTasksColumns = []*schema.Column{
		{Name: "task_group_id", Type: field.TypeUUID},
		{Name: "task_id", Type: field.TypeUUID},
	}
	// TaskGroupTasksTable holds the schema information for the "task_group_Tasks" table.
	TaskGroupTasksTable = &schema.Table{
		Name:       "task_group_Tasks",
		Columns:    TaskGroupTasksColumns,
		PrimaryKey: []*schema.Column{TaskGroupTasksColumns[0], TaskGroupTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "task_group_Tasks_task_group_id",
				Columns:    []*schema.Column{TaskGroupTasksColumns[0]},
				RefColumns: []*schema.Column{TaskGroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "task_group_Tasks_task_id",
				Columns:    []*schema.Column{TaskGroupTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserStatisticsColumns holds the columns for the "user_Statistics" table.
	UserStatisticsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "statistic_id", Type: field.TypeUUID},
	}
	// UserStatisticsTable holds the schema information for the "user_Statistics" table.
	UserStatisticsTable = &schema.Table{
		Name:       "user_Statistics",
		Columns:    UserStatisticsColumns,
		PrimaryKey: []*schema.Column{UserStatisticsColumns[0], UserStatisticsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_Statistics_user_id",
				Columns:    []*schema.Column{UserStatisticsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_Statistics_statistic_id",
				Columns:    []*schema.Column{UserStatisticsColumns[1]},
				RefColumns: []*schema.Column{StatisticsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountGroupsTable,
		AddressesTable,
		AppsTable,
		BillingsTable,
		CalendarsTable,
		LicensesTable,
		MetadataTable,
		ProductsTable,
		ProfilesTable,
		ProfileGroupsTable,
		ProxiesTable,
		ProxyListsTable,
		SessionsTable,
		SettingsTable,
		ShippingsTable,
		StatisticsTable,
		StripesTable,
		TasksTable,
		TaskGroupsTable,
		UsersTable,
		AppProxyListsTable,
		AppProfileGroupsTable,
		AppTaskGroupsTable,
		ProfileBillingTable,
		ShippingBillingAddressTable,
		StatisticProductTable,
		TaskProductTable,
		TaskProxyListTable,
		TaskProfileGroupTable,
		TaskGroupTasksTable,
		UserStatisticsTable,
	}
)

func init() {
	AccountGroupsTable.ForeignKeys[0].RefTable = AppsTable
	AddressesTable.ForeignKeys[0].RefTable = ShippingsTable
	AppsTable.ForeignKeys[0].RefTable = UsersTable
	LicensesTable.ForeignKeys[0].RefTable = UsersTable
	MetadataTable.ForeignKeys[0].RefTable = UsersTable
	ProductsTable.ForeignKeys[0].RefTable = CalendarsTable
	ProfilesTable.ForeignKeys[0].RefTable = ProfileGroupsTable
	ProxiesTable.ForeignKeys[0].RefTable = ProxyListsTable
	SessionsTable.ForeignKeys[0].RefTable = UsersTable
	SettingsTable.ForeignKeys[0].RefTable = AppsTable
	ShippingsTable.ForeignKeys[0].RefTable = ProfilesTable
	StripesTable.ForeignKeys[0].RefTable = LicensesTable
	AppProxyListsTable.ForeignKeys[0].RefTable = AppsTable
	AppProxyListsTable.ForeignKeys[1].RefTable = ProxyListsTable
	AppProfileGroupsTable.ForeignKeys[0].RefTable = AppsTable
	AppProfileGroupsTable.ForeignKeys[1].RefTable = ProfileGroupsTable
	AppTaskGroupsTable.ForeignKeys[0].RefTable = AppsTable
	AppTaskGroupsTable.ForeignKeys[1].RefTable = TaskGroupsTable
	ProfileBillingTable.ForeignKeys[0].RefTable = ProfilesTable
	ProfileBillingTable.ForeignKeys[1].RefTable = BillingsTable
	ShippingBillingAddressTable.ForeignKeys[0].RefTable = ShippingsTable
	ShippingBillingAddressTable.ForeignKeys[1].RefTable = AddressesTable
	StatisticProductTable.ForeignKeys[0].RefTable = StatisticsTable
	StatisticProductTable.ForeignKeys[1].RefTable = ProductsTable
	TaskProductTable.ForeignKeys[0].RefTable = TasksTable
	TaskProductTable.ForeignKeys[1].RefTable = ProductsTable
	TaskProxyListTable.ForeignKeys[0].RefTable = TasksTable
	TaskProxyListTable.ForeignKeys[1].RefTable = ProxyListsTable
	TaskProfileGroupTable.ForeignKeys[0].RefTable = TasksTable
	TaskProfileGroupTable.ForeignKeys[1].RefTable = ProfileGroupsTable
	TaskGroupTasksTable.ForeignKeys[0].RefTable = TaskGroupsTable
	TaskGroupTasksTable.ForeignKeys[1].RefTable = TasksTable
	UserStatisticsTable.ForeignKeys[0].RefTable = UsersTable
	UserStatisticsTable.ForeignKeys[1].RefTable = StatisticsTable
}
