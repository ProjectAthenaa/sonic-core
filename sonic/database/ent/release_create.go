// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/release"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// ReleaseCreate is the builder for creating a Release entity.
type ReleaseCreate struct {
	config
	mutation *ReleaseMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReleaseCreate) SetCreatedAt(t time.Time) *ReleaseCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableCreatedAt(t *time.Time) *ReleaseCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetReleaseDate sets the "ReleaseDate" field.
func (rc *ReleaseCreate) SetReleaseDate(t time.Time) *ReleaseCreate {
	rc.mutation.SetReleaseDate(t)
	return rc
}

// SetNillableReleaseDate sets the "ReleaseDate" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableReleaseDate(t *time.Time) *ReleaseCreate {
	if t != nil {
		rc.SetReleaseDate(*t)
	}
	return rc
}

// SetStockLevel sets the "StockLevel" field.
func (rc *ReleaseCreate) SetStockLevel(i int32) *ReleaseCreate {
	rc.mutation.SetStockLevel(i)
	return rc
}

// SetNillableStockLevel sets the "StockLevel" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableStockLevel(i *int32) *ReleaseCreate {
	if i != nil {
		rc.SetStockLevel(*i)
	}
	return rc
}

// SetCode sets the "Code" field.
func (rc *ReleaseCreate) SetCode(s string) *ReleaseCreate {
	rc.mutation.SetCode(s)
	return rc
}

// SetNillableCode sets the "Code" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableCode(s *string) *ReleaseCreate {
	if s != nil {
		rc.SetCode(*s)
	}
	return rc
}

// SetType sets the "Type" field.
func (rc *ReleaseCreate) SetType(r release.Type) *ReleaseCreate {
	rc.mutation.SetType(r)
	return rc
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableType(r *release.Type) *ReleaseCreate {
	if r != nil {
		rc.SetType(*r)
	}
	return rc
}

// SetOneTimeFeeAmount sets the "OneTimeFeeAmount" field.
func (rc *ReleaseCreate) SetOneTimeFeeAmount(i int64) *ReleaseCreate {
	rc.mutation.SetOneTimeFeeAmount(i)
	return rc
}

// SetNillableOneTimeFeeAmount sets the "OneTimeFeeAmount" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableOneTimeFeeAmount(i *int64) *ReleaseCreate {
	if i != nil {
		rc.SetOneTimeFeeAmount(*i)
	}
	return rc
}

// SetSubscriptionFee sets the "SubscriptionFee" field.
func (rc *ReleaseCreate) SetSubscriptionFee(i int64) *ReleaseCreate {
	rc.mutation.SetSubscriptionFee(i)
	return rc
}

// SetNillableSubscriptionFee sets the "SubscriptionFee" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillableSubscriptionFee(i *int64) *ReleaseCreate {
	if i != nil {
		rc.SetSubscriptionFee(*i)
	}
	return rc
}

// SetPriceID sets the "PriceID" field.
func (rc *ReleaseCreate) SetPriceID(s string) *ReleaseCreate {
	rc.mutation.SetPriceID(s)
	return rc
}

// SetNillablePriceID sets the "PriceID" field if the given value is not nil.
func (rc *ReleaseCreate) SetNillablePriceID(s *string) *ReleaseCreate {
	if s != nil {
		rc.SetPriceID(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReleaseCreate) SetID(u uuid.UUID) *ReleaseCreate {
	rc.mutation.SetID(u)
	return rc
}

// AddCustomerIDs adds the "Customers" edge to the User entity by IDs.
func (rc *ReleaseCreate) AddCustomerIDs(ids ...uuid.UUID) *ReleaseCreate {
	rc.mutation.AddCustomerIDs(ids...)
	return rc
}

// AddCustomers adds the "Customers" edges to the User entity.
func (rc *ReleaseCreate) AddCustomers(u ...*User) *ReleaseCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rc.AddCustomerIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (rc *ReleaseCreate) Mutation() *ReleaseMutation {
	return rc.mutation
}

// Save creates the Release in the database.
func (rc *ReleaseCreate) Save(ctx context.Context) (*Release, error) {
	var (
		err  error
		node *Release
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReleaseCreate) SaveX(ctx context.Context) *Release {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rc *ReleaseCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := release.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.ReleaseDate(); !ok {
		v := release.DefaultReleaseDate()
		rc.mutation.SetReleaseDate(v)
	}
	if _, ok := rc.mutation.StockLevel(); !ok {
		v := release.DefaultStockLevel
		rc.mutation.SetStockLevel(v)
	}
	if _, ok := rc.mutation.Code(); !ok {
		v := release.DefaultCode
		rc.mutation.SetCode(v)
	}
	if _, ok := rc.mutation.GetType(); !ok {
		v := release.DefaultType
		rc.mutation.SetType(v)
	}
	if _, ok := rc.mutation.OneTimeFeeAmount(); !ok {
		v := release.DefaultOneTimeFeeAmount
		rc.mutation.SetOneTimeFeeAmount(v)
	}
	if _, ok := rc.mutation.SubscriptionFee(); !ok {
		v := release.DefaultSubscriptionFee
		rc.mutation.SetSubscriptionFee(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := release.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReleaseCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := rc.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "ReleaseDate", err: errors.New("ent: missing required field \"ReleaseDate\"")}
	}
	if _, ok := rc.mutation.StockLevel(); !ok {
		return &ValidationError{Name: "StockLevel", err: errors.New("ent: missing required field \"StockLevel\"")}
	}
	if _, ok := rc.mutation.Code(); !ok {
		return &ValidationError{Name: "Code", err: errors.New("ent: missing required field \"Code\"")}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New("ent: missing required field \"Type\"")}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := release.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	if _, ok := rc.mutation.OneTimeFeeAmount(); !ok {
		return &ValidationError{Name: "OneTimeFeeAmount", err: errors.New("ent: missing required field \"OneTimeFeeAmount\"")}
	}
	return nil
}

func (rc *ReleaseCreate) sqlSave(ctx context.Context) (*Release, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (rc *ReleaseCreate) createSpec() (*Release, *sqlgraph.CreateSpec) {
	var (
		_node = &Release{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: release.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: release.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: release.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.ReleaseDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: release.FieldReleaseDate,
		})
		_node.ReleaseDate = value
	}
	if value, ok := rc.mutation.StockLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: release.FieldStockLevel,
		})
		_node.StockLevel = value
	}
	if value, ok := rc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: release.FieldType,
		})
		_node.Type = value
	}
	if value, ok := rc.mutation.OneTimeFeeAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: release.FieldOneTimeFeeAmount,
		})
		_node.OneTimeFeeAmount = value
	}
	if value, ok := rc.mutation.SubscriptionFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: release.FieldSubscriptionFee,
		})
		_node.SubscriptionFee = &value
	}
	if value, ok := rc.mutation.PriceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldPriceID,
		})
		_node.PriceID = &value
	}
	if nodes := rc.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.CustomersTable,
			Columns: []string{release.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReleaseCreateBulk is the builder for creating many Release entities in bulk.
type ReleaseCreateBulk struct {
	config
	builders []*ReleaseCreate
}

// Save creates the Release entities in the database.
func (rcb *ReleaseCreateBulk) Save(ctx context.Context) ([]*Release, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Release, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReleaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReleaseCreateBulk) SaveX(ctx context.Context) []*Release {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
