// Code generated by entc, DO NOT EDIT.

package metadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// FirstLogin applies equality check predicate on the "FirstLogin" field. It's identical to FirstLoginEQ.
func FirstLogin(v bool) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstLogin), v))
	})
}

// DiscordID applies equality check predicate on the "DiscordID" field. It's identical to DiscordIDEQ.
func DiscordID(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordID), v))
	})
}

// DiscordAccessToken applies equality check predicate on the "DiscordAccessToken" field. It's identical to DiscordAccessTokenEQ.
func DiscordAccessToken(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordRefreshToken applies equality check predicate on the "DiscordRefreshToken" field. It's identical to DiscordRefreshTokenEQ.
func DiscordRefreshToken(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordRefreshToken), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// FirstLoginEQ applies the EQ predicate on the "FirstLogin" field.
func FirstLoginEQ(v bool) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstLogin), v))
	})
}

// FirstLoginNEQ applies the NEQ predicate on the "FirstLogin" field.
func FirstLoginNEQ(v bool) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstLogin), v))
	})
}

// ThemeEQ applies the EQ predicate on the "Theme" field.
func ThemeEQ(v Theme) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTheme), v))
	})
}

// ThemeNEQ applies the NEQ predicate on the "Theme" field.
func ThemeNEQ(v Theme) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTheme), v))
	})
}

// ThemeIn applies the In predicate on the "Theme" field.
func ThemeIn(vs ...Theme) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTheme), v...))
	})
}

// ThemeNotIn applies the NotIn predicate on the "Theme" field.
func ThemeNotIn(vs ...Theme) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTheme), v...))
	})
}

// DiscordIDEQ applies the EQ predicate on the "DiscordID" field.
func DiscordIDEQ(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordID), v))
	})
}

// DiscordIDNEQ applies the NEQ predicate on the "DiscordID" field.
func DiscordIDNEQ(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordID), v))
	})
}

// DiscordIDIn applies the In predicate on the "DiscordID" field.
func DiscordIDIn(vs ...string) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscordID), v...))
	})
}

// DiscordIDNotIn applies the NotIn predicate on the "DiscordID" field.
func DiscordIDNotIn(vs ...string) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscordID), v...))
	})
}

// DiscordIDGT applies the GT predicate on the "DiscordID" field.
func DiscordIDGT(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordID), v))
	})
}

// DiscordIDGTE applies the GTE predicate on the "DiscordID" field.
func DiscordIDGTE(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordID), v))
	})
}

// DiscordIDLT applies the LT predicate on the "DiscordID" field.
func DiscordIDLT(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordID), v))
	})
}

// DiscordIDLTE applies the LTE predicate on the "DiscordID" field.
func DiscordIDLTE(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordID), v))
	})
}

// DiscordIDContains applies the Contains predicate on the "DiscordID" field.
func DiscordIDContains(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordID), v))
	})
}

// DiscordIDHasPrefix applies the HasPrefix predicate on the "DiscordID" field.
func DiscordIDHasPrefix(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordID), v))
	})
}

// DiscordIDHasSuffix applies the HasSuffix predicate on the "DiscordID" field.
func DiscordIDHasSuffix(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordID), v))
	})
}

// DiscordIDEqualFold applies the EqualFold predicate on the "DiscordID" field.
func DiscordIDEqualFold(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordID), v))
	})
}

// DiscordIDContainsFold applies the ContainsFold predicate on the "DiscordID" field.
func DiscordIDContainsFold(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordID), v))
	})
}

// DiscordAccessTokenEQ applies the EQ predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenEQ(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenNEQ applies the NEQ predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenNEQ(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenIn applies the In predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenIn(vs ...string) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscordAccessToken), v...))
	})
}

// DiscordAccessTokenNotIn applies the NotIn predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenNotIn(vs ...string) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscordAccessToken), v...))
	})
}

// DiscordAccessTokenGT applies the GT predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenGT(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenGTE applies the GTE predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenGTE(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenLT applies the LT predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenLT(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenLTE applies the LTE predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenLTE(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenContains applies the Contains predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenContains(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenHasPrefix applies the HasPrefix predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenHasPrefix(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenHasSuffix applies the HasSuffix predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenHasSuffix(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenEqualFold applies the EqualFold predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenEqualFold(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordAccessTokenContainsFold applies the ContainsFold predicate on the "DiscordAccessToken" field.
func DiscordAccessTokenContainsFold(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordAccessToken), v))
	})
}

// DiscordRefreshTokenEQ applies the EQ predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenEQ(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenNEQ applies the NEQ predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenNEQ(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenIn applies the In predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenIn(vs ...string) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscordRefreshToken), v...))
	})
}

// DiscordRefreshTokenNotIn applies the NotIn predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenNotIn(vs ...string) predicate.Metadata {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Metadata(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscordRefreshToken), v...))
	})
}

// DiscordRefreshTokenGT applies the GT predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenGT(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenGTE applies the GTE predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenGTE(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenLT applies the LT predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenLT(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenLTE applies the LTE predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenLTE(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenContains applies the Contains predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenContains(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenHasPrefix applies the HasPrefix predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenHasPrefix(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenHasSuffix applies the HasSuffix predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenHasSuffix(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenEqualFold applies the EqualFold predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenEqualFold(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscordRefreshToken), v))
	})
}

// DiscordRefreshTokenContainsFold applies the ContainsFold predicate on the "DiscordRefreshToken" field.
func DiscordRefreshTokenContainsFold(v string) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscordRefreshToken), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Metadata) predicate.Metadata {
	return predicate.Metadata(func(s *sql.Selector) {
		p(s.Not())
	})
}
