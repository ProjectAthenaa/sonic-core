// Code generated by entc, DO NOT EDIT.

package metadata

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the metadata type in the database.
	Label = "metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFirstLogin holds the string denoting the firstlogin field in the database.
	FieldFirstLogin = "first_login"
	// FieldTheme holds the string denoting the theme field in the database.
	FieldTheme = "theme"
	// FieldDiscordID holds the string denoting the discordid field in the database.
	FieldDiscordID = "discord_id"
	// FieldDiscordAccessToken holds the string denoting the discordaccesstoken field in the database.
	FieldDiscordAccessToken = "discord_access_token"
	// FieldDiscordRefreshToken holds the string denoting the discordrefreshtoken field in the database.
	FieldDiscordRefreshToken = "discord_refresh_token"
	// FieldDiscordUsername holds the string denoting the discordusername field in the database.
	FieldDiscordUsername = "discord_username"
	// FieldDiscordAvatar holds the string denoting the discordavatar field in the database.
	FieldDiscordAvatar = "discord_avatar"
	// FieldDiscordDiscriminator holds the string denoting the discorddiscriminator field in the database.
	FieldDiscordDiscriminator = "discord_discriminator"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the metadata in the database.
	Table = "metadata"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "metadata"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_metadata"
)

// Columns holds all SQL columns for metadata fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFirstLogin,
	FieldTheme,
	FieldDiscordID,
	FieldDiscordAccessToken,
	FieldDiscordRefreshToken,
	FieldDiscordUsername,
	FieldDiscordAvatar,
	FieldDiscordDiscriminator,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "metadata"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_metadata",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultFirstLogin holds the default value on creation for the "FirstLogin" field.
	DefaultFirstLogin bool
	// DefaultDiscordID holds the default value on creation for the "DiscordID" field.
	DefaultDiscordID string
	// DefaultDiscordAccessToken holds the default value on creation for the "DiscordAccessToken" field.
	DefaultDiscordAccessToken string
	// DefaultDiscordRefreshToken holds the default value on creation for the "DiscordRefreshToken" field.
	DefaultDiscordRefreshToken string
	// DefaultDiscordAvatar holds the default value on creation for the "DiscordAvatar" field.
	DefaultDiscordAvatar string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Theme defines the type for the "Theme" enum field.
type Theme string

// ThemeVariation1 is the default value of the Theme enum.
const DefaultTheme = ThemeVariation1

// Theme values.
const (
	ThemeVariation1 Theme = "Variation1"
	ThemeVariation2 Theme = "Variation2"
	ThemeVariation3 Theme = "Variation3"
	ThemeVariation4 Theme = "Variation4"
)

func (_theme Theme) String() string {
	return string(_theme)
}

// ThemeValidator is a validator for the "Theme" field enum values. It is called by the builders before save.
func ThemeValidator(_theme Theme) error {
	switch _theme {
	case ThemeVariation1, ThemeVariation2, ThemeVariation3, ThemeVariation4:
		return nil
	default:
		return fmt.Errorf("metadata: invalid enum value for Theme field: %q", _theme)
	}
}
