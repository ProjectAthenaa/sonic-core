// Code generated by entc, DO NOT EDIT.

package app

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the app type in the database.
	Label = "app"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "User"
	// EdgeSettings holds the string denoting the settings edge name in mutations.
	EdgeSettings = "Settings"
	// EdgeProxyLists holds the string denoting the proxylists edge name in mutations.
	EdgeProxyLists = "ProxyLists"
	// EdgeProfileGroups holds the string denoting the profilegroups edge name in mutations.
	EdgeProfileGroups = "ProfileGroups"
	// EdgeTaskGroups holds the string denoting the taskgroups edge name in mutations.
	EdgeTaskGroups = "TaskGroups"
	// EdgeAccountGroups holds the string denoting the accountgroups edge name in mutations.
	EdgeAccountGroups = "AccountGroups"
	// Table holds the table name of the app in the database.
	Table = "apps"
	// UserTable is the table that holds the User relation/edge.
	UserTable = "apps"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the User relation/edge.
	UserColumn = "user_app"
	// SettingsTable is the table that holds the Settings relation/edge.
	SettingsTable = "settings"
	// SettingsInverseTable is the table name for the Settings entity.
	// It exists in this package in order to avoid circular dependency with the "settings" package.
	SettingsInverseTable = "settings"
	// SettingsColumn is the table column denoting the Settings relation/edge.
	SettingsColumn = "app_settings"
	// ProxyListsTable is the table that holds the ProxyLists relation/edge. The primary key declared below.
	ProxyListsTable = "app_ProxyLists"
	// ProxyListsInverseTable is the table name for the ProxyList entity.
	// It exists in this package in order to avoid circular dependency with the "proxylist" package.
	ProxyListsInverseTable = "proxy_lists"
	// ProfileGroupsTable is the table that holds the ProfileGroups relation/edge. The primary key declared below.
	ProfileGroupsTable = "app_ProfileGroups"
	// ProfileGroupsInverseTable is the table name for the ProfileGroup entity.
	// It exists in this package in order to avoid circular dependency with the "profilegroup" package.
	ProfileGroupsInverseTable = "profile_groups"
	// TaskGroupsTable is the table that holds the TaskGroups relation/edge. The primary key declared below.
	TaskGroupsTable = "app_TaskGroups"
	// TaskGroupsInverseTable is the table name for the TaskGroup entity.
	// It exists in this package in order to avoid circular dependency with the "taskgroup" package.
	TaskGroupsInverseTable = "task_groups"
	// AccountGroupsTable is the table that holds the AccountGroups relation/edge.
	AccountGroupsTable = "account_group"
	// AccountGroupsInverseTable is the table name for the AccountGroup entity.
	// It exists in this package in order to avoid circular dependency with the "accountgroup" package.
	AccountGroupsInverseTable = "account_group"
	// AccountGroupsColumn is the table column denoting the AccountGroups relation/edge.
	AccountGroupsColumn = "app_account_groups"
)

// Columns holds all SQL columns for app fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "apps"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_app",
}

var (
	// ProxyListsPrimaryKey and ProxyListsColumn2 are the table columns denoting the
	// primary key for the ProxyLists relation (M2M).
	ProxyListsPrimaryKey = []string{"app_id", "proxy_list_id"}
	// ProfileGroupsPrimaryKey and ProfileGroupsColumn2 are the table columns denoting the
	// primary key for the ProfileGroups relation (M2M).
	ProfileGroupsPrimaryKey = []string{"app_id", "profile_group_id"}
	// TaskGroupsPrimaryKey and TaskGroupsColumn2 are the table columns denoting the
	// primary key for the TaskGroups relation (M2M).
	TaskGroupsPrimaryKey = []string{"app_id", "task_group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
