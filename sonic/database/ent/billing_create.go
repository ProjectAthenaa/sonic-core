// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/billing"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
	"github.com/google/uuid"
)

// BillingCreate is the builder for creating a Billing entity.
type BillingCreate struct {
	config
	mutation *BillingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BillingCreate) SetCreatedAt(t time.Time) *BillingCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BillingCreate) SetNillableCreatedAt(t *time.Time) *BillingCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BillingCreate) SetUpdatedAt(t time.Time) *BillingCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BillingCreate) SetNillableUpdatedAt(t *time.Time) *BillingCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetCardholderName sets the "CardholderName" field.
func (bc *BillingCreate) SetCardholderName(s string) *BillingCreate {
	bc.mutation.SetCardholderName(s)
	return bc
}

// SetCardNumber sets the "CardNumber" field.
func (bc *BillingCreate) SetCardNumber(s string) *BillingCreate {
	bc.mutation.SetCardNumber(s)
	return bc
}

// SetExpiryMonth sets the "ExpiryMonth" field.
func (bc *BillingCreate) SetExpiryMonth(s string) *BillingCreate {
	bc.mutation.SetExpiryMonth(s)
	return bc
}

// SetExpiryYear sets the "ExpiryYear" field.
func (bc *BillingCreate) SetExpiryYear(s string) *BillingCreate {
	bc.mutation.SetExpiryYear(s)
	return bc
}

// SetCVV sets the "CVV" field.
func (bc *BillingCreate) SetCVV(s string) *BillingCreate {
	bc.mutation.SetCVV(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BillingCreate) SetID(u uuid.UUID) *BillingCreate {
	bc.mutation.SetID(u)
	return bc
}

// AddProfileIDs adds the "Profile" edge to the Profile entity by IDs.
func (bc *BillingCreate) AddProfileIDs(ids ...uuid.UUID) *BillingCreate {
	bc.mutation.AddProfileIDs(ids...)
	return bc
}

// AddProfile adds the "Profile" edges to the Profile entity.
func (bc *BillingCreate) AddProfile(p ...*Profile) *BillingCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bc.AddProfileIDs(ids...)
}

// Mutation returns the BillingMutation object of the builder.
func (bc *BillingCreate) Mutation() *BillingMutation {
	return bc.mutation
}

// Save creates the Billing in the database.
func (bc *BillingCreate) Save(ctx context.Context) (*Billing, error) {
	var (
		err  error
		node *Billing
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BillingCreate) SaveX(ctx context.Context) *Billing {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BillingCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BillingCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BillingCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := billing.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := billing.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := billing.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BillingCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := bc.mutation.CardholderName(); !ok {
		return &ValidationError{Name: "CardholderName", err: errors.New(`ent: missing required field "CardholderName"`)}
	}
	if _, ok := bc.mutation.CardNumber(); !ok {
		return &ValidationError{Name: "CardNumber", err: errors.New(`ent: missing required field "CardNumber"`)}
	}
	if _, ok := bc.mutation.ExpiryMonth(); !ok {
		return &ValidationError{Name: "ExpiryMonth", err: errors.New(`ent: missing required field "ExpiryMonth"`)}
	}
	if _, ok := bc.mutation.ExpiryYear(); !ok {
		return &ValidationError{Name: "ExpiryYear", err: errors.New(`ent: missing required field "ExpiryYear"`)}
	}
	if _, ok := bc.mutation.CVV(); !ok {
		return &ValidationError{Name: "CVV", err: errors.New(`ent: missing required field "CVV"`)}
	}
	return nil
}

func (bc *BillingCreate) sqlSave(ctx context.Context) (*Billing, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (bc *BillingCreate) createSpec() (*Billing, *sqlgraph.CreateSpec) {
	var (
		_node = &Billing{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: billing.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: billing.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: billing.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: billing.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.CardholderName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCardholderName,
		})
		_node.CardholderName = value
	}
	if value, ok := bc.mutation.CardNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCardNumber,
		})
		_node.CardNumber = value
	}
	if value, ok := bc.mutation.ExpiryMonth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldExpiryMonth,
		})
		_node.ExpiryMonth = value
	}
	if value, ok := bc.mutation.ExpiryYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldExpiryYear,
		})
		_node.ExpiryYear = value
	}
	if value, ok := bc.mutation.CVV(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCVV,
		})
		_node.CVV = value
	}
	if nodes := bc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   billing.ProfileTable,
			Columns: billing.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillingCreateBulk is the builder for creating many Billing entities in bulk.
type BillingCreateBulk struct {
	config
	builders []*BillingCreate
}

// Save creates the Billing entities in the database.
func (bcb *BillingCreateBulk) Save(ctx context.Context) ([]*Billing, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Billing, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BillingCreateBulk) SaveX(ctx context.Context) []*Billing {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BillingCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BillingCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
