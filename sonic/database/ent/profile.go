// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profilegroup"
	"github.com/google/uuid"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges                  ProfileEdges `json:"edges"`
	profile_group_profiles *uuid.UUID
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// ProfileGroup holds the value of the ProfileGroup edge.
	ProfileGroup *ProfileGroup `json:"ProfileGroup,omitempty"`
	// Shipping holds the value of the Shipping edge.
	Shipping []*Shipping `json:"Shipping,omitempty"`
	// Billing holds the value of the Billing edge.
	Billing []*Billing `json:"Billing,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProfileGroupOrErr returns the ProfileGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) ProfileGroupOrErr() (*ProfileGroup, error) {
	if e.loadedTypes[0] {
		if e.ProfileGroup == nil {
			// The edge ProfileGroup was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: profilegroup.Label}
		}
		return e.ProfileGroup, nil
	}
	return nil, &NotLoadedError{edge: "ProfileGroup"}
}

// ShippingOrErr returns the Shipping value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) ShippingOrErr() ([]*Shipping, error) {
	if e.loadedTypes[1] {
		return e.Shipping, nil
	}
	return nil, &NotLoadedError{edge: "Shipping"}
}

// BillingOrErr returns the Billing value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) BillingOrErr() ([]*Billing, error) {
	if e.loadedTypes[2] {
		return e.Billing, nil
	}
	return nil, &NotLoadedError{edge: "Billing"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldName, profile.FieldEmail:
			values[i] = new(sql.NullString)
		case profile.FieldCreatedAt, profile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case profile.FieldID:
			values[i] = new(uuid.UUID)
		case profile.ForeignKeys[0]: // profile_group_profiles
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Profile", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case profile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case profile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case profile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case profile.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				pr.Email = value.String
			}
		case profile.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field profile_group_profiles", values[i])
			} else if value != nil {
				pr.profile_group_profiles = value
			}
		}
	}
	return nil
}

// QueryProfileGroup queries the "ProfileGroup" edge of the Profile entity.
func (pr *Profile) QueryProfileGroup() *ProfileGroupQuery {
	return (&ProfileClient{config: pr.config}).QueryProfileGroup(pr)
}

// QueryShipping queries the "Shipping" edge of the Profile entity.
func (pr *Profile) QueryShipping() *ShippingQuery {
	return (&ProfileClient{config: pr.config}).QueryShipping(pr)
}

// QueryBilling queries the "Billing" edge of the Profile entity.
func (pr *Profile) QueryBilling() *BillingQuery {
	return (&ProfileClient{config: pr.config}).QueryBilling(pr)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return (&ProfileClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", Name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", Email=")
	builder.WriteString(pr.Email)
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile

func (pr Profiles) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
