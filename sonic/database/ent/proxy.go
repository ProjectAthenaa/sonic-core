// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxy"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxylist"
)

// Proxy is the model entity for the Proxy schema.
type Proxy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "Username" field.
	Username string `json:"Username,omitempty"`
	// Password holds the value of the "Password" field.
	Password string `json:"Password,omitempty"`
	// IP holds the value of the "IP" field.
	IP string `json:"IP,omitempty"`
	// Port holds the value of the "Port" field.
	Port string `json:"Port,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProxyQuery when eager-loading is set.
	Edges              ProxyEdges `json:"edges"`
	proxy_list_proxies *int
}

// ProxyEdges holds the relations/edges for other nodes in the graph.
type ProxyEdges struct {
	// ProxyList holds the value of the ProxyList edge.
	ProxyList *ProxyList `json:"ProxyList,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProxyListOrErr returns the ProxyList value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProxyEdges) ProxyListOrErr() (*ProxyList, error) {
	if e.loadedTypes[0] {
		if e.ProxyList == nil {
			// The edge ProxyList was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: proxylist.Label}
		}
		return e.ProxyList, nil
	}
	return nil, &NotLoadedError{edge: "ProxyList"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Proxy) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case proxy.FieldID:
			values[i] = new(sql.NullInt64)
		case proxy.FieldUsername, proxy.FieldPassword, proxy.FieldIP, proxy.FieldPort:
			values[i] = new(sql.NullString)
		case proxy.ForeignKeys[0]: // proxy_list_proxies
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Proxy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Proxy fields.
func (pr *Proxy) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case proxy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case proxy.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Username", values[i])
			} else if value.Valid {
				pr.Username = value.String
			}
		case proxy.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Password", values[i])
			} else if value.Valid {
				pr.Password = value.String
			}
		case proxy.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IP", values[i])
			} else if value.Valid {
				pr.IP = value.String
			}
		case proxy.FieldPort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Port", values[i])
			} else if value.Valid {
				pr.Port = value.String
			}
		case proxy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field proxy_list_proxies", value)
			} else if value.Valid {
				pr.proxy_list_proxies = new(int)
				*pr.proxy_list_proxies = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProxyList queries the "ProxyList" edge of the Proxy entity.
func (pr *Proxy) QueryProxyList() *ProxyListQuery {
	return (&ProxyClient{config: pr.config}).QueryProxyList(pr)
}

// Update returns a builder for updating this Proxy.
// Note that you need to call Proxy.Unwrap() before calling this method if this Proxy
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Proxy) Update() *ProxyUpdateOne {
	return (&ProxyClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Proxy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Proxy) Unwrap() *Proxy {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Proxy is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Proxy) String() string {
	var builder strings.Builder
	builder.WriteString("Proxy(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", Username=")
	builder.WriteString(pr.Username)
	builder.WriteString(", Password=")
	builder.WriteString(pr.Password)
	builder.WriteString(", IP=")
	builder.WriteString(pr.IP)
	builder.WriteString(", Port=")
	builder.WriteString(pr.Port)
	builder.WriteByte(')')
	return builder.String()
}

// Proxies is a parsable slice of Proxy.
type Proxies []*Proxy

func (pr Proxies) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
