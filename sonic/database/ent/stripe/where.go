// Code generated by entc, DO NOT EDIT.

package stripe

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CustomerID applies equality check predicate on the "CustomerID" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// SubscriptionID applies equality check predicate on the "SubscriptionID" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscriptionID), v))
	})
}

// RenewalDate applies equality check predicate on the "RenewalDate" field. It's identical to RenewalDateEQ.
func RenewalDate(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRenewalDate), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CustomerIDEQ applies the EQ predicate on the "CustomerID" field.
func CustomerIDEQ(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDNEQ applies the NEQ predicate on the "CustomerID" field.
func CustomerIDNEQ(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDIn applies the In predicate on the "CustomerID" field.
func CustomerIDIn(vs ...string) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustomerID), v...))
	})
}

// CustomerIDNotIn applies the NotIn predicate on the "CustomerID" field.
func CustomerIDNotIn(vs ...string) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustomerID), v...))
	})
}

// CustomerIDGT applies the GT predicate on the "CustomerID" field.
func CustomerIDGT(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerID), v))
	})
}

// CustomerIDGTE applies the GTE predicate on the "CustomerID" field.
func CustomerIDGTE(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerID), v))
	})
}

// CustomerIDLT applies the LT predicate on the "CustomerID" field.
func CustomerIDLT(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerID), v))
	})
}

// CustomerIDLTE applies the LTE predicate on the "CustomerID" field.
func CustomerIDLTE(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerID), v))
	})
}

// CustomerIDContains applies the Contains predicate on the "CustomerID" field.
func CustomerIDContains(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerID), v))
	})
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "CustomerID" field.
func CustomerIDHasPrefix(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerID), v))
	})
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "CustomerID" field.
func CustomerIDHasSuffix(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerID), v))
	})
}

// CustomerIDEqualFold applies the EqualFold predicate on the "CustomerID" field.
func CustomerIDEqualFold(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerID), v))
	})
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "CustomerID" field.
func CustomerIDContainsFold(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerID), v))
	})
}

// SubscriptionIDEQ applies the EQ predicate on the "SubscriptionID" field.
func SubscriptionIDEQ(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDNEQ applies the NEQ predicate on the "SubscriptionID" field.
func SubscriptionIDNEQ(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDIn applies the In predicate on the "SubscriptionID" field.
func SubscriptionIDIn(vs ...string) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubscriptionID), v...))
	})
}

// SubscriptionIDNotIn applies the NotIn predicate on the "SubscriptionID" field.
func SubscriptionIDNotIn(vs ...string) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubscriptionID), v...))
	})
}

// SubscriptionIDGT applies the GT predicate on the "SubscriptionID" field.
func SubscriptionIDGT(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDGTE applies the GTE predicate on the "SubscriptionID" field.
func SubscriptionIDGTE(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDLT applies the LT predicate on the "SubscriptionID" field.
func SubscriptionIDLT(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDLTE applies the LTE predicate on the "SubscriptionID" field.
func SubscriptionIDLTE(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDContains applies the Contains predicate on the "SubscriptionID" field.
func SubscriptionIDContains(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDHasPrefix applies the HasPrefix predicate on the "SubscriptionID" field.
func SubscriptionIDHasPrefix(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDHasSuffix applies the HasSuffix predicate on the "SubscriptionID" field.
func SubscriptionIDHasSuffix(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDIsNil applies the IsNil predicate on the "SubscriptionID" field.
func SubscriptionIDIsNil() predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubscriptionID)))
	})
}

// SubscriptionIDNotNil applies the NotNil predicate on the "SubscriptionID" field.
func SubscriptionIDNotNil() predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubscriptionID)))
	})
}

// SubscriptionIDEqualFold applies the EqualFold predicate on the "SubscriptionID" field.
func SubscriptionIDEqualFold(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubscriptionID), v))
	})
}

// SubscriptionIDContainsFold applies the ContainsFold predicate on the "SubscriptionID" field.
func SubscriptionIDContainsFold(v string) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubscriptionID), v))
	})
}

// RenewalDateEQ applies the EQ predicate on the "RenewalDate" field.
func RenewalDateEQ(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRenewalDate), v))
	})
}

// RenewalDateNEQ applies the NEQ predicate on the "RenewalDate" field.
func RenewalDateNEQ(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRenewalDate), v))
	})
}

// RenewalDateIn applies the In predicate on the "RenewalDate" field.
func RenewalDateIn(vs ...time.Time) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRenewalDate), v...))
	})
}

// RenewalDateNotIn applies the NotIn predicate on the "RenewalDate" field.
func RenewalDateNotIn(vs ...time.Time) predicate.Stripe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stripe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRenewalDate), v...))
	})
}

// RenewalDateGT applies the GT predicate on the "RenewalDate" field.
func RenewalDateGT(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRenewalDate), v))
	})
}

// RenewalDateGTE applies the GTE predicate on the "RenewalDate" field.
func RenewalDateGTE(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRenewalDate), v))
	})
}

// RenewalDateLT applies the LT predicate on the "RenewalDate" field.
func RenewalDateLT(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRenewalDate), v))
	})
}

// RenewalDateLTE applies the LTE predicate on the "RenewalDate" field.
func RenewalDateLTE(v time.Time) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRenewalDate), v))
	})
}

// RenewalDateIsNil applies the IsNil predicate on the "RenewalDate" field.
func RenewalDateIsNil() predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRenewalDate)))
	})
}

// RenewalDateNotNil applies the NotNil predicate on the "RenewalDate" field.
func RenewalDateNotNil() predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRenewalDate)))
	})
}

// HasLicense applies the HasEdge predicate on the "License" edge.
func HasLicense() predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LicenseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LicenseTable, LicenseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseWith applies the HasEdge predicate on the "License" edge with a given conditions (other predicates).
func HasLicenseWith(preds ...predicate.License) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LicenseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LicenseTable, LicenseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stripe) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stripe) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stripe) predicate.Stripe {
	return predicate.Stripe(func(s *sql.Selector) {
		p(s.Not())
	})
}
