// Code generated by entc, DO NOT EDIT.

package stripe

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the stripe type in the database.
	Label = "stripe"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCustomerID holds the string denoting the customerid field in the database.
	FieldCustomerID = "customer_id"
	// FieldSubscriptionID holds the string denoting the subscriptionid field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldRenewalDate holds the string denoting the renewaldate field in the database.
	FieldRenewalDate = "renewal_date"
	// EdgeLicense holds the string denoting the license edge name in mutations.
	EdgeLicense = "License"
	// Table holds the table name of the stripe in the database.
	Table = "stripes"
	// LicenseTable is the table that holds the License relation/edge.
	LicenseTable = "stripes"
	// LicenseInverseTable is the table name for the License entity.
	// It exists in this package in order to avoid circular dependency with the "license" package.
	LicenseInverseTable = "licenses"
	// LicenseColumn is the table column denoting the License relation/edge.
	LicenseColumn = "license_stripe"
)

// Columns holds all SQL columns for stripe fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCustomerID,
	FieldSubscriptionID,
	FieldRenewalDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "stripes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"license_stripe",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
