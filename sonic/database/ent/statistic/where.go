// Code generated by entc, DO NOT EDIT.

package statistic

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// PotentialProfit applies equality check predicate on the "PotentialProfit" field. It's identical to PotentialProfitEQ.
func PotentialProfit(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPotentialProfit), v))
	})
}

// Value applies equality check predicate on the "Value" field. It's identical to ValueEQ.
func Value(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// Spent applies equality check predicate on the "Spent" field. It's identical to SpentEQ.
func Spent(v float64) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpent), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// TypeEQ applies the EQ predicate on the "Type" field.
func TypeEQ(v Type) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "Type" field.
func TypeNEQ(v Type) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "Type" field.
func TypeIn(vs ...Type) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "Type" field.
func TypeNotIn(vs ...Type) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// PotentialProfitEQ applies the EQ predicate on the "PotentialProfit" field.
func PotentialProfitEQ(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPotentialProfit), v))
	})
}

// PotentialProfitNEQ applies the NEQ predicate on the "PotentialProfit" field.
func PotentialProfitNEQ(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPotentialProfit), v))
	})
}

// PotentialProfitIn applies the In predicate on the "PotentialProfit" field.
func PotentialProfitIn(vs ...int) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPotentialProfit), v...))
	})
}

// PotentialProfitNotIn applies the NotIn predicate on the "PotentialProfit" field.
func PotentialProfitNotIn(vs ...int) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPotentialProfit), v...))
	})
}

// PotentialProfitGT applies the GT predicate on the "PotentialProfit" field.
func PotentialProfitGT(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPotentialProfit), v))
	})
}

// PotentialProfitGTE applies the GTE predicate on the "PotentialProfit" field.
func PotentialProfitGTE(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPotentialProfit), v))
	})
}

// PotentialProfitLT applies the LT predicate on the "PotentialProfit" field.
func PotentialProfitLT(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPotentialProfit), v))
	})
}

// PotentialProfitLTE applies the LTE predicate on the "PotentialProfit" field.
func PotentialProfitLTE(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPotentialProfit), v))
	})
}

// PotentialProfitIsNil applies the IsNil predicate on the "PotentialProfit" field.
func PotentialProfitIsNil() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPotentialProfit)))
	})
}

// PotentialProfitNotNil applies the NotNil predicate on the "PotentialProfit" field.
func PotentialProfitNotNil() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPotentialProfit)))
	})
}

// ValueEQ applies the EQ predicate on the "Value" field.
func ValueEQ(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValue), v))
	})
}

// ValueNEQ applies the NEQ predicate on the "Value" field.
func ValueNEQ(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValue), v))
	})
}

// ValueIn applies the In predicate on the "Value" field.
func ValueIn(vs ...int) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldValue), v...))
	})
}

// ValueNotIn applies the NotIn predicate on the "Value" field.
func ValueNotIn(vs ...int) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldValue), v...))
	})
}

// ValueGT applies the GT predicate on the "Value" field.
func ValueGT(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldValue), v))
	})
}

// ValueGTE applies the GTE predicate on the "Value" field.
func ValueGTE(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldValue), v))
	})
}

// ValueLT applies the LT predicate on the "Value" field.
func ValueLT(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldValue), v))
	})
}

// ValueLTE applies the LTE predicate on the "Value" field.
func ValueLTE(v int) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldValue), v))
	})
}

// ValueIsNil applies the IsNil predicate on the "Value" field.
func ValueIsNil() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldValue)))
	})
}

// ValueNotNil applies the NotNil predicate on the "Value" field.
func ValueNotNil() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldValue)))
	})
}

// SpentEQ applies the EQ predicate on the "Spent" field.
func SpentEQ(v float64) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpent), v))
	})
}

// SpentNEQ applies the NEQ predicate on the "Spent" field.
func SpentNEQ(v float64) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpent), v))
	})
}

// SpentIn applies the In predicate on the "Spent" field.
func SpentIn(vs ...float64) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpent), v...))
	})
}

// SpentNotIn applies the NotIn predicate on the "Spent" field.
func SpentNotIn(vs ...float64) predicate.Statistic {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Statistic(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpent), v...))
	})
}

// SpentGT applies the GT predicate on the "Spent" field.
func SpentGT(v float64) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpent), v))
	})
}

// SpentGTE applies the GTE predicate on the "Spent" field.
func SpentGTE(v float64) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpent), v))
	})
}

// SpentLT applies the LT predicate on the "Spent" field.
func SpentLT(v float64) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpent), v))
	})
}

// SpentLTE applies the LTE predicate on the "Spent" field.
func SpentLTE(v float64) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpent), v))
	})
}

// SpentIsNil applies the IsNil predicate on the "Spent" field.
func SpentIsNil() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSpent)))
	})
}

// SpentNotNil applies the NotNil predicate on the "Spent" field.
func SpentNotNil() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSpent)))
	})
}

// HasUser applies the HasEdge predicate on the "User" edge.
func HasUser() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "User" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "Product" edge.
func HasProduct() predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProductTable, ProductPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "Product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProductTable, ProductPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Statistic) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Statistic) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Statistic) predicate.Statistic {
	return predicate.Statistic(func(s *sql.Selector) {
		p(s.Not())
	})
}
