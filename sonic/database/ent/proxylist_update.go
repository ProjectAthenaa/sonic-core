// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxy"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxylist"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/google/uuid"
)

// ProxyListUpdate is the builder for updating ProxyList entities.
type ProxyListUpdate struct {
	config
	hooks    []Hook
	mutation *ProxyListMutation
}

// Where adds a new predicate for the ProxyListUpdate builder.
func (plu *ProxyListUpdate) Where(ps ...predicate.ProxyList) *ProxyListUpdate {
	plu.mutation.predicates = append(plu.mutation.predicates, ps...)
	return plu
}

// SetCreatedAt sets the "created_at" field.
func (plu *ProxyListUpdate) SetCreatedAt(t time.Time) *ProxyListUpdate {
	plu.mutation.SetCreatedAt(t)
	return plu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (plu *ProxyListUpdate) SetNillableCreatedAt(t *time.Time) *ProxyListUpdate {
	if t != nil {
		plu.SetCreatedAt(*t)
	}
	return plu
}

// SetUpdatedAt sets the "updated_at" field.
func (plu *ProxyListUpdate) SetUpdatedAt(t time.Time) *ProxyListUpdate {
	plu.mutation.SetUpdatedAt(t)
	return plu
}

// SetName sets the "Name" field.
func (plu *ProxyListUpdate) SetName(s string) *ProxyListUpdate {
	plu.mutation.SetName(s)
	return plu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (plu *ProxyListUpdate) SetNillableName(s *string) *ProxyListUpdate {
	if s != nil {
		plu.SetName(*s)
	}
	return plu
}

// SetType sets the "Type" field.
func (plu *ProxyListUpdate) SetType(pr proxylist.Type) *ProxyListUpdate {
	plu.mutation.SetType(pr)
	return plu
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (plu *ProxyListUpdate) AddAppIDs(ids ...uuid.UUID) *ProxyListUpdate {
	plu.mutation.AddAppIDs(ids...)
	return plu
}

// AddApp adds the "App" edges to the App entity.
func (plu *ProxyListUpdate) AddApp(a ...*App) *ProxyListUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return plu.AddAppIDs(ids...)
}

// AddProxyIDs adds the "Proxies" edge to the Proxy entity by IDs.
func (plu *ProxyListUpdate) AddProxyIDs(ids ...uuid.UUID) *ProxyListUpdate {
	plu.mutation.AddProxyIDs(ids...)
	return plu
}

// AddProxies adds the "Proxies" edges to the Proxy entity.
func (plu *ProxyListUpdate) AddProxies(p ...*Proxy) *ProxyListUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return plu.AddProxyIDs(ids...)
}

// AddTaskIDs adds the "Task" edge to the Task entity by IDs.
func (plu *ProxyListUpdate) AddTaskIDs(ids ...uuid.UUID) *ProxyListUpdate {
	plu.mutation.AddTaskIDs(ids...)
	return plu
}

// AddTask adds the "Task" edges to the Task entity.
func (plu *ProxyListUpdate) AddTask(t ...*Task) *ProxyListUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return plu.AddTaskIDs(ids...)
}

// Mutation returns the ProxyListMutation object of the builder.
func (plu *ProxyListUpdate) Mutation() *ProxyListMutation {
	return plu.mutation
}

// ClearApp clears all "App" edges to the App entity.
func (plu *ProxyListUpdate) ClearApp() *ProxyListUpdate {
	plu.mutation.ClearApp()
	return plu
}

// RemoveAppIDs removes the "App" edge to App entities by IDs.
func (plu *ProxyListUpdate) RemoveAppIDs(ids ...uuid.UUID) *ProxyListUpdate {
	plu.mutation.RemoveAppIDs(ids...)
	return plu
}

// RemoveApp removes "App" edges to App entities.
func (plu *ProxyListUpdate) RemoveApp(a ...*App) *ProxyListUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return plu.RemoveAppIDs(ids...)
}

// ClearProxies clears all "Proxies" edges to the Proxy entity.
func (plu *ProxyListUpdate) ClearProxies() *ProxyListUpdate {
	plu.mutation.ClearProxies()
	return plu
}

// RemoveProxyIDs removes the "Proxies" edge to Proxy entities by IDs.
func (plu *ProxyListUpdate) RemoveProxyIDs(ids ...uuid.UUID) *ProxyListUpdate {
	plu.mutation.RemoveProxyIDs(ids...)
	return plu
}

// RemoveProxies removes "Proxies" edges to Proxy entities.
func (plu *ProxyListUpdate) RemoveProxies(p ...*Proxy) *ProxyListUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return plu.RemoveProxyIDs(ids...)
}

// ClearTask clears all "Task" edges to the Task entity.
func (plu *ProxyListUpdate) ClearTask() *ProxyListUpdate {
	plu.mutation.ClearTask()
	return plu
}

// RemoveTaskIDs removes the "Task" edge to Task entities by IDs.
func (plu *ProxyListUpdate) RemoveTaskIDs(ids ...uuid.UUID) *ProxyListUpdate {
	plu.mutation.RemoveTaskIDs(ids...)
	return plu
}

// RemoveTask removes "Task" edges to Task entities.
func (plu *ProxyListUpdate) RemoveTask(t ...*Task) *ProxyListUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return plu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (plu *ProxyListUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	plu.defaults()
	if len(plu.hooks) == 0 {
		if err = plu.check(); err != nil {
			return 0, err
		}
		affected, err = plu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProxyListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plu.check(); err != nil {
				return 0, err
			}
			plu.mutation = mutation
			affected, err = plu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(plu.hooks) - 1; i >= 0; i-- {
			mut = plu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, plu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (plu *ProxyListUpdate) SaveX(ctx context.Context) int {
	affected, err := plu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (plu *ProxyListUpdate) Exec(ctx context.Context) error {
	_, err := plu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plu *ProxyListUpdate) ExecX(ctx context.Context) {
	if err := plu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plu *ProxyListUpdate) defaults() {
	if _, ok := plu.mutation.UpdatedAt(); !ok {
		v := proxylist.UpdateDefaultUpdatedAt()
		plu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plu *ProxyListUpdate) check() error {
	if v, ok := plu.mutation.GetType(); ok {
		if err := proxylist.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (plu *ProxyListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   proxylist.Table,
			Columns: proxylist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: proxylist.FieldID,
			},
		},
	}
	if ps := plu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := plu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxylist.FieldCreatedAt,
		})
	}
	if value, ok := plu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxylist.FieldUpdatedAt,
		})
	}
	if value, ok := plu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxylist.FieldName,
		})
	}
	if value, ok := plu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: proxylist.FieldType,
		})
	}
	if plu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.AppTable,
			Columns: proxylist.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.RemovedAppIDs(); len(nodes) > 0 && !plu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.AppTable,
			Columns: proxylist.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.AppTable,
			Columns: proxylist.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if plu.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proxylist.ProxiesTable,
			Columns: []string{proxylist.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.RemovedProxiesIDs(); len(nodes) > 0 && !plu.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proxylist.ProxiesTable,
			Columns: []string{proxylist.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.ProxiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proxylist.ProxiesTable,
			Columns: []string{proxylist.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if plu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.TaskTable,
			Columns: proxylist.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !plu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.TaskTable,
			Columns: proxylist.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.TaskTable,
			Columns: proxylist.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, plu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxylist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProxyListUpdateOne is the builder for updating a single ProxyList entity.
type ProxyListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProxyListMutation
}

// SetCreatedAt sets the "created_at" field.
func (pluo *ProxyListUpdateOne) SetCreatedAt(t time.Time) *ProxyListUpdateOne {
	pluo.mutation.SetCreatedAt(t)
	return pluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pluo *ProxyListUpdateOne) SetNillableCreatedAt(t *time.Time) *ProxyListUpdateOne {
	if t != nil {
		pluo.SetCreatedAt(*t)
	}
	return pluo
}

// SetUpdatedAt sets the "updated_at" field.
func (pluo *ProxyListUpdateOne) SetUpdatedAt(t time.Time) *ProxyListUpdateOne {
	pluo.mutation.SetUpdatedAt(t)
	return pluo
}

// SetName sets the "Name" field.
func (pluo *ProxyListUpdateOne) SetName(s string) *ProxyListUpdateOne {
	pluo.mutation.SetName(s)
	return pluo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (pluo *ProxyListUpdateOne) SetNillableName(s *string) *ProxyListUpdateOne {
	if s != nil {
		pluo.SetName(*s)
	}
	return pluo
}

// SetType sets the "Type" field.
func (pluo *ProxyListUpdateOne) SetType(pr proxylist.Type) *ProxyListUpdateOne {
	pluo.mutation.SetType(pr)
	return pluo
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (pluo *ProxyListUpdateOne) AddAppIDs(ids ...uuid.UUID) *ProxyListUpdateOne {
	pluo.mutation.AddAppIDs(ids...)
	return pluo
}

// AddApp adds the "App" edges to the App entity.
func (pluo *ProxyListUpdateOne) AddApp(a ...*App) *ProxyListUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pluo.AddAppIDs(ids...)
}

// AddProxyIDs adds the "Proxies" edge to the Proxy entity by IDs.
func (pluo *ProxyListUpdateOne) AddProxyIDs(ids ...uuid.UUID) *ProxyListUpdateOne {
	pluo.mutation.AddProxyIDs(ids...)
	return pluo
}

// AddProxies adds the "Proxies" edges to the Proxy entity.
func (pluo *ProxyListUpdateOne) AddProxies(p ...*Proxy) *ProxyListUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pluo.AddProxyIDs(ids...)
}

// AddTaskIDs adds the "Task" edge to the Task entity by IDs.
func (pluo *ProxyListUpdateOne) AddTaskIDs(ids ...uuid.UUID) *ProxyListUpdateOne {
	pluo.mutation.AddTaskIDs(ids...)
	return pluo
}

// AddTask adds the "Task" edges to the Task entity.
func (pluo *ProxyListUpdateOne) AddTask(t ...*Task) *ProxyListUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pluo.AddTaskIDs(ids...)
}

// Mutation returns the ProxyListMutation object of the builder.
func (pluo *ProxyListUpdateOne) Mutation() *ProxyListMutation {
	return pluo.mutation
}

// ClearApp clears all "App" edges to the App entity.
func (pluo *ProxyListUpdateOne) ClearApp() *ProxyListUpdateOne {
	pluo.mutation.ClearApp()
	return pluo
}

// RemoveAppIDs removes the "App" edge to App entities by IDs.
func (pluo *ProxyListUpdateOne) RemoveAppIDs(ids ...uuid.UUID) *ProxyListUpdateOne {
	pluo.mutation.RemoveAppIDs(ids...)
	return pluo
}

// RemoveApp removes "App" edges to App entities.
func (pluo *ProxyListUpdateOne) RemoveApp(a ...*App) *ProxyListUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pluo.RemoveAppIDs(ids...)
}

// ClearProxies clears all "Proxies" edges to the Proxy entity.
func (pluo *ProxyListUpdateOne) ClearProxies() *ProxyListUpdateOne {
	pluo.mutation.ClearProxies()
	return pluo
}

// RemoveProxyIDs removes the "Proxies" edge to Proxy entities by IDs.
func (pluo *ProxyListUpdateOne) RemoveProxyIDs(ids ...uuid.UUID) *ProxyListUpdateOne {
	pluo.mutation.RemoveProxyIDs(ids...)
	return pluo
}

// RemoveProxies removes "Proxies" edges to Proxy entities.
func (pluo *ProxyListUpdateOne) RemoveProxies(p ...*Proxy) *ProxyListUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pluo.RemoveProxyIDs(ids...)
}

// ClearTask clears all "Task" edges to the Task entity.
func (pluo *ProxyListUpdateOne) ClearTask() *ProxyListUpdateOne {
	pluo.mutation.ClearTask()
	return pluo
}

// RemoveTaskIDs removes the "Task" edge to Task entities by IDs.
func (pluo *ProxyListUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *ProxyListUpdateOne {
	pluo.mutation.RemoveTaskIDs(ids...)
	return pluo
}

// RemoveTask removes "Task" edges to Task entities.
func (pluo *ProxyListUpdateOne) RemoveTask(t ...*Task) *ProxyListUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pluo.RemoveTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pluo *ProxyListUpdateOne) Select(field string, fields ...string) *ProxyListUpdateOne {
	pluo.fields = append([]string{field}, fields...)
	return pluo
}

// Save executes the query and returns the updated ProxyList entity.
func (pluo *ProxyListUpdateOne) Save(ctx context.Context) (*ProxyList, error) {
	var (
		err  error
		node *ProxyList
	)
	pluo.defaults()
	if len(pluo.hooks) == 0 {
		if err = pluo.check(); err != nil {
			return nil, err
		}
		node, err = pluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProxyListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pluo.check(); err != nil {
				return nil, err
			}
			pluo.mutation = mutation
			node, err = pluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pluo.hooks) - 1; i >= 0; i-- {
			mut = pluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pluo *ProxyListUpdateOne) SaveX(ctx context.Context) *ProxyList {
	node, err := pluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pluo *ProxyListUpdateOne) Exec(ctx context.Context) error {
	_, err := pluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pluo *ProxyListUpdateOne) ExecX(ctx context.Context) {
	if err := pluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pluo *ProxyListUpdateOne) defaults() {
	if _, ok := pluo.mutation.UpdatedAt(); !ok {
		v := proxylist.UpdateDefaultUpdatedAt()
		pluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pluo *ProxyListUpdateOne) check() error {
	if v, ok := pluo.mutation.GetType(); ok {
		if err := proxylist.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (pluo *ProxyListUpdateOne) sqlSave(ctx context.Context) (_node *ProxyList, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   proxylist.Table,
			Columns: proxylist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: proxylist.FieldID,
			},
		},
	}
	id, ok := pluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProxyList.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proxylist.FieldID)
		for _, f := range fields {
			if !proxylist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proxylist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pluo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxylist.FieldCreatedAt,
		})
	}
	if value, ok := pluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxylist.FieldUpdatedAt,
		})
	}
	if value, ok := pluo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxylist.FieldName,
		})
	}
	if value, ok := pluo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: proxylist.FieldType,
		})
	}
	if pluo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.AppTable,
			Columns: proxylist.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.RemovedAppIDs(); len(nodes) > 0 && !pluo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.AppTable,
			Columns: proxylist.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.AppTable,
			Columns: proxylist.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pluo.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proxylist.ProxiesTable,
			Columns: []string{proxylist.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.RemovedProxiesIDs(); len(nodes) > 0 && !pluo.mutation.ProxiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proxylist.ProxiesTable,
			Columns: []string{proxylist.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.ProxiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proxylist.ProxiesTable,
			Columns: []string{proxylist.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pluo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.TaskTable,
			Columns: proxylist.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !pluo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.TaskTable,
			Columns: proxylist.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.TaskTable,
			Columns: proxylist.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProxyList{config: pluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxylist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
