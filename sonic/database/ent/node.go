// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/accountgroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/address"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/billing"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/calendar"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/device"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/metadata"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/product"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profilegroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxy"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxylist"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/release"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/session"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/settings"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/shipping"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/statistic"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/stripe"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/taskgroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
	"github.com/hashicorp/go-multierror"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     uuid.UUID `json:"id,omitempty"`     // node id.
	Type   string    `json:"type,omitempty"`   // node type.
	Fields []*Field  `json:"fields,omitempty"` // node fields.
	Edges  []*Edge   `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string      `json:"type,omitempty"` // edge type.
	Name string      `json:"name,omitempty"` // edge name.
	IDs  []uuid.UUID `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (ag *AccountGroup) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ag.ID,
		Type:   "AccountGroup",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ag.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ag.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ag.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "Name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ag.Site); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "accountgroup.Site",
		Name:  "Site",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ag.Accounts); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "sonic.Map",
		Name:  "Accounts",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "App",
		Name: "App",
	}
	err = ag.QueryApp().
		Select(app.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (a *Address) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Address",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(a.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.AddressLine); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "AddressLine",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.AddressLine2); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "AddressLine2",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Country); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "Country",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.State); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "State",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.City); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "City",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.ZIP); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "ZIP",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.StateCode); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "StateCode",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Shipping",
		Name: "ShippingAddress",
	}
	err = a.QueryShippingAddress().
		Select(shipping.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Shipping",
		Name: "BillingAddress",
	}
	err = a.QueryBillingAddress().
		Select(shipping.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (a *App) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "App",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(a.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "User",
	}
	err = a.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Settings",
		Name: "Settings",
	}
	err = a.QuerySettings().
		Select(settings.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProxyList",
		Name: "ProxyLists",
	}
	err = a.QueryProxyLists().
		Select(proxylist.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "ProfileGroup",
		Name: "ProfileGroups",
	}
	err = a.QueryProfileGroups().
		Select(profilegroup.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "TaskGroup",
		Name: "TaskGroups",
	}
	err = a.QueryTaskGroups().
		Select(taskgroup.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "AccountGroup",
		Name: "AccountGroups",
	}
	err = a.QueryAccountGroups().
		Select(accountgroup.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (b *Billing) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     b.ID,
		Type:   "Billing",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(b.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.CardholderName); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "CardholderName",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.CardNumber); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "CardNumber",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.ExpiryMonth); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "ExpiryMonth",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.ExpiryYear); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "ExpiryYear",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.CVV); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "CVV",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Profile",
		Name: "Profile",
	}
	err = b.QueryProfile().
		Select(profile.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Calendar) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Calendar",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ReleaseDate); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "ReleaseDate",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ProductImage); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "ProductImage",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ProductName); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "ProductName",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.HypedRelease); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "HypedRelease",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UsersRunning); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "UsersRunning",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Product",
		Name: "QuickTask",
	}
	err = c.QueryQuickTask().
		Select(product.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (d *Device) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     d.ID,
		Type:   "Device",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(d.GpuVendor); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "gpuVendor",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.Plugins); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "[]string",
		Name:  "plugins",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.Adevice); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "sonic.Map",
		Name:  "adevice",
		Value: string(buf),
	}
	return node, nil
}

func (l *License) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     l.ID,
		Type:   "License",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(l.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Key); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "Key",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.HardwareID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "HardwareID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.MobileHardwareID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "MobileHardwareID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Type); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "license.Type",
		Name:  "Type",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "User",
	}
	err = l.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Stripe",
		Name: "Stripe",
	}
	err = l.QueryStripe().
		Select(stripe.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (m *Metadata) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     m.ID,
		Type:   "Metadata",
		Fields: make([]*Field, 12),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(m.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.FirstLogin); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "bool",
		Name:  "FirstLogin",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.FirstLoginMobile); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "FirstLoginMobile",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Theme); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "metadata.Theme",
		Name:  "Theme",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.DiscordID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "DiscordID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.DiscordAccessToken); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "DiscordAccessToken",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.DiscordRefreshToken); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "DiscordRefreshToken",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.DiscordUsername); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "DiscordUsername",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.DiscordAvatar); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "DiscordAvatar",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.DiscordDiscriminator); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "string",
		Name:  "DiscordDiscriminator",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.DiscordExpiryTime); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "time.Time",
		Name:  "DiscordExpiryTime",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user",
	}
	err = m.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pr *Product) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pr.ID,
		Type:   "Product",
		Fields: make([]*Field, 13),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(pr.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "Name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Image); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "Image",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.LookupType); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "product.LookupType",
		Name:  "LookupType",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.PositiveKeywords); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "[]string",
		Name:  "PositiveKeywords",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.NegativeKeywords); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "[]string",
		Name:  "NegativeKeywords",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Link); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "Link",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Quantity); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "int32",
		Name:  "Quantity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Sizes); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "[]string",
		Name:  "Sizes",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Colors); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "[]string",
		Name:  "Colors",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Site); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "product.Site",
		Name:  "Site",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Metadata); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "sonic.Map",
		Name:  "Metadata",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Task",
		Name: "Task",
	}
	err = pr.QueryTask().
		Select(task.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Statistic",
		Name: "Statistic",
	}
	err = pr.QueryStatistic().
		Select(statistic.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Calendar",
		Name: "Calendar",
	}
	err = pr.QueryCalendar().
		Select(calendar.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pr *Profile) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pr.ID,
		Type:   "Profile",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(pr.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "Name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Email); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "Email",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ProfileGroup",
		Name: "ProfileGroup",
	}
	err = pr.QueryProfileGroup().
		Select(profilegroup.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Shipping",
		Name: "Shipping",
	}
	err = pr.QueryShipping().
		Select(shipping.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Billing",
		Name: "Billing",
	}
	err = pr.QueryBilling().
		Select(billing.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pg *ProfileGroup) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pg.ID,
		Type:   "ProfileGroup",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(pg.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pg.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pg.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "Name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Profile",
		Name: "Profiles",
	}
	err = pg.QueryProfiles().
		Select(profile.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "App",
		Name: "App",
	}
	err = pg.QueryApp().
		Select(app.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Task",
		Name: "Tasks",
	}
	err = pg.QueryTasks().
		Select(task.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pr *Proxy) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pr.ID,
		Type:   "Proxy",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(pr.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Username); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "Username",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Password); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "Password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.IP); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "IP",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Port); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "Port",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ProxyList",
		Name: "ProxyList",
	}
	err = pr.QueryProxyList().
		Select(proxylist.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pl *ProxyList) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pl.ID,
		Type:   "ProxyList",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(pl.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "Name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.Type); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "proxylist.Type",
		Name:  "Type",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "App",
		Name: "App",
	}
	err = pl.QueryApp().
		Select(app.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Proxy",
		Name: "Proxies",
	}
	err = pl.QueryProxies().
		Select(proxy.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Task",
		Name: "Task",
	}
	err = pl.QueryTask().
		Select(task.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Release) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Release",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(r.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.ReleaseDate); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "ReleaseDate",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.StockLevel); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int32",
		Name:  "StockLevel",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Code); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "Code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Type); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "release.Type",
		Name:  "Type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.OneTimeFeeAmount); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int64",
		Name:  "OneTimeFeeAmount",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.SubscriptionFee); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int64",
		Name:  "SubscriptionFee",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.ProductPriceID); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "ProductPriceID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.SubscriptionPriceID); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "SubscriptionPriceID",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "Customers",
	}
	err = r.QueryCustomers().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Session) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Session",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.DeviceName); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "DeviceName",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.OS); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "OS",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.DeviceType); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "session.DeviceType",
		Name:  "DeviceType",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.IP); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "IP",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Expired); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "Expired",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user",
	}
	err = s.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Settings) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Settings",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.SuccessWebhook); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "SuccessWebhook",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.DeclineWebhook); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "DeclineWebhook",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CheckoutDelay); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int32",
		Name:  "CheckoutDelay",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.ATCDelay); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int32",
		Name:  "ATCDelay",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "App",
		Name: "App",
	}
	err = s.QueryApp().
		Select(app.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Shipping) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Shipping",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.FirstName); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "FirstName",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.LastName); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "LastName",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.PhoneNumber); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "PhoneNumber",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.BillingIsShipping); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "BillingIsShipping",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Profile",
		Name: "Profile",
	}
	err = s.QueryProfile().
		Select(profile.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Address",
		Name: "ShippingAddress",
	}
	err = s.QueryShippingAddress().
		Select(address.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Address",
		Name: "BillingAddress",
	}
	err = s.QueryBillingAddress().
		Select(address.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Statistic) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Statistic",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Type); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "statistic.Type",
		Name:  "Type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.PotentialProfit); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "PotentialProfit",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Axis); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "map[schema.Axis]string",
		Name:  "Axis",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Value); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "Value",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Spent); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "float64",
		Name:  "Spent",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "User",
	}
	err = s.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Product",
		Name: "Product",
	}
	err = s.QueryProduct().
		Select(product.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Stripe) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Stripe",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CustomerID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "CustomerID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.SubscriptionID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "SubscriptionID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.RenewalDate); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "RenewalDate",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "License",
		Name: "License",
	}
	err = s.QueryLicense().
		Select(license.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Task) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Task",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(t.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.StartTime); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "StartTime",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Product",
		Name: "Product",
	}
	err = t.QueryProduct().
		Select(product.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProxyList",
		Name: "ProxyList",
	}
	err = t.QueryProxyList().
		Select(proxylist.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProfileGroup",
		Name: "Profiles",
	}
	err = t.QueryProfiles().
		Select(profilegroup.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "TaskGroup",
		Name: "TaskGroup",
	}
	err = t.QueryTaskGroup().
		Select(taskgroup.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (tg *TaskGroup) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     tg.ID,
		Type:   "TaskGroup",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(tg.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tg.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tg.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "Name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "App",
		Name: "App",
	}
	err = tg.QueryApp().
		Select(app.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Task",
		Name: "Tasks",
	}
	err = tg.QueryTasks().
		Select(task.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.ID,
		Type:   "User",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(u.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Disabled); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "bool",
		Name:  "Disabled",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "License",
		Name: "License",
	}
	err = u.QueryLicense().
		Select(license.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Statistic",
		Name: "Statistics",
	}
	err = u.QueryStatistics().
		Select(statistic.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "App",
		Name: "App",
	}
	err = u.QueryApp().
		Select(app.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Metadata",
		Name: "Metadata",
	}
	err = u.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Session",
		Name: "Sessions",
	}
	err = u.QuerySessions().
		Select(session.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Release",
		Name: "Release",
	}
	err = u.QueryRelease().
		Select(release.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id uuid.UUID) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, uuid.UUID) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, uuid.UUID) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, uuid.UUID) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id uuid.UUID) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id uuid.UUID, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id uuid.UUID) (Noder, error) {
	switch table {
	case accountgroup.Table:
		n, err := c.AccountGroup.Query().
			Where(accountgroup.ID(id)).
			CollectFields(ctx, "AccountGroup").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case address.Table:
		n, err := c.Address.Query().
			Where(address.ID(id)).
			CollectFields(ctx, "Address").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case app.Table:
		n, err := c.App.Query().
			Where(app.ID(id)).
			CollectFields(ctx, "App").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case billing.Table:
		n, err := c.Billing.Query().
			Where(billing.ID(id)).
			CollectFields(ctx, "Billing").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case calendar.Table:
		n, err := c.Calendar.Query().
			Where(calendar.ID(id)).
			CollectFields(ctx, "Calendar").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case device.Table:
		n, err := c.Device.Query().
			Where(device.ID(id)).
			CollectFields(ctx, "Device").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case license.Table:
		n, err := c.License.Query().
			Where(license.ID(id)).
			CollectFields(ctx, "License").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case metadata.Table:
		n, err := c.Metadata.Query().
			Where(metadata.ID(id)).
			CollectFields(ctx, "Metadata").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case product.Table:
		n, err := c.Product.Query().
			Where(product.ID(id)).
			CollectFields(ctx, "Product").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case profile.Table:
		n, err := c.Profile.Query().
			Where(profile.ID(id)).
			CollectFields(ctx, "Profile").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case profilegroup.Table:
		n, err := c.ProfileGroup.Query().
			Where(profilegroup.ID(id)).
			CollectFields(ctx, "ProfileGroup").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case proxy.Table:
		n, err := c.Proxy.Query().
			Where(proxy.ID(id)).
			CollectFields(ctx, "Proxy").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case proxylist.Table:
		n, err := c.ProxyList.Query().
			Where(proxylist.ID(id)).
			CollectFields(ctx, "ProxyList").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case release.Table:
		n, err := c.Release.Query().
			Where(release.ID(id)).
			CollectFields(ctx, "Release").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case session.Table:
		n, err := c.Session.Query().
			Where(session.ID(id)).
			CollectFields(ctx, "Session").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case settings.Table:
		n, err := c.Settings.Query().
			Where(settings.ID(id)).
			CollectFields(ctx, "Settings").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case shipping.Table:
		n, err := c.Shipping.Query().
			Where(shipping.ID(id)).
			CollectFields(ctx, "Shipping").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case statistic.Table:
		n, err := c.Statistic.Query().
			Where(statistic.ID(id)).
			CollectFields(ctx, "Statistic").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case stripe.Table:
		n, err := c.Stripe.Query().
			Where(stripe.ID(id)).
			CollectFields(ctx, "Stripe").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case task.Table:
		n, err := c.Task.Query().
			Where(task.ID(id)).
			CollectFields(ctx, "Task").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case taskgroup.Table:
		n, err := c.TaskGroup.Query().
			Where(taskgroup.ID(id)).
			CollectFields(ctx, "TaskGroup").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		n, err := c.User.Query().
			Where(user.ID(id)).
			CollectFields(ctx, "User").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []uuid.UUID, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]uuid.UUID)
	id2idx := make(map[uuid.UUID][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []uuid.UUID) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[uuid.UUID][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case accountgroup.Table:
		nodes, err := c.AccountGroup.Query().
			Where(accountgroup.IDIn(ids...)).
			CollectFields(ctx, "AccountGroup").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case address.Table:
		nodes, err := c.Address.Query().
			Where(address.IDIn(ids...)).
			CollectFields(ctx, "Address").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case app.Table:
		nodes, err := c.App.Query().
			Where(app.IDIn(ids...)).
			CollectFields(ctx, "App").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case billing.Table:
		nodes, err := c.Billing.Query().
			Where(billing.IDIn(ids...)).
			CollectFields(ctx, "Billing").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case calendar.Table:
		nodes, err := c.Calendar.Query().
			Where(calendar.IDIn(ids...)).
			CollectFields(ctx, "Calendar").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case device.Table:
		nodes, err := c.Device.Query().
			Where(device.IDIn(ids...)).
			CollectFields(ctx, "Device").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case license.Table:
		nodes, err := c.License.Query().
			Where(license.IDIn(ids...)).
			CollectFields(ctx, "License").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case metadata.Table:
		nodes, err := c.Metadata.Query().
			Where(metadata.IDIn(ids...)).
			CollectFields(ctx, "Metadata").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case product.Table:
		nodes, err := c.Product.Query().
			Where(product.IDIn(ids...)).
			CollectFields(ctx, "Product").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case profile.Table:
		nodes, err := c.Profile.Query().
			Where(profile.IDIn(ids...)).
			CollectFields(ctx, "Profile").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case profilegroup.Table:
		nodes, err := c.ProfileGroup.Query().
			Where(profilegroup.IDIn(ids...)).
			CollectFields(ctx, "ProfileGroup").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case proxy.Table:
		nodes, err := c.Proxy.Query().
			Where(proxy.IDIn(ids...)).
			CollectFields(ctx, "Proxy").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case proxylist.Table:
		nodes, err := c.ProxyList.Query().
			Where(proxylist.IDIn(ids...)).
			CollectFields(ctx, "ProxyList").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case release.Table:
		nodes, err := c.Release.Query().
			Where(release.IDIn(ids...)).
			CollectFields(ctx, "Release").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case session.Table:
		nodes, err := c.Session.Query().
			Where(session.IDIn(ids...)).
			CollectFields(ctx, "Session").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case settings.Table:
		nodes, err := c.Settings.Query().
			Where(settings.IDIn(ids...)).
			CollectFields(ctx, "Settings").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case shipping.Table:
		nodes, err := c.Shipping.Query().
			Where(shipping.IDIn(ids...)).
			CollectFields(ctx, "Shipping").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case statistic.Table:
		nodes, err := c.Statistic.Query().
			Where(statistic.IDIn(ids...)).
			CollectFields(ctx, "Statistic").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case stripe.Table:
		nodes, err := c.Stripe.Query().
			Where(stripe.IDIn(ids...)).
			CollectFields(ctx, "Stripe").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case task.Table:
		nodes, err := c.Task.Query().
			Where(task.IDIn(ids...)).
			CollectFields(ctx, "Task").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case taskgroup.Table:
		nodes, err := c.TaskGroup.Query().
			Where(taskgroup.IDIn(ids...)).
			CollectFields(ctx, "TaskGroup").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		nodes, err := c.User.Query().
			Where(user.IDIn(ids...)).
			CollectFields(ctx, "User").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
