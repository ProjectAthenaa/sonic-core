// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profilegroup"
	"github.com/google/uuid"
)

// ProfileGroup is the model entity for the ProfileGroup schema.
type ProfileGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileGroupQuery when eager-loading is set.
	Edges ProfileGroupEdges `json:"edges"`
}

// ProfileGroupEdges holds the relations/edges for other nodes in the graph.
type ProfileGroupEdges struct {
	// Profiles holds the value of the Profiles edge.
	Profiles []*Profile `json:"Profiles,omitempty"`
	// App holds the value of the App edge.
	App []*App `json:"App,omitempty"`
	// Tasks holds the value of the Tasks edge.
	Tasks []*Task `json:"Tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProfilesOrErr returns the Profiles value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileGroupEdges) ProfilesOrErr() ([]*Profile, error) {
	if e.loadedTypes[0] {
		return e.Profiles, nil
	}
	return nil, &NotLoadedError{edge: "Profiles"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileGroupEdges) AppOrErr() ([]*App, error) {
	if e.loadedTypes[1] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "App"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileGroupEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "Tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProfileGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case profilegroup.FieldName:
			values[i] = new(sql.NullString)
		case profilegroup.FieldCreatedAt, profilegroup.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case profilegroup.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProfileGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProfileGroup fields.
func (pg *ProfileGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profilegroup.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pg.ID = *value
			}
		case profilegroup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pg.CreatedAt = value.Time
			}
		case profilegroup.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pg.UpdatedAt = value.Time
			}
		case profilegroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				pg.Name = value.String
			}
		}
	}
	return nil
}

// QueryProfiles queries the "Profiles" edge of the ProfileGroup entity.
func (pg *ProfileGroup) QueryProfiles() *ProfileQuery {
	return (&ProfileGroupClient{config: pg.config}).QueryProfiles(pg)
}

// QueryApp queries the "App" edge of the ProfileGroup entity.
func (pg *ProfileGroup) QueryApp() *AppQuery {
	return (&ProfileGroupClient{config: pg.config}).QueryApp(pg)
}

// QueryTasks queries the "Tasks" edge of the ProfileGroup entity.
func (pg *ProfileGroup) QueryTasks() *TaskQuery {
	return (&ProfileGroupClient{config: pg.config}).QueryTasks(pg)
}

// Update returns a builder for updating this ProfileGroup.
// Note that you need to call ProfileGroup.Unwrap() before calling this method if this ProfileGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (pg *ProfileGroup) Update() *ProfileGroupUpdateOne {
	return (&ProfileGroupClient{config: pg.config}).UpdateOne(pg)
}

// Unwrap unwraps the ProfileGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pg *ProfileGroup) Unwrap() *ProfileGroup {
	tx, ok := pg.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProfileGroup is not a transactional entity")
	}
	pg.config.driver = tx.drv
	return pg
}

// String implements the fmt.Stringer.
func (pg *ProfileGroup) String() string {
	var builder strings.Builder
	builder.WriteString("ProfileGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", pg.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pg.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", Name=")
	builder.WriteString(pg.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ProfileGroups is a parsable slice of ProfileGroup.
type ProfileGroups []*ProfileGroup

func (pg ProfileGroups) config(cfg config) {
	for _i := range pg {
		pg[_i].config = cfg
	}
}
