// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profilegroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/google/uuid"
)

// ProfileGroupCreate is the builder for creating a ProfileGroup entity.
type ProfileGroupCreate struct {
	config
	mutation *ProfileGroupMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pgc *ProfileGroupCreate) SetCreatedAt(t time.Time) *ProfileGroupCreate {
	pgc.mutation.SetCreatedAt(t)
	return pgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgc *ProfileGroupCreate) SetNillableCreatedAt(t *time.Time) *ProfileGroupCreate {
	if t != nil {
		pgc.SetCreatedAt(*t)
	}
	return pgc
}

// SetUpdatedAt sets the "updated_at" field.
func (pgc *ProfileGroupCreate) SetUpdatedAt(t time.Time) *ProfileGroupCreate {
	pgc.mutation.SetUpdatedAt(t)
	return pgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pgc *ProfileGroupCreate) SetNillableUpdatedAt(t *time.Time) *ProfileGroupCreate {
	if t != nil {
		pgc.SetUpdatedAt(*t)
	}
	return pgc
}

// SetName sets the "Name" field.
func (pgc *ProfileGroupCreate) SetName(s string) *ProfileGroupCreate {
	pgc.mutation.SetName(s)
	return pgc
}

// SetID sets the "id" field.
func (pgc *ProfileGroupCreate) SetID(u uuid.UUID) *ProfileGroupCreate {
	pgc.mutation.SetID(u)
	return pgc
}

// AddProfileIDs adds the "Profiles" edge to the Profile entity by IDs.
func (pgc *ProfileGroupCreate) AddProfileIDs(ids ...uuid.UUID) *ProfileGroupCreate {
	pgc.mutation.AddProfileIDs(ids...)
	return pgc
}

// AddProfiles adds the "Profiles" edges to the Profile entity.
func (pgc *ProfileGroupCreate) AddProfiles(p ...*Profile) *ProfileGroupCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pgc.AddProfileIDs(ids...)
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (pgc *ProfileGroupCreate) AddAppIDs(ids ...uuid.UUID) *ProfileGroupCreate {
	pgc.mutation.AddAppIDs(ids...)
	return pgc
}

// AddApp adds the "App" edges to the App entity.
func (pgc *ProfileGroupCreate) AddApp(a ...*App) *ProfileGroupCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pgc.AddAppIDs(ids...)
}

// AddTaskIDs adds the "Task" edge to the Task entity by IDs.
func (pgc *ProfileGroupCreate) AddTaskIDs(ids ...uuid.UUID) *ProfileGroupCreate {
	pgc.mutation.AddTaskIDs(ids...)
	return pgc
}

// AddTask adds the "Task" edges to the Task entity.
func (pgc *ProfileGroupCreate) AddTask(t ...*Task) *ProfileGroupCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pgc.AddTaskIDs(ids...)
}

// Mutation returns the ProfileGroupMutation object of the builder.
func (pgc *ProfileGroupCreate) Mutation() *ProfileGroupMutation {
	return pgc.mutation
}

// Save creates the ProfileGroup in the database.
func (pgc *ProfileGroupCreate) Save(ctx context.Context) (*ProfileGroup, error) {
	var (
		err  error
		node *ProfileGroup
	)
	pgc.defaults()
	if len(pgc.hooks) == 0 {
		if err = pgc.check(); err != nil {
			return nil, err
		}
		node, err = pgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pgc.check(); err != nil {
				return nil, err
			}
			pgc.mutation = mutation
			node, err = pgc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pgc.hooks) - 1; i >= 0; i-- {
			mut = pgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pgc *ProfileGroupCreate) SaveX(ctx context.Context) *ProfileGroup {
	v, err := pgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pgc *ProfileGroupCreate) defaults() {
	if _, ok := pgc.mutation.CreatedAt(); !ok {
		v := profilegroup.DefaultCreatedAt()
		pgc.mutation.SetCreatedAt(v)
	}
	if _, ok := pgc.mutation.UpdatedAt(); !ok {
		v := profilegroup.DefaultUpdatedAt()
		pgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pgc.mutation.ID(); !ok {
		v := profilegroup.DefaultID()
		pgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pgc *ProfileGroupCreate) check() error {
	if _, ok := pgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := pgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := pgc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New("ent: missing required field \"Name\"")}
	}
	if len(pgc.mutation.AppIDs()) == 0 {
		return &ValidationError{Name: "App", err: errors.New("ent: missing required edge \"App\"")}
	}
	return nil
}

func (pgc *ProfileGroupCreate) sqlSave(ctx context.Context) (*ProfileGroup, error) {
	_node, _spec := pgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pgc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (pgc *ProfileGroupCreate) createSpec() (*ProfileGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &ProfileGroup{config: pgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: profilegroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profilegroup.FieldID,
			},
		}
	)
	if id, ok := pgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profilegroup.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profilegroup.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pgc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profilegroup.FieldName,
		})
		_node.Name = value
	}
	if nodes := pgc.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfilesTable,
			Columns: []string{profilegroup.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pgc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profilegroup.AppTable,
			Columns: profilegroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pgc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profilegroup.TaskTable,
			Columns: profilegroup.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfileGroupCreateBulk is the builder for creating many ProfileGroup entities in bulk.
type ProfileGroupCreateBulk struct {
	config
	builders []*ProfileGroupCreate
}

// Save creates the ProfileGroup entities in the database.
func (pgcb *ProfileGroupCreateBulk) Save(ctx context.Context) ([]*ProfileGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pgcb.builders))
	nodes := make([]*ProfileGroup, len(pgcb.builders))
	mutators := make([]Mutator, len(pgcb.builders))
	for i := range pgcb.builders {
		func(i int, root context.Context) {
			builder := pgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pgcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pgcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pgcb *ProfileGroupCreateBulk) SaveX(ctx context.Context) []*ProfileGroup {
	v, err := pgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
