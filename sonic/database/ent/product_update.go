// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/product"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/statistic"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where adds a new predicate for the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProductUpdate) SetCreatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "Name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetImage sets the "Image" field.
func (pu *ProductUpdate) SetImage(s string) *ProductUpdate {
	pu.mutation.SetImage(s)
	return pu
}

// SetNillableImage sets the "Image" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableImage(s *string) *ProductUpdate {
	if s != nil {
		pu.SetImage(*s)
	}
	return pu
}

// ClearImage clears the value of the "Image" field.
func (pu *ProductUpdate) ClearImage() *ProductUpdate {
	pu.mutation.ClearImage()
	return pu
}

// SetLookupType sets the "LookupType" field.
func (pu *ProductUpdate) SetLookupType(pt product.LookupType) *ProductUpdate {
	pu.mutation.SetLookupType(pt)
	return pu
}

// SetPositiveKeywords sets the "PositiveKeywords" field.
func (pu *ProductUpdate) SetPositiveKeywords(pa pq.StringArray) *ProductUpdate {
	pu.mutation.SetPositiveKeywords(pa)
	return pu
}

// ClearPositiveKeywords clears the value of the "PositiveKeywords" field.
func (pu *ProductUpdate) ClearPositiveKeywords() *ProductUpdate {
	pu.mutation.ClearPositiveKeywords()
	return pu
}

// SetNegativeKeywords sets the "NegativeKeywords" field.
func (pu *ProductUpdate) SetNegativeKeywords(pa pq.StringArray) *ProductUpdate {
	pu.mutation.SetNegativeKeywords(pa)
	return pu
}

// ClearNegativeKeywords clears the value of the "NegativeKeywords" field.
func (pu *ProductUpdate) ClearNegativeKeywords() *ProductUpdate {
	pu.mutation.ClearNegativeKeywords()
	return pu
}

// SetLink sets the "Link" field.
func (pu *ProductUpdate) SetLink(s string) *ProductUpdate {
	pu.mutation.SetLink(s)
	return pu
}

// SetNillableLink sets the "Link" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableLink(s *string) *ProductUpdate {
	if s != nil {
		pu.SetLink(*s)
	}
	return pu
}

// ClearLink clears the value of the "Link" field.
func (pu *ProductUpdate) ClearLink() *ProductUpdate {
	pu.mutation.ClearLink()
	return pu
}

// SetQuantity sets the "Quantity" field.
func (pu *ProductUpdate) SetQuantity(i int) *ProductUpdate {
	pu.mutation.ResetQuantity()
	pu.mutation.SetQuantity(i)
	return pu
}

// AddQuantity adds i to the "Quantity" field.
func (pu *ProductUpdate) AddQuantity(i int) *ProductUpdate {
	pu.mutation.AddQuantity(i)
	return pu
}

// SetSizes sets the "Sizes" field.
func (pu *ProductUpdate) SetSizes(pa pq.StringArray) *ProductUpdate {
	pu.mutation.SetSizes(pa)
	return pu
}

// SetColors sets the "Colors" field.
func (pu *ProductUpdate) SetColors(pa pq.StringArray) *ProductUpdate {
	pu.mutation.SetColors(pa)
	return pu
}

// SetSite sets the "Site" field.
func (pu *ProductUpdate) SetSite(pr product.Site) *ProductUpdate {
	pu.mutation.SetSite(pr)
	return pu
}

// SetMetadata sets the "Metadata" field.
func (pu *ProductUpdate) SetMetadata(s sonic.Map) *ProductUpdate {
	pu.mutation.SetMetadata(s)
	return pu
}

// AddTaskIDs adds the "Task" edge to the Task entity by IDs.
func (pu *ProductUpdate) AddTaskIDs(ids ...uuid.UUID) *ProductUpdate {
	pu.mutation.AddTaskIDs(ids...)
	return pu
}

// AddTask adds the "Task" edges to the Task entity.
func (pu *ProductUpdate) AddTask(t ...*Task) *ProductUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTaskIDs(ids...)
}

// AddStatisticIDs adds the "Statistic" edge to the Statistic entity by IDs.
func (pu *ProductUpdate) AddStatisticIDs(ids ...uuid.UUID) *ProductUpdate {
	pu.mutation.AddStatisticIDs(ids...)
	return pu
}

// AddStatistic adds the "Statistic" edges to the Statistic entity.
func (pu *ProductUpdate) AddStatistic(s ...*Statistic) *ProductUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddStatisticIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearTask clears all "Task" edges to the Task entity.
func (pu *ProductUpdate) ClearTask() *ProductUpdate {
	pu.mutation.ClearTask()
	return pu
}

// RemoveTaskIDs removes the "Task" edge to Task entities by IDs.
func (pu *ProductUpdate) RemoveTaskIDs(ids ...uuid.UUID) *ProductUpdate {
	pu.mutation.RemoveTaskIDs(ids...)
	return pu
}

// RemoveTask removes "Task" edges to Task entities.
func (pu *ProductUpdate) RemoveTask(t ...*Task) *ProductUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTaskIDs(ids...)
}

// ClearStatistic clears all "Statistic" edges to the Statistic entity.
func (pu *ProductUpdate) ClearStatistic() *ProductUpdate {
	pu.mutation.ClearStatistic()
	return pu
}

// RemoveStatisticIDs removes the "Statistic" edge to Statistic entities by IDs.
func (pu *ProductUpdate) RemoveStatisticIDs(ids ...uuid.UUID) *ProductUpdate {
	pu.mutation.RemoveStatisticIDs(ids...)
	return pu
}

// RemoveStatistic removes "Statistic" edges to Statistic entities.
func (pu *ProductUpdate) RemoveStatistic(s ...*Statistic) *ProductUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveStatisticIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.LookupType(); ok {
		if err := product.LookupTypeValidator(v); err != nil {
			return &ValidationError{Name: "LookupType", err: fmt.Errorf("ent: validator failed for field \"LookupType\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Site(); ok {
		if err := product.SiteValidator(v); err != nil {
			return &ValidationError{Name: "Site", err: fmt.Errorf("ent: validator failed for field \"Site\": %w", err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: product.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldName,
		})
	}
	if value, ok := pu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldImage,
		})
	}
	if pu.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldImage,
		})
	}
	if value, ok := pu.mutation.LookupType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldLookupType,
		})
	}
	if value, ok := pu.mutation.PositiveKeywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldPositiveKeywords,
		})
	}
	if pu.mutation.PositiveKeywordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: product.FieldPositiveKeywords,
		})
	}
	if value, ok := pu.mutation.NegativeKeywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldNegativeKeywords,
		})
	}
	if pu.mutation.NegativeKeywordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: product.FieldNegativeKeywords,
		})
	}
	if value, ok := pu.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLink,
		})
	}
	if pu.mutation.LinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLink,
		})
	}
	if value, ok := pu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantity,
		})
	}
	if value, ok := pu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantity,
		})
	}
	if value, ok := pu.mutation.Sizes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldSizes,
		})
	}
	if value, ok := pu.mutation.Colors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldColors,
		})
	}
	if value, ok := pu.mutation.Site(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldSite,
		})
	}
	if value, ok := pu.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldMetadata,
		})
	}
	if pu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.TaskTable,
			Columns: product.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTaskIDs(); len(nodes) > 0 && !pu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.TaskTable,
			Columns: product.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.TaskTable,
			Columns: product.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.StatisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.StatisticTable,
			Columns: product.StatisticPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: statistic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedStatisticIDs(); len(nodes) > 0 && !pu.mutation.StatisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.StatisticTable,
			Columns: product.StatisticPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: statistic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StatisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.StatisticTable,
			Columns: product.StatisticPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: statistic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProductUpdateOne) SetCreatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "Name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetImage sets the "Image" field.
func (puo *ProductUpdateOne) SetImage(s string) *ProductUpdateOne {
	puo.mutation.SetImage(s)
	return puo
}

// SetNillableImage sets the "Image" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableImage(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetImage(*s)
	}
	return puo
}

// ClearImage clears the value of the "Image" field.
func (puo *ProductUpdateOne) ClearImage() *ProductUpdateOne {
	puo.mutation.ClearImage()
	return puo
}

// SetLookupType sets the "LookupType" field.
func (puo *ProductUpdateOne) SetLookupType(pt product.LookupType) *ProductUpdateOne {
	puo.mutation.SetLookupType(pt)
	return puo
}

// SetPositiveKeywords sets the "PositiveKeywords" field.
func (puo *ProductUpdateOne) SetPositiveKeywords(pa pq.StringArray) *ProductUpdateOne {
	puo.mutation.SetPositiveKeywords(pa)
	return puo
}

// ClearPositiveKeywords clears the value of the "PositiveKeywords" field.
func (puo *ProductUpdateOne) ClearPositiveKeywords() *ProductUpdateOne {
	puo.mutation.ClearPositiveKeywords()
	return puo
}

// SetNegativeKeywords sets the "NegativeKeywords" field.
func (puo *ProductUpdateOne) SetNegativeKeywords(pa pq.StringArray) *ProductUpdateOne {
	puo.mutation.SetNegativeKeywords(pa)
	return puo
}

// ClearNegativeKeywords clears the value of the "NegativeKeywords" field.
func (puo *ProductUpdateOne) ClearNegativeKeywords() *ProductUpdateOne {
	puo.mutation.ClearNegativeKeywords()
	return puo
}

// SetLink sets the "Link" field.
func (puo *ProductUpdateOne) SetLink(s string) *ProductUpdateOne {
	puo.mutation.SetLink(s)
	return puo
}

// SetNillableLink sets the "Link" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableLink(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetLink(*s)
	}
	return puo
}

// ClearLink clears the value of the "Link" field.
func (puo *ProductUpdateOne) ClearLink() *ProductUpdateOne {
	puo.mutation.ClearLink()
	return puo
}

// SetQuantity sets the "Quantity" field.
func (puo *ProductUpdateOne) SetQuantity(i int) *ProductUpdateOne {
	puo.mutation.ResetQuantity()
	puo.mutation.SetQuantity(i)
	return puo
}

// AddQuantity adds i to the "Quantity" field.
func (puo *ProductUpdateOne) AddQuantity(i int) *ProductUpdateOne {
	puo.mutation.AddQuantity(i)
	return puo
}

// SetSizes sets the "Sizes" field.
func (puo *ProductUpdateOne) SetSizes(pa pq.StringArray) *ProductUpdateOne {
	puo.mutation.SetSizes(pa)
	return puo
}

// SetColors sets the "Colors" field.
func (puo *ProductUpdateOne) SetColors(pa pq.StringArray) *ProductUpdateOne {
	puo.mutation.SetColors(pa)
	return puo
}

// SetSite sets the "Site" field.
func (puo *ProductUpdateOne) SetSite(pr product.Site) *ProductUpdateOne {
	puo.mutation.SetSite(pr)
	return puo
}

// SetMetadata sets the "Metadata" field.
func (puo *ProductUpdateOne) SetMetadata(s sonic.Map) *ProductUpdateOne {
	puo.mutation.SetMetadata(s)
	return puo
}

// AddTaskIDs adds the "Task" edge to the Task entity by IDs.
func (puo *ProductUpdateOne) AddTaskIDs(ids ...uuid.UUID) *ProductUpdateOne {
	puo.mutation.AddTaskIDs(ids...)
	return puo
}

// AddTask adds the "Task" edges to the Task entity.
func (puo *ProductUpdateOne) AddTask(t ...*Task) *ProductUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTaskIDs(ids...)
}

// AddStatisticIDs adds the "Statistic" edge to the Statistic entity by IDs.
func (puo *ProductUpdateOne) AddStatisticIDs(ids ...uuid.UUID) *ProductUpdateOne {
	puo.mutation.AddStatisticIDs(ids...)
	return puo
}

// AddStatistic adds the "Statistic" edges to the Statistic entity.
func (puo *ProductUpdateOne) AddStatistic(s ...*Statistic) *ProductUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddStatisticIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearTask clears all "Task" edges to the Task entity.
func (puo *ProductUpdateOne) ClearTask() *ProductUpdateOne {
	puo.mutation.ClearTask()
	return puo
}

// RemoveTaskIDs removes the "Task" edge to Task entities by IDs.
func (puo *ProductUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *ProductUpdateOne {
	puo.mutation.RemoveTaskIDs(ids...)
	return puo
}

// RemoveTask removes "Task" edges to Task entities.
func (puo *ProductUpdateOne) RemoveTask(t ...*Task) *ProductUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTaskIDs(ids...)
}

// ClearStatistic clears all "Statistic" edges to the Statistic entity.
func (puo *ProductUpdateOne) ClearStatistic() *ProductUpdateOne {
	puo.mutation.ClearStatistic()
	return puo
}

// RemoveStatisticIDs removes the "Statistic" edge to Statistic entities by IDs.
func (puo *ProductUpdateOne) RemoveStatisticIDs(ids ...uuid.UUID) *ProductUpdateOne {
	puo.mutation.RemoveStatisticIDs(ids...)
	return puo
}

// RemoveStatistic removes "Statistic" edges to Statistic entities.
func (puo *ProductUpdateOne) RemoveStatistic(s ...*Statistic) *ProductUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveStatisticIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.LookupType(); ok {
		if err := product.LookupTypeValidator(v); err != nil {
			return &ValidationError{Name: "LookupType", err: fmt.Errorf("ent: validator failed for field \"LookupType\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Site(); ok {
		if err := product.SiteValidator(v); err != nil {
			return &ValidationError{Name: "Site", err: fmt.Errorf("ent: validator failed for field \"Site\": %w", err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: product.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Product.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldName,
		})
	}
	if value, ok := puo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldImage,
		})
	}
	if puo.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldImage,
		})
	}
	if value, ok := puo.mutation.LookupType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldLookupType,
		})
	}
	if value, ok := puo.mutation.PositiveKeywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldPositiveKeywords,
		})
	}
	if puo.mutation.PositiveKeywordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: product.FieldPositiveKeywords,
		})
	}
	if value, ok := puo.mutation.NegativeKeywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldNegativeKeywords,
		})
	}
	if puo.mutation.NegativeKeywordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: product.FieldNegativeKeywords,
		})
	}
	if value, ok := puo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLink,
		})
	}
	if puo.mutation.LinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: product.FieldLink,
		})
	}
	if value, ok := puo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantity,
		})
	}
	if value, ok := puo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldQuantity,
		})
	}
	if value, ok := puo.mutation.Sizes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldSizes,
		})
	}
	if value, ok := puo.mutation.Colors(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldColors,
		})
	}
	if value, ok := puo.mutation.Site(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldSite,
		})
	}
	if value, ok := puo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldMetadata,
		})
	}
	if puo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.TaskTable,
			Columns: product.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTaskIDs(); len(nodes) > 0 && !puo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.TaskTable,
			Columns: product.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.TaskTable,
			Columns: product.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.StatisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.StatisticTable,
			Columns: product.StatisticPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: statistic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedStatisticIDs(); len(nodes) > 0 && !puo.mutation.StatisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.StatisticTable,
			Columns: product.StatisticPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: statistic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StatisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.StatisticTable,
			Columns: product.StatisticPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: statistic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
