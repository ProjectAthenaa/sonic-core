// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/release"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// ReleaseUpdate is the builder for updating Release entities.
type ReleaseUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseMutation
}

// Where adds a new predicate for the ReleaseUpdate builder.
func (ru *ReleaseUpdate) Where(ps ...predicate.Release) *ReleaseUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReleaseUpdate) SetCreatedAt(t time.Time) *ReleaseUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableCreatedAt(t *time.Time) *ReleaseUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetReleaseDate sets the "ReleaseDate" field.
func (ru *ReleaseUpdate) SetReleaseDate(t time.Time) *ReleaseUpdate {
	ru.mutation.SetReleaseDate(t)
	return ru
}

// SetNillableReleaseDate sets the "ReleaseDate" field if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableReleaseDate(t *time.Time) *ReleaseUpdate {
	if t != nil {
		ru.SetReleaseDate(*t)
	}
	return ru
}

// SetStockLevel sets the "StockLevel" field.
func (ru *ReleaseUpdate) SetStockLevel(i int32) *ReleaseUpdate {
	ru.mutation.ResetStockLevel()
	ru.mutation.SetStockLevel(i)
	return ru
}

// SetNillableStockLevel sets the "StockLevel" field if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableStockLevel(i *int32) *ReleaseUpdate {
	if i != nil {
		ru.SetStockLevel(*i)
	}
	return ru
}

// AddStockLevel adds i to the "StockLevel" field.
func (ru *ReleaseUpdate) AddStockLevel(i int32) *ReleaseUpdate {
	ru.mutation.AddStockLevel(i)
	return ru
}

// SetCode sets the "Code" field.
func (ru *ReleaseUpdate) SetCode(s string) *ReleaseUpdate {
	ru.mutation.SetCode(s)
	return ru
}

// SetNillableCode sets the "Code" field if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableCode(s *string) *ReleaseUpdate {
	if s != nil {
		ru.SetCode(*s)
	}
	return ru
}

// SetType sets the "Type" field.
func (ru *ReleaseUpdate) SetType(r release.Type) *ReleaseUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableType(r *release.Type) *ReleaseUpdate {
	if r != nil {
		ru.SetType(*r)
	}
	return ru
}

// AddCustomerIDs adds the "Customers" edge to the User entity by IDs.
func (ru *ReleaseUpdate) AddCustomerIDs(ids ...uuid.UUID) *ReleaseUpdate {
	ru.mutation.AddCustomerIDs(ids...)
	return ru
}

// AddCustomers adds the "Customers" edges to the User entity.
func (ru *ReleaseUpdate) AddCustomers(u ...*User) *ReleaseUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddCustomerIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ru *ReleaseUpdate) Mutation() *ReleaseMutation {
	return ru.mutation
}

// ClearCustomers clears all "Customers" edges to the User entity.
func (ru *ReleaseUpdate) ClearCustomers() *ReleaseUpdate {
	ru.mutation.ClearCustomers()
	return ru
}

// RemoveCustomerIDs removes the "Customers" edge to User entities by IDs.
func (ru *ReleaseUpdate) RemoveCustomerIDs(ids ...uuid.UUID) *ReleaseUpdate {
	ru.mutation.RemoveCustomerIDs(ids...)
	return ru
}

// RemoveCustomers removes "Customers" edges to User entities.
func (ru *ReleaseUpdate) RemoveCustomers(u ...*User) *ReleaseUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReleaseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReleaseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReleaseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReleaseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReleaseUpdate) check() error {
	if v, ok := ru.mutation.GetType(); ok {
		if err := release.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (ru *ReleaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   release.Table,
			Columns: release.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: release.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: release.FieldCreatedAt,
		})
	}
	if value, ok := ru.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: release.FieldReleaseDate,
		})
	}
	if value, ok := ru.mutation.StockLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: release.FieldStockLevel,
		})
	}
	if value, ok := ru.mutation.AddedStockLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: release.FieldStockLevel,
		})
	}
	if value, ok := ru.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldCode,
		})
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: release.FieldType,
		})
	}
	if ru.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.CustomersTable,
			Columns: []string{release.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !ru.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.CustomersTable,
			Columns: []string{release.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.CustomersTable,
			Columns: []string{release.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReleaseUpdateOne is the builder for updating a single Release entity.
type ReleaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseMutation
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReleaseUpdateOne) SetCreatedAt(t time.Time) *ReleaseUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableCreatedAt(t *time.Time) *ReleaseUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetReleaseDate sets the "ReleaseDate" field.
func (ruo *ReleaseUpdateOne) SetReleaseDate(t time.Time) *ReleaseUpdateOne {
	ruo.mutation.SetReleaseDate(t)
	return ruo
}

// SetNillableReleaseDate sets the "ReleaseDate" field if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableReleaseDate(t *time.Time) *ReleaseUpdateOne {
	if t != nil {
		ruo.SetReleaseDate(*t)
	}
	return ruo
}

// SetStockLevel sets the "StockLevel" field.
func (ruo *ReleaseUpdateOne) SetStockLevel(i int32) *ReleaseUpdateOne {
	ruo.mutation.ResetStockLevel()
	ruo.mutation.SetStockLevel(i)
	return ruo
}

// SetNillableStockLevel sets the "StockLevel" field if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableStockLevel(i *int32) *ReleaseUpdateOne {
	if i != nil {
		ruo.SetStockLevel(*i)
	}
	return ruo
}

// AddStockLevel adds i to the "StockLevel" field.
func (ruo *ReleaseUpdateOne) AddStockLevel(i int32) *ReleaseUpdateOne {
	ruo.mutation.AddStockLevel(i)
	return ruo
}

// SetCode sets the "Code" field.
func (ruo *ReleaseUpdateOne) SetCode(s string) *ReleaseUpdateOne {
	ruo.mutation.SetCode(s)
	return ruo
}

// SetNillableCode sets the "Code" field if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableCode(s *string) *ReleaseUpdateOne {
	if s != nil {
		ruo.SetCode(*s)
	}
	return ruo
}

// SetType sets the "Type" field.
func (ruo *ReleaseUpdateOne) SetType(r release.Type) *ReleaseUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableType(r *release.Type) *ReleaseUpdateOne {
	if r != nil {
		ruo.SetType(*r)
	}
	return ruo
}

// AddCustomerIDs adds the "Customers" edge to the User entity by IDs.
func (ruo *ReleaseUpdateOne) AddCustomerIDs(ids ...uuid.UUID) *ReleaseUpdateOne {
	ruo.mutation.AddCustomerIDs(ids...)
	return ruo
}

// AddCustomers adds the "Customers" edges to the User entity.
func (ruo *ReleaseUpdateOne) AddCustomers(u ...*User) *ReleaseUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddCustomerIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ruo *ReleaseUpdateOne) Mutation() *ReleaseMutation {
	return ruo.mutation
}

// ClearCustomers clears all "Customers" edges to the User entity.
func (ruo *ReleaseUpdateOne) ClearCustomers() *ReleaseUpdateOne {
	ruo.mutation.ClearCustomers()
	return ruo
}

// RemoveCustomerIDs removes the "Customers" edge to User entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveCustomerIDs(ids ...uuid.UUID) *ReleaseUpdateOne {
	ruo.mutation.RemoveCustomerIDs(ids...)
	return ruo
}

// RemoveCustomers removes "Customers" edges to User entities.
func (ruo *ReleaseUpdateOne) RemoveCustomers(u ...*User) *ReleaseUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveCustomerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReleaseUpdateOne) Select(field string, fields ...string) *ReleaseUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Release entity.
func (ruo *ReleaseUpdateOne) Save(ctx context.Context) (*Release, error) {
	var (
		err  error
		node *Release
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReleaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) SaveX(ctx context.Context) *Release {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReleaseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReleaseUpdateOne) check() error {
	if v, ok := ruo.mutation.GetType(); ok {
		if err := release.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (ruo *ReleaseUpdateOne) sqlSave(ctx context.Context) (_node *Release, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   release.Table,
			Columns: release.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: release.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Release.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, release.FieldID)
		for _, f := range fields {
			if !release.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != release.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: release.FieldCreatedAt,
		})
	}
	if value, ok := ruo.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: release.FieldReleaseDate,
		})
	}
	if value, ok := ruo.mutation.StockLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: release.FieldStockLevel,
		})
	}
	if value, ok := ruo.mutation.AddedStockLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: release.FieldStockLevel,
		})
	}
	if value, ok := ruo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: release.FieldCode,
		})
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: release.FieldType,
		})
	}
	if ruo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.CustomersTable,
			Columns: []string{release.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCustomersIDs(); len(nodes) > 0 && !ruo.mutation.CustomersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.CustomersTable,
			Columns: []string{release.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CustomersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   release.CustomersTable,
			Columns: []string{release.CustomersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Release{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
