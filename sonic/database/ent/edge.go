// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (ag *AccountGroup) App(ctx context.Context) (*App, error) {
	result, err := ag.Edges.AppOrErr()
	if IsNotLoaded(err) {
		result, err = ag.QueryApp().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Address) ShippingAddress(ctx context.Context) (*Shipping, error) {
	result, err := a.Edges.ShippingAddressOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryShippingAddress().Only(ctx)
	}
	return result, err
}

func (a *Address) BillingAddress(ctx context.Context) (*Shipping, error) {
	result, err := a.Edges.BillingAddressOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryBillingAddress().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *App) User(ctx context.Context) (*User, error) {
	result, err := a.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryUser().Only(ctx)
	}
	return result, err
}

func (a *App) Settings(ctx context.Context) ([]*Settings, error) {
	result, err := a.Edges.SettingsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QuerySettings().All(ctx)
	}
	return result, err
}

func (a *App) ProxyLists(ctx context.Context) ([]*ProxyList, error) {
	result, err := a.Edges.ProxyListsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryProxyLists().All(ctx)
	}
	return result, err
}

func (a *App) ProfileGroups(ctx context.Context) ([]*ProfileGroup, error) {
	result, err := a.Edges.ProfileGroupsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryProfileGroups().All(ctx)
	}
	return result, err
}

func (a *App) TaskGroups(ctx context.Context) ([]*TaskGroup, error) {
	result, err := a.Edges.TaskGroupsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryTaskGroups().All(ctx)
	}
	return result, err
}

func (a *App) AccountGroups(ctx context.Context) ([]*AccountGroup, error) {
	result, err := a.Edges.AccountGroupsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAccountGroups().All(ctx)
	}
	return result, err
}

func (b *Billing) Profile(ctx context.Context) ([]*Profile, error) {
	result, err := b.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryProfile().All(ctx)
	}
	return result, err
}

func (c *Calendar) QuickTask(ctx context.Context) (*Product, error) {
	result, err := c.Edges.QuickTaskOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryQuickTask().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (l *License) User(ctx context.Context) (*User, error) {
	result, err := l.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryUser().Only(ctx)
	}
	return result, err
}

func (l *License) Stripe(ctx context.Context) ([]*Stripe, error) {
	result, err := l.Edges.StripeOrErr()
	if IsNotLoaded(err) {
		result, err = l.QueryStripe().All(ctx)
	}
	return result, err
}

func (m *Metadata) User(ctx context.Context) (*User, error) {
	result, err := m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryUser().Only(ctx)
	}
	return result, err
}

func (pr *Product) Task(ctx context.Context) ([]*Task, error) {
	result, err := pr.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryTask().All(ctx)
	}
	return result, err
}

func (pr *Product) Statistic(ctx context.Context) ([]*Statistic, error) {
	result, err := pr.Edges.StatisticOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryStatistic().All(ctx)
	}
	return result, err
}

func (pr *Product) Calendar(ctx context.Context) (*Calendar, error) {
	result, err := pr.Edges.CalendarOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryCalendar().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Profile) ProfileGroup(ctx context.Context) (*ProfileGroup, error) {
	result, err := pr.Edges.ProfileGroupOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryProfileGroup().Only(ctx)
	}
	return result, err
}

func (pr *Profile) Shipping(ctx context.Context) ([]*Shipping, error) {
	result, err := pr.Edges.ShippingOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryShipping().All(ctx)
	}
	return result, err
}

func (pr *Profile) Billing(ctx context.Context) ([]*Billing, error) {
	result, err := pr.Edges.BillingOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryBilling().All(ctx)
	}
	return result, err
}

func (pg *ProfileGroup) Profiles(ctx context.Context) ([]*Profile, error) {
	result, err := pg.Edges.ProfilesOrErr()
	if IsNotLoaded(err) {
		result, err = pg.QueryProfiles().All(ctx)
	}
	return result, err
}

func (pg *ProfileGroup) App(ctx context.Context) ([]*App, error) {
	result, err := pg.Edges.AppOrErr()
	if IsNotLoaded(err) {
		result, err = pg.QueryApp().All(ctx)
	}
	return result, err
}

func (pg *ProfileGroup) Task(ctx context.Context) ([]*Task, error) {
	result, err := pg.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = pg.QueryTask().All(ctx)
	}
	return result, err
}

func (pr *Proxy) ProxyList(ctx context.Context) (*ProxyList, error) {
	result, err := pr.Edges.ProxyListOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryProxyList().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *ProxyList) App(ctx context.Context) ([]*App, error) {
	result, err := pl.Edges.AppOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryApp().All(ctx)
	}
	return result, err
}

func (pl *ProxyList) Proxies(ctx context.Context) ([]*Proxy, error) {
	result, err := pl.Edges.ProxiesOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryProxies().All(ctx)
	}
	return result, err
}

func (pl *ProxyList) Task(ctx context.Context) ([]*Task, error) {
	result, err := pl.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryTask().All(ctx)
	}
	return result, err
}

func (r *Release) Customers(ctx context.Context) ([]*User, error) {
	result, err := r.Edges.CustomersOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryCustomers().All(ctx)
	}
	return result, err
}

func (s *Session) User(ctx context.Context) (*User, error) {
	result, err := s.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Settings) App(ctx context.Context) (*App, error) {
	result, err := s.Edges.AppOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryApp().Only(ctx)
	}
	return result, err
}

func (s *Shipping) Profile(ctx context.Context) (*Profile, error) {
	result, err := s.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryProfile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipping) ShippingAddress(ctx context.Context) (*Address, error) {
	result, err := s.Edges.ShippingAddressOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryShippingAddress().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shipping) BillingAddress(ctx context.Context) (*Address, error) {
	result, err := s.Edges.BillingAddressOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryBillingAddress().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Statistic) User(ctx context.Context) ([]*User, error) {
	result, err := s.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryUser().All(ctx)
	}
	return result, err
}

func (s *Statistic) Product(ctx context.Context) ([]*Product, error) {
	result, err := s.Edges.ProductOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryProduct().All(ctx)
	}
	return result, err
}

func (s *Stripe) License(ctx context.Context) (*License, error) {
	result, err := s.Edges.LicenseOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryLicense().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Product(ctx context.Context) ([]*Product, error) {
	result, err := t.Edges.ProductOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryProduct().All(ctx)
	}
	return result, err
}

func (t *Task) ProxyList(ctx context.Context) ([]*ProxyList, error) {
	result, err := t.Edges.ProxyListOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryProxyList().All(ctx)
	}
	return result, err
}

func (t *Task) ProfileGroup(ctx context.Context) (*ProfileGroup, error) {
	result, err := t.Edges.ProfileGroupOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryProfileGroup().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) TaskGroup(ctx context.Context) (*TaskGroup, error) {
	result, err := t.Edges.TaskGroupOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTaskGroup().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tg *TaskGroup) App(ctx context.Context) ([]*App, error) {
	result, err := tg.Edges.AppOrErr()
	if IsNotLoaded(err) {
		result, err = tg.QueryApp().All(ctx)
	}
	return result, err
}

func (tg *TaskGroup) Tasks(ctx context.Context) ([]*Task, error) {
	result, err := tg.Edges.TasksOrErr()
	if IsNotLoaded(err) {
		result, err = tg.QueryTasks().All(ctx)
	}
	return result, err
}

func (u *User) License(ctx context.Context) (*License, error) {
	result, err := u.Edges.LicenseOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLicense().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Statistics(ctx context.Context) ([]*Statistic, error) {
	result, err := u.Edges.StatisticsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryStatistics().All(ctx)
	}
	return result, err
}

func (u *User) App(ctx context.Context) (*App, error) {
	result, err := u.Edges.AppOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryApp().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := u.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Sessions(ctx context.Context) ([]*Session, error) {
	result, err := u.Edges.SessionsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QuerySessions().All(ctx)
	}
	return result, err
}

func (u *User) Release(ctx context.Context) (*Release, error) {
	result, err := u.Edges.ReleaseOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryRelease().Only(ctx)
	}
	return result, MaskNotFound(err)
}
