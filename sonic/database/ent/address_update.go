// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/address"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/shipping"
	"github.com/google/uuid"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where adds a new predicate for the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AddressUpdate) SetCreatedAt(t time.Time) *AddressUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCreatedAt(t *time.Time) *AddressUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AddressUpdate) SetUpdatedAt(t time.Time) *AddressUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetAddressLine sets the "AddressLine" field.
func (au *AddressUpdate) SetAddressLine(s string) *AddressUpdate {
	au.mutation.SetAddressLine(s)
	return au
}

// SetAddressLine2 sets the "AddressLine2" field.
func (au *AddressUpdate) SetAddressLine2(s string) *AddressUpdate {
	au.mutation.SetAddressLine2(s)
	return au
}

// SetNillableAddressLine2 sets the "AddressLine2" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAddressLine2(s *string) *AddressUpdate {
	if s != nil {
		au.SetAddressLine2(*s)
	}
	return au
}

// ClearAddressLine2 clears the value of the "AddressLine2" field.
func (au *AddressUpdate) ClearAddressLine2() *AddressUpdate {
	au.mutation.ClearAddressLine2()
	return au
}

// SetCountry sets the "Country" field.
func (au *AddressUpdate) SetCountry(s string) *AddressUpdate {
	au.mutation.SetCountry(s)
	return au
}

// SetState sets the "State" field.
func (au *AddressUpdate) SetState(s string) *AddressUpdate {
	au.mutation.SetState(s)
	return au
}

// SetCity sets the "City" field.
func (au *AddressUpdate) SetCity(s string) *AddressUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetZIP sets the "ZIP" field.
func (au *AddressUpdate) SetZIP(s string) *AddressUpdate {
	au.mutation.SetZIP(s)
	return au
}

// SetStateCode sets the "StateCode" field.
func (au *AddressUpdate) SetStateCode(s string) *AddressUpdate {
	au.mutation.SetStateCode(s)
	return au
}

// SetShippingAddressID sets the "ShippingAddress" edge to the Shipping entity by ID.
func (au *AddressUpdate) SetShippingAddressID(id uuid.UUID) *AddressUpdate {
	au.mutation.SetShippingAddressID(id)
	return au
}

// SetShippingAddress sets the "ShippingAddress" edge to the Shipping entity.
func (au *AddressUpdate) SetShippingAddress(s *Shipping) *AddressUpdate {
	return au.SetShippingAddressID(s.ID)
}

// AddBillingAddresIDs adds the "BillingAddress" edge to the Shipping entity by IDs.
func (au *AddressUpdate) AddBillingAddresIDs(ids ...uuid.UUID) *AddressUpdate {
	au.mutation.AddBillingAddresIDs(ids...)
	return au
}

// AddBillingAddress adds the "BillingAddress" edges to the Shipping entity.
func (au *AddressUpdate) AddBillingAddress(s ...*Shipping) *AddressUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddBillingAddresIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// ClearShippingAddress clears the "ShippingAddress" edge to the Shipping entity.
func (au *AddressUpdate) ClearShippingAddress() *AddressUpdate {
	au.mutation.ClearShippingAddress()
	return au
}

// ClearBillingAddress clears all "BillingAddress" edges to the Shipping entity.
func (au *AddressUpdate) ClearBillingAddress() *AddressUpdate {
	au.mutation.ClearBillingAddress()
	return au
}

// RemoveBillingAddresIDs removes the "BillingAddress" edge to Shipping entities by IDs.
func (au *AddressUpdate) RemoveBillingAddresIDs(ids ...uuid.UUID) *AddressUpdate {
	au.mutation.RemoveBillingAddresIDs(ids...)
	return au
}

// RemoveBillingAddress removes "BillingAddress" edges to Shipping entities.
func (au *AddressUpdate) RemoveBillingAddress(s ...*Shipping) *AddressUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveBillingAddresIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AddressUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AddressUpdate) check() error {
	if _, ok := au.mutation.ShippingAddressID(); au.mutation.ShippingAddressCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ShippingAddress\"")
	}
	return nil
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: address.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: address.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: address.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.AddressLine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddressLine,
		})
	}
	if value, ok := au.mutation.AddressLine2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddressLine2,
		})
	}
	if au.mutation.AddressLine2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldAddressLine2,
		})
	}
	if value, ok := au.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCountry,
		})
	}
	if value, ok := au.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldState,
		})
	}
	if value, ok := au.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCity,
		})
	}
	if value, ok := au.mutation.ZIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldZIP,
		})
	}
	if value, ok := au.mutation.StateCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldStateCode,
		})
	}
	if au.mutation.ShippingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.ShippingAddressTable,
			Columns: []string{address.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ShippingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.ShippingAddressTable,
			Columns: []string{address.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BillingAddressTable,
			Columns: address.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedBillingAddressIDs(); len(nodes) > 0 && !au.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BillingAddressTable,
			Columns: address.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BillingAddressTable,
			Columns: address.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetCreatedAt sets the "created_at" field.
func (auo *AddressUpdateOne) SetCreatedAt(t time.Time) *AddressUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCreatedAt(t *time.Time) *AddressUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AddressUpdateOne) SetUpdatedAt(t time.Time) *AddressUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetAddressLine sets the "AddressLine" field.
func (auo *AddressUpdateOne) SetAddressLine(s string) *AddressUpdateOne {
	auo.mutation.SetAddressLine(s)
	return auo
}

// SetAddressLine2 sets the "AddressLine2" field.
func (auo *AddressUpdateOne) SetAddressLine2(s string) *AddressUpdateOne {
	auo.mutation.SetAddressLine2(s)
	return auo
}

// SetNillableAddressLine2 sets the "AddressLine2" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAddressLine2(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetAddressLine2(*s)
	}
	return auo
}

// ClearAddressLine2 clears the value of the "AddressLine2" field.
func (auo *AddressUpdateOne) ClearAddressLine2() *AddressUpdateOne {
	auo.mutation.ClearAddressLine2()
	return auo
}

// SetCountry sets the "Country" field.
func (auo *AddressUpdateOne) SetCountry(s string) *AddressUpdateOne {
	auo.mutation.SetCountry(s)
	return auo
}

// SetState sets the "State" field.
func (auo *AddressUpdateOne) SetState(s string) *AddressUpdateOne {
	auo.mutation.SetState(s)
	return auo
}

// SetCity sets the "City" field.
func (auo *AddressUpdateOne) SetCity(s string) *AddressUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetZIP sets the "ZIP" field.
func (auo *AddressUpdateOne) SetZIP(s string) *AddressUpdateOne {
	auo.mutation.SetZIP(s)
	return auo
}

// SetStateCode sets the "StateCode" field.
func (auo *AddressUpdateOne) SetStateCode(s string) *AddressUpdateOne {
	auo.mutation.SetStateCode(s)
	return auo
}

// SetShippingAddressID sets the "ShippingAddress" edge to the Shipping entity by ID.
func (auo *AddressUpdateOne) SetShippingAddressID(id uuid.UUID) *AddressUpdateOne {
	auo.mutation.SetShippingAddressID(id)
	return auo
}

// SetShippingAddress sets the "ShippingAddress" edge to the Shipping entity.
func (auo *AddressUpdateOne) SetShippingAddress(s *Shipping) *AddressUpdateOne {
	return auo.SetShippingAddressID(s.ID)
}

// AddBillingAddresIDs adds the "BillingAddress" edge to the Shipping entity by IDs.
func (auo *AddressUpdateOne) AddBillingAddresIDs(ids ...uuid.UUID) *AddressUpdateOne {
	auo.mutation.AddBillingAddresIDs(ids...)
	return auo
}

// AddBillingAddress adds the "BillingAddress" edges to the Shipping entity.
func (auo *AddressUpdateOne) AddBillingAddress(s ...*Shipping) *AddressUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddBillingAddresIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// ClearShippingAddress clears the "ShippingAddress" edge to the Shipping entity.
func (auo *AddressUpdateOne) ClearShippingAddress() *AddressUpdateOne {
	auo.mutation.ClearShippingAddress()
	return auo
}

// ClearBillingAddress clears all "BillingAddress" edges to the Shipping entity.
func (auo *AddressUpdateOne) ClearBillingAddress() *AddressUpdateOne {
	auo.mutation.ClearBillingAddress()
	return auo
}

// RemoveBillingAddresIDs removes the "BillingAddress" edge to Shipping entities by IDs.
func (auo *AddressUpdateOne) RemoveBillingAddresIDs(ids ...uuid.UUID) *AddressUpdateOne {
	auo.mutation.RemoveBillingAddresIDs(ids...)
	return auo
}

// RemoveBillingAddress removes "BillingAddress" edges to Shipping entities.
func (auo *AddressUpdateOne) RemoveBillingAddress(s ...*Shipping) *AddressUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveBillingAddresIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	var (
		err  error
		node *Address
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AddressUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AddressUpdateOne) check() error {
	if _, ok := auo.mutation.ShippingAddressID(); auo.mutation.ShippingAddressCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ShippingAddress\"")
	}
	return nil
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: address.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Address.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: address.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: address.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.AddressLine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddressLine,
		})
	}
	if value, ok := auo.mutation.AddressLine2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddressLine2,
		})
	}
	if auo.mutation.AddressLine2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: address.FieldAddressLine2,
		})
	}
	if value, ok := auo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCountry,
		})
	}
	if value, ok := auo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldState,
		})
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCity,
		})
	}
	if value, ok := auo.mutation.ZIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldZIP,
		})
	}
	if value, ok := auo.mutation.StateCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldStateCode,
		})
	}
	if auo.mutation.ShippingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.ShippingAddressTable,
			Columns: []string{address.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ShippingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.ShippingAddressTable,
			Columns: []string{address.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BillingAddressTable,
			Columns: address.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedBillingAddressIDs(); len(nodes) > 0 && !auo.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BillingAddressTable,
			Columns: address.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BillingAddressTable,
			Columns: address.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: shipping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
