// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDisabled holds the string denoting the disabled field in the database.
	FieldDisabled = "disabled"
	// FieldTasksRan holds the string denoting the tasksran field in the database.
	FieldTasksRan = "tasks_ran"
	// FieldTotalDeclines holds the string denoting the totaldeclines field in the database.
	FieldTotalDeclines = "total_declines"
	// FieldMoneySpent holds the string denoting the moneyspent field in the database.
	FieldMoneySpent = "money_spent"
	// FieldTotalCheckouts holds the string denoting the totalcheckouts field in the database.
	FieldTotalCheckouts = "total_checkouts"
	// EdgeLicense holds the string denoting the license edge name in mutations.
	EdgeLicense = "License"
	// EdgeCheckouts holds the string denoting the checkouts edge name in mutations.
	EdgeCheckouts = "Checkouts"
	// EdgeApp holds the string denoting the app edge name in mutations.
	EdgeApp = "App"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "Metadata"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "Sessions"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "Release"
	// Table holds the table name of the user in the database.
	Table = "users"
	// LicenseTable is the table that holds the License relation/edge.
	LicenseTable = "licenses"
	// LicenseInverseTable is the table name for the License entity.
	// It exists in this package in order to avoid circular dependency with the "license" package.
	LicenseInverseTable = "licenses"
	// LicenseColumn is the table column denoting the License relation/edge.
	LicenseColumn = "user_license"
	// CheckoutsTable is the table that holds the Checkouts relation/edge.
	CheckoutsTable = "checkouts"
	// CheckoutsInverseTable is the table name for the Checkout entity.
	// It exists in this package in order to avoid circular dependency with the "checkout" package.
	CheckoutsInverseTable = "checkouts"
	// CheckoutsColumn is the table column denoting the Checkouts relation/edge.
	CheckoutsColumn = "user_checkouts"
	// AppTable is the table that holds the App relation/edge.
	AppTable = "apps"
	// AppInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	AppInverseTable = "apps"
	// AppColumn is the table column denoting the App relation/edge.
	AppColumn = "user_app"
	// MetadataTable is the table that holds the Metadata relation/edge.
	MetadataTable = "metadata"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the Metadata relation/edge.
	MetadataColumn = "user_metadata"
	// SessionsTable is the table that holds the Sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the Sessions relation/edge.
	SessionsColumn = "user_sessions"
	// ReleaseTable is the table that holds the Release relation/edge.
	ReleaseTable = "users"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "releases"
	// ReleaseColumn is the table column denoting the Release relation/edge.
	ReleaseColumn = "release_customers"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDisabled,
	FieldTasksRan,
	FieldTotalDeclines,
	FieldMoneySpent,
	FieldTotalCheckouts,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"release_customers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDisabled holds the default value on creation for the "Disabled" field.
	DefaultDisabled bool
	// DefaultTasksRan holds the default value on creation for the "TasksRan" field.
	DefaultTasksRan int
	// DefaultTotalDeclines holds the default value on creation for the "TotalDeclines" field.
	DefaultTotalDeclines int
	// DefaultMoneySpent holds the default value on creation for the "MoneySpent" field.
	DefaultMoneySpent float64
	// DefaultTotalCheckouts holds the default value on creation for the "TotalCheckouts" field.
	DefaultTotalCheckouts int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
