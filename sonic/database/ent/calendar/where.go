// Code generated by entc, DO NOT EDIT.

package calendar

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ReleaseDate applies equality check predicate on the "ReleaseDate" field. It's identical to ReleaseDateEQ.
func ReleaseDate(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// ProductImage applies equality check predicate on the "ProductImage" field. It's identical to ProductImageEQ.
func ProductImage(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductImage), v))
	})
}

// ProductName applies equality check predicate on the "ProductName" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// HypedRelease applies equality check predicate on the "HypedRelease" field. It's identical to HypedReleaseEQ.
func HypedRelease(v bool) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHypedRelease), v))
	})
}

// UsersRunning applies equality check predicate on the "UsersRunning" field. It's identical to UsersRunningEQ.
func UsersRunning(v int) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsersRunning), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ReleaseDateEQ applies the EQ predicate on the "ReleaseDate" field.
func ReleaseDateEQ(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateNEQ applies the NEQ predicate on the "ReleaseDate" field.
func ReleaseDateNEQ(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateIn applies the In predicate on the "ReleaseDate" field.
func ReleaseDateIn(vs ...time.Time) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateNotIn applies the NotIn predicate on the "ReleaseDate" field.
func ReleaseDateNotIn(vs ...time.Time) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateGT applies the GT predicate on the "ReleaseDate" field.
func ReleaseDateGT(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateGTE applies the GTE predicate on the "ReleaseDate" field.
func ReleaseDateGTE(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLT applies the LT predicate on the "ReleaseDate" field.
func ReleaseDateLT(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLTE applies the LTE predicate on the "ReleaseDate" field.
func ReleaseDateLTE(v time.Time) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReleaseDate), v))
	})
}

// ProductImageEQ applies the EQ predicate on the "ProductImage" field.
func ProductImageEQ(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductImage), v))
	})
}

// ProductImageNEQ applies the NEQ predicate on the "ProductImage" field.
func ProductImageNEQ(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductImage), v))
	})
}

// ProductImageIn applies the In predicate on the "ProductImage" field.
func ProductImageIn(vs ...string) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductImage), v...))
	})
}

// ProductImageNotIn applies the NotIn predicate on the "ProductImage" field.
func ProductImageNotIn(vs ...string) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductImage), v...))
	})
}

// ProductImageGT applies the GT predicate on the "ProductImage" field.
func ProductImageGT(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductImage), v))
	})
}

// ProductImageGTE applies the GTE predicate on the "ProductImage" field.
func ProductImageGTE(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductImage), v))
	})
}

// ProductImageLT applies the LT predicate on the "ProductImage" field.
func ProductImageLT(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductImage), v))
	})
}

// ProductImageLTE applies the LTE predicate on the "ProductImage" field.
func ProductImageLTE(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductImage), v))
	})
}

// ProductImageContains applies the Contains predicate on the "ProductImage" field.
func ProductImageContains(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductImage), v))
	})
}

// ProductImageHasPrefix applies the HasPrefix predicate on the "ProductImage" field.
func ProductImageHasPrefix(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductImage), v))
	})
}

// ProductImageHasSuffix applies the HasSuffix predicate on the "ProductImage" field.
func ProductImageHasSuffix(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductImage), v))
	})
}

// ProductImageEqualFold applies the EqualFold predicate on the "ProductImage" field.
func ProductImageEqualFold(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductImage), v))
	})
}

// ProductImageContainsFold applies the ContainsFold predicate on the "ProductImage" field.
func ProductImageContainsFold(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductImage), v))
	})
}

// ProductNameEQ applies the EQ predicate on the "ProductName" field.
func ProductNameEQ(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// ProductNameNEQ applies the NEQ predicate on the "ProductName" field.
func ProductNameNEQ(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductName), v))
	})
}

// ProductNameIn applies the In predicate on the "ProductName" field.
func ProductNameIn(vs ...string) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductName), v...))
	})
}

// ProductNameNotIn applies the NotIn predicate on the "ProductName" field.
func ProductNameNotIn(vs ...string) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductName), v...))
	})
}

// ProductNameGT applies the GT predicate on the "ProductName" field.
func ProductNameGT(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductName), v))
	})
}

// ProductNameGTE applies the GTE predicate on the "ProductName" field.
func ProductNameGTE(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductName), v))
	})
}

// ProductNameLT applies the LT predicate on the "ProductName" field.
func ProductNameLT(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductName), v))
	})
}

// ProductNameLTE applies the LTE predicate on the "ProductName" field.
func ProductNameLTE(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductName), v))
	})
}

// ProductNameContains applies the Contains predicate on the "ProductName" field.
func ProductNameContains(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductName), v))
	})
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "ProductName" field.
func ProductNameHasPrefix(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductName), v))
	})
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "ProductName" field.
func ProductNameHasSuffix(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductName), v))
	})
}

// ProductNameEqualFold applies the EqualFold predicate on the "ProductName" field.
func ProductNameEqualFold(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductName), v))
	})
}

// ProductNameContainsFold applies the ContainsFold predicate on the "ProductName" field.
func ProductNameContainsFold(v string) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductName), v))
	})
}

// HypedReleaseEQ applies the EQ predicate on the "HypedRelease" field.
func HypedReleaseEQ(v bool) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHypedRelease), v))
	})
}

// HypedReleaseNEQ applies the NEQ predicate on the "HypedRelease" field.
func HypedReleaseNEQ(v bool) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHypedRelease), v))
	})
}

// UsersRunningEQ applies the EQ predicate on the "UsersRunning" field.
func UsersRunningEQ(v int) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsersRunning), v))
	})
}

// UsersRunningNEQ applies the NEQ predicate on the "UsersRunning" field.
func UsersRunningNEQ(v int) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsersRunning), v))
	})
}

// UsersRunningIn applies the In predicate on the "UsersRunning" field.
func UsersRunningIn(vs ...int) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsersRunning), v...))
	})
}

// UsersRunningNotIn applies the NotIn predicate on the "UsersRunning" field.
func UsersRunningNotIn(vs ...int) predicate.Calendar {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Calendar(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsersRunning), v...))
	})
}

// UsersRunningGT applies the GT predicate on the "UsersRunning" field.
func UsersRunningGT(v int) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsersRunning), v))
	})
}

// UsersRunningGTE applies the GTE predicate on the "UsersRunning" field.
func UsersRunningGTE(v int) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsersRunning), v))
	})
}

// UsersRunningLT applies the LT predicate on the "UsersRunning" field.
func UsersRunningLT(v int) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsersRunning), v))
	})
}

// UsersRunningLTE applies the LTE predicate on the "UsersRunning" field.
func UsersRunningLTE(v int) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsersRunning), v))
	})
}

// HasQuickTask applies the HasEdge predicate on the "QuickTask" edge.
func HasQuickTask() predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuickTaskTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, QuickTaskTable, QuickTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuickTaskWith applies the HasEdge predicate on the "QuickTask" edge with a given conditions (other predicates).
func HasQuickTaskWith(preds ...predicate.Product) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuickTaskInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, QuickTaskTable, QuickTaskColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Calendar) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Calendar) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Calendar) predicate.Calendar {
	return predicate.Calendar(func(s *sql.Selector) {
		p(s.Not())
	})
}
