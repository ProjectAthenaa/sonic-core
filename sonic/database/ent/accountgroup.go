// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/accountgroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/app"
)

// AccountGroup is the model entity for the AccountGroup schema.
type AccountGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Site holds the value of the "Site" field.
	Site accountgroup.Site `json:"Site,omitempty"`
	// Accounts holds the value of the "Accounts" field.
	Accounts sonic.Map `json:"Accounts,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountGroupQuery when eager-loading is set.
	Edges              AccountGroupEdges `json:"edges"`
	app_account_groups *int
}

// AccountGroupEdges holds the relations/edges for other nodes in the graph.
type AccountGroupEdges struct {
	// App holds the value of the App edge.
	App *App `json:"App,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountGroupEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// The edge App was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "App"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountgroup.FieldAccounts:
			values[i] = new(sonic.Map)
		case accountgroup.FieldID:
			values[i] = new(sql.NullInt64)
		case accountgroup.FieldName, accountgroup.FieldSite:
			values[i] = new(sql.NullString)
		case accountgroup.ForeignKeys[0]: // app_account_groups
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccountGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountGroup fields.
func (ag *AccountGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ag.ID = int(value.Int64)
		case accountgroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				ag.Name = value.String
			}
		case accountgroup.FieldSite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Site", values[i])
			} else if value.Valid {
				ag.Site = accountgroup.Site(value.String)
			}
		case accountgroup.FieldAccounts:
			if value, ok := values[i].(*sonic.Map); !ok {
				return fmt.Errorf("unexpected type %T for field Accounts", values[i])
			} else if value != nil {
				ag.Accounts = *value
			}
		case accountgroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field app_account_groups", value)
			} else if value.Valid {
				ag.app_account_groups = new(int)
				*ag.app_account_groups = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryApp queries the "App" edge of the AccountGroup entity.
func (ag *AccountGroup) QueryApp() *AppQuery {
	return (&AccountGroupClient{config: ag.config}).QueryApp(ag)
}

// Update returns a builder for updating this AccountGroup.
// Note that you need to call AccountGroup.Unwrap() before calling this method if this AccountGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (ag *AccountGroup) Update() *AccountGroupUpdateOne {
	return (&AccountGroupClient{config: ag.config}).UpdateOne(ag)
}

// Unwrap unwraps the AccountGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ag *AccountGroup) Unwrap() *AccountGroup {
	tx, ok := ag.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountGroup is not a transactional entity")
	}
	ag.config.driver = tx.drv
	return ag
}

// String implements the fmt.Stringer.
func (ag *AccountGroup) String() string {
	var builder strings.Builder
	builder.WriteString("AccountGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", ag.ID))
	builder.WriteString(", Name=")
	builder.WriteString(ag.Name)
	builder.WriteString(", Site=")
	builder.WriteString(fmt.Sprintf("%v", ag.Site))
	builder.WriteString(", Accounts=")
	builder.WriteString(fmt.Sprintf("%v", ag.Accounts))
	builder.WriteByte(')')
	return builder.String()
}

// AccountGroups is a parsable slice of AccountGroup.
type AccountGroups []*AccountGroup

func (ag AccountGroups) config(cfg config) {
	for _i := range ag {
		ag[_i].config = cfg
	}
}
