// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/product"
	"github.com/lib/pq"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Image holds the value of the "Image" field.
	Image string `json:"Image,omitempty"`
	// LookupType holds the value of the "LookupType" field.
	LookupType product.LookupType `json:"LookupType,omitempty"`
	// PositiveKeywords holds the value of the "PositiveKeywords" field.
	PositiveKeywords pq.StringArray `json:"PositiveKeywords,omitempty"`
	// NegativeKeywords holds the value of the "NegativeKeywords" field.
	NegativeKeywords pq.StringArray `json:"NegativeKeywords,omitempty"`
	// Link holds the value of the "Link" field.
	Link string `json:"Link,omitempty"`
	// Quantity holds the value of the "Quantity" field.
	Quantity int `json:"Quantity,omitempty"`
	// Sizes holds the value of the "Sizes" field.
	Sizes pq.StringArray `json:"Sizes,omitempty"`
	// Colors holds the value of the "Colors" field.
	Colors pq.StringArray `json:"Colors,omitempty"`
	// Site holds the value of the "Site" field.
	Site product.Site `json:"Site,omitempty"`
	// Metadata holds the value of the "Metadata" field.
	Metadata sonic.Map `json:"Metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges ProductEdges `json:"edges"`
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Task holds the value of the Task edge.
	Task []*Task `json:"Task,omitempty"`
	// Statistic holds the value of the Statistic edge.
	Statistic []*Statistic `json:"Statistic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) TaskOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "Task"}
}

// StatisticOrErr returns the Statistic value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) StatisticOrErr() ([]*Statistic, error) {
	if e.loadedTypes[1] {
		return e.Statistic, nil
	}
	return nil, &NotLoadedError{edge: "Statistic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldPositiveKeywords, product.FieldNegativeKeywords, product.FieldSizes, product.FieldColors:
			values[i] = new(pq.StringArray)
		case product.FieldMetadata:
			values[i] = new(sonic.Map)
		case product.FieldID, product.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case product.FieldName, product.FieldImage, product.FieldLookupType, product.FieldLink, product.FieldSite:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Image", values[i])
			} else if value.Valid {
				pr.Image = value.String
			}
		case product.FieldLookupType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LookupType", values[i])
			} else if value.Valid {
				pr.LookupType = product.LookupType(value.String)
			}
		case product.FieldPositiveKeywords:
			if value, ok := values[i].(*pq.StringArray); !ok {
				return fmt.Errorf("unexpected type %T for field PositiveKeywords", values[i])
			} else if value != nil {
				pr.PositiveKeywords = *value
			}
		case product.FieldNegativeKeywords:
			if value, ok := values[i].(*pq.StringArray); !ok {
				return fmt.Errorf("unexpected type %T for field NegativeKeywords", values[i])
			} else if value != nil {
				pr.NegativeKeywords = *value
			}
		case product.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Link", values[i])
			} else if value.Valid {
				pr.Link = value.String
			}
		case product.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Quantity", values[i])
			} else if value.Valid {
				pr.Quantity = int(value.Int64)
			}
		case product.FieldSizes:
			if value, ok := values[i].(*pq.StringArray); !ok {
				return fmt.Errorf("unexpected type %T for field Sizes", values[i])
			} else if value != nil {
				pr.Sizes = *value
			}
		case product.FieldColors:
			if value, ok := values[i].(*pq.StringArray); !ok {
				return fmt.Errorf("unexpected type %T for field Colors", values[i])
			} else if value != nil {
				pr.Colors = *value
			}
		case product.FieldSite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Site", values[i])
			} else if value.Valid {
				pr.Site = product.Site(value.String)
			}
		case product.FieldMetadata:
			if value, ok := values[i].(*sonic.Map); !ok {
				return fmt.Errorf("unexpected type %T for field Metadata", values[i])
			} else if value != nil {
				pr.Metadata = *value
			}
		}
	}
	return nil
}

// QueryTask queries the "Task" edge of the Product entity.
func (pr *Product) QueryTask() *TaskQuery {
	return (&ProductClient{config: pr.config}).QueryTask(pr)
}

// QueryStatistic queries the "Statistic" edge of the Product entity.
func (pr *Product) QueryStatistic() *StatisticQuery {
	return (&ProductClient{config: pr.config}).QueryStatistic(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", Name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", Image=")
	builder.WriteString(pr.Image)
	builder.WriteString(", LookupType=")
	builder.WriteString(fmt.Sprintf("%v", pr.LookupType))
	builder.WriteString(", PositiveKeywords=")
	builder.WriteString(fmt.Sprintf("%v", pr.PositiveKeywords))
	builder.WriteString(", NegativeKeywords=")
	builder.WriteString(fmt.Sprintf("%v", pr.NegativeKeywords))
	builder.WriteString(", Link=")
	builder.WriteString(pr.Link)
	builder.WriteString(", Quantity=")
	builder.WriteString(fmt.Sprintf("%v", pr.Quantity))
	builder.WriteString(", Sizes=")
	builder.WriteString(fmt.Sprintf("%v", pr.Sizes))
	builder.WriteString(", Colors=")
	builder.WriteString(fmt.Sprintf("%v", pr.Colors))
	builder.WriteString(", Site=")
	builder.WriteString(fmt.Sprintf("%v", pr.Site))
	builder.WriteString(", Metadata=")
	builder.WriteString(fmt.Sprintf("%v", pr.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
