// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/calendar"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/product"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/google/uuid"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductCreate) SetCreatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetName sets the "Name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetImage sets the "Image" field.
func (pc *ProductCreate) SetImage(s string) *ProductCreate {
	pc.mutation.SetImage(s)
	return pc
}

// SetNillableImage sets the "Image" field if the given value is not nil.
func (pc *ProductCreate) SetNillableImage(s *string) *ProductCreate {
	if s != nil {
		pc.SetImage(*s)
	}
	return pc
}

// SetLookupType sets the "LookupType" field.
func (pc *ProductCreate) SetLookupType(pt product.LookupType) *ProductCreate {
	pc.mutation.SetLookupType(pt)
	return pc
}

// SetPositiveKeywords sets the "PositiveKeywords" field.
func (pc *ProductCreate) SetPositiveKeywords(s []string) *ProductCreate {
	pc.mutation.SetPositiveKeywords(s)
	return pc
}

// SetNegativeKeywords sets the "NegativeKeywords" field.
func (pc *ProductCreate) SetNegativeKeywords(s []string) *ProductCreate {
	pc.mutation.SetNegativeKeywords(s)
	return pc
}

// SetLink sets the "Link" field.
func (pc *ProductCreate) SetLink(s string) *ProductCreate {
	pc.mutation.SetLink(s)
	return pc
}

// SetNillableLink sets the "Link" field if the given value is not nil.
func (pc *ProductCreate) SetNillableLink(s *string) *ProductCreate {
	if s != nil {
		pc.SetLink(*s)
	}
	return pc
}

// SetQuantity sets the "Quantity" field.
func (pc *ProductCreate) SetQuantity(i int32) *ProductCreate {
	pc.mutation.SetQuantity(i)
	return pc
}

// SetNillableQuantity sets the "Quantity" field if the given value is not nil.
func (pc *ProductCreate) SetNillableQuantity(i *int32) *ProductCreate {
	if i != nil {
		pc.SetQuantity(*i)
	}
	return pc
}

// SetSizes sets the "Sizes" field.
func (pc *ProductCreate) SetSizes(s []string) *ProductCreate {
	pc.mutation.SetSizes(s)
	return pc
}

// SetColors sets the "Colors" field.
func (pc *ProductCreate) SetColors(s []string) *ProductCreate {
	pc.mutation.SetColors(s)
	return pc
}

// SetSite sets the "Site" field.
func (pc *ProductCreate) SetSite(pr product.Site) *ProductCreate {
	pc.mutation.SetSite(pr)
	return pc
}

// SetMetadata sets the "Metadata" field.
func (pc *ProductCreate) SetMetadata(s sonic.Map) *ProductCreate {
	pc.mutation.SetMetadata(s)
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(u uuid.UUID) *ProductCreate {
	pc.mutation.SetID(u)
	return pc
}

// AddTaskIDs adds the "Task" edge to the Task entity by IDs.
func (pc *ProductCreate) AddTaskIDs(ids ...uuid.UUID) *ProductCreate {
	pc.mutation.AddTaskIDs(ids...)
	return pc
}

// AddTask adds the "Task" edges to the Task entity.
func (pc *ProductCreate) AddTask(t ...*Task) *ProductCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskIDs(ids...)
}

// SetCalendarID sets the "Calendar" edge to the Calendar entity by ID.
func (pc *ProductCreate) SetCalendarID(id uuid.UUID) *ProductCreate {
	pc.mutation.SetCalendarID(id)
	return pc
}

// SetNillableCalendarID sets the "Calendar" edge to the Calendar entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableCalendarID(id *uuid.UUID) *ProductCreate {
	if id != nil {
		pc = pc.SetCalendarID(*id)
	}
	return pc
}

// SetCalendar sets the "Calendar" edge to the Calendar entity.
func (pc *ProductCreate) SetCalendar(c *Calendar) *ProductCreate {
	return pc.SetCalendarID(c.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := product.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := product.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Quantity(); !ok {
		v := product.DefaultQuantity
		pc.mutation.SetQuantity(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := product.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Name"`)}
	}
	if _, ok := pc.mutation.LookupType(); !ok {
		return &ValidationError{Name: "LookupType", err: errors.New(`ent: missing required field "LookupType"`)}
	}
	if v, ok := pc.mutation.LookupType(); ok {
		if err := product.LookupTypeValidator(v); err != nil {
			return &ValidationError{Name: "LookupType", err: fmt.Errorf(`ent: validator failed for field "LookupType": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "Quantity", err: errors.New(`ent: missing required field "Quantity"`)}
	}
	if _, ok := pc.mutation.Site(); !ok {
		return &ValidationError{Name: "Site", err: errors.New(`ent: missing required field "Site"`)}
	}
	if v, ok := pc.mutation.Site(); ok {
		if err := product.SiteValidator(v); err != nil {
			return &ValidationError{Name: "Site", err: fmt.Errorf(`ent: validator failed for field "Site": %w`, err)}
		}
	}
	if len(pc.mutation.TaskIDs()) == 0 {
		return &ValidationError{Name: "Task", err: errors.New("ent: missing required edge \"Task\"")}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: product.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := pc.mutation.LookupType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldLookupType,
		})
		_node.LookupType = value
	}
	if value, ok := pc.mutation.PositiveKeywords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: product.FieldPositiveKeywords,
		})
		_node.PositiveKeywords = value
	}
	if value, ok := pc.mutation.NegativeKeywords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: product.FieldNegativeKeywords,
		})
		_node.NegativeKeywords = value
	}
	if value, ok := pc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := pc.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: product.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := pc.mutation.Sizes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: product.FieldSizes,
		})
		_node.Sizes = value
	}
	if value, ok := pc.mutation.Colors(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: product.FieldColors,
		})
		_node.Colors = value
	}
	if value, ok := pc.mutation.Site(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: product.FieldSite,
		})
		_node.Site = value
	}
	if value, ok := pc.mutation.Metadata(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: product.FieldMetadata,
		})
		_node.Metadata = value
	}
	if nodes := pc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.TaskTable,
			Columns: product.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CalendarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.CalendarTable,
			Columns: []string{product.CalendarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: calendar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.calendar_quick_task = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
