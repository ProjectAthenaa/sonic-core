// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ag *AccountGroupQuery) CollectFields(ctx context.Context, satisfies ...string) *AccountGroupQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ag = ag.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ag
}

func (ag *AccountGroupQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AccountGroupQuery {
	return ag
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AddressQuery) CollectFields(ctx context.Context, satisfies ...string) *AddressQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return a
}

func (a *AddressQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AddressQuery {
	return a
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AppQuery) CollectFields(ctx context.Context, satisfies ...string) *AppQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return a
}

func (a *AppQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AppQuery {
	return a
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (b *BillingQuery) CollectFields(ctx context.Context, satisfies ...string) *BillingQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		b = b.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return b
}

func (b *BillingQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *BillingQuery {
	return b
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CalendarQuery) CollectFields(ctx context.Context, satisfies ...string) *CalendarQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *CalendarQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CalendarQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CheckoutQuery) CollectFields(ctx context.Context, satisfies ...string) *CheckoutQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *CheckoutQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CheckoutQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (d *DeviceQuery) CollectFields(ctx context.Context, satisfies ...string) *DeviceQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		d = d.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return d
}

func (d *DeviceQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *DeviceQuery {
	return d
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (l *LicenseQuery) CollectFields(ctx context.Context, satisfies ...string) *LicenseQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		l = l.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return l
}

func (l *LicenseQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *LicenseQuery {
	return l
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MetadataQuery) CollectFields(ctx context.Context, satisfies ...string) *MetadataQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		m = m.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return m
}

func (m *MetadataQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MetadataQuery {
	return m
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProductQuery) CollectFields(ctx context.Context, satisfies ...string) *ProductQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *ProductQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProductQuery {
	return pr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProfileQuery) CollectFields(ctx context.Context, satisfies ...string) *ProfileQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *ProfileQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProfileQuery {
	return pr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pg *ProfileGroupQuery) CollectFields(ctx context.Context, satisfies ...string) *ProfileGroupQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pg = pg.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pg
}

func (pg *ProfileGroupQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProfileGroupQuery {
	return pg
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProxyQuery) CollectFields(ctx context.Context, satisfies ...string) *ProxyQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *ProxyQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProxyQuery {
	return pr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pl *ProxyListQuery) CollectFields(ctx context.Context, satisfies ...string) *ProxyListQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pl = pl.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pl
}

func (pl *ProxyListQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ProxyListQuery {
	return pl
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *ReleaseQuery) CollectFields(ctx context.Context, satisfies ...string) *ReleaseQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *ReleaseQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ReleaseQuery {
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SessionQuery) CollectFields(ctx context.Context, satisfies ...string) *SessionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *SessionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *SessionQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SettingsQuery) CollectFields(ctx context.Context, satisfies ...string) *SettingsQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *SettingsQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *SettingsQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *ShippingQuery) CollectFields(ctx context.Context, satisfies ...string) *ShippingQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *ShippingQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ShippingQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StripeQuery) CollectFields(ctx context.Context, satisfies ...string) *StripeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *StripeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *StripeQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TaskQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TaskQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskQuery {
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tg *TaskGroupQuery) CollectFields(ctx context.Context, satisfies ...string) *TaskGroupQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tg = tg.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tg
}

func (tg *TaskGroupQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TaskGroupQuery {
	return tg
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	return u
}
