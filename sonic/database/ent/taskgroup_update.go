// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/taskgroup"
)

// TaskGroupUpdate is the builder for updating TaskGroup entities.
type TaskGroupUpdate struct {
	config
	hooks    []Hook
	mutation *TaskGroupMutation
}

// Where adds a new predicate for the TaskGroupUpdate builder.
func (tgu *TaskGroupUpdate) Where(ps ...predicate.TaskGroup) *TaskGroupUpdate {
	tgu.mutation.predicates = append(tgu.mutation.predicates, ps...)
	return tgu
}

// SetName sets the "Name" field.
func (tgu *TaskGroupUpdate) SetName(s string) *TaskGroupUpdate {
	tgu.mutation.SetName(s)
	return tgu
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (tgu *TaskGroupUpdate) AddAppIDs(ids ...int) *TaskGroupUpdate {
	tgu.mutation.AddAppIDs(ids...)
	return tgu
}

// AddApp adds the "App" edges to the App entity.
func (tgu *TaskGroupUpdate) AddApp(a ...*App) *TaskGroupUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tgu.AddAppIDs(ids...)
}

// AddTaskIDs adds the "Tasks" edge to the Task entity by IDs.
func (tgu *TaskGroupUpdate) AddTaskIDs(ids ...int) *TaskGroupUpdate {
	tgu.mutation.AddTaskIDs(ids...)
	return tgu
}

// AddTasks adds the "Tasks" edges to the Task entity.
func (tgu *TaskGroupUpdate) AddTasks(t ...*Task) *TaskGroupUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgu.AddTaskIDs(ids...)
}

// Mutation returns the TaskGroupMutation object of the builder.
func (tgu *TaskGroupUpdate) Mutation() *TaskGroupMutation {
	return tgu.mutation
}

// ClearApp clears all "App" edges to the App entity.
func (tgu *TaskGroupUpdate) ClearApp() *TaskGroupUpdate {
	tgu.mutation.ClearApp()
	return tgu
}

// RemoveAppIDs removes the "App" edge to App entities by IDs.
func (tgu *TaskGroupUpdate) RemoveAppIDs(ids ...int) *TaskGroupUpdate {
	tgu.mutation.RemoveAppIDs(ids...)
	return tgu
}

// RemoveApp removes "App" edges to App entities.
func (tgu *TaskGroupUpdate) RemoveApp(a ...*App) *TaskGroupUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tgu.RemoveAppIDs(ids...)
}

// ClearTasks clears all "Tasks" edges to the Task entity.
func (tgu *TaskGroupUpdate) ClearTasks() *TaskGroupUpdate {
	tgu.mutation.ClearTasks()
	return tgu
}

// RemoveTaskIDs removes the "Tasks" edge to Task entities by IDs.
func (tgu *TaskGroupUpdate) RemoveTaskIDs(ids ...int) *TaskGroupUpdate {
	tgu.mutation.RemoveTaskIDs(ids...)
	return tgu
}

// RemoveTasks removes "Tasks" edges to Task entities.
func (tgu *TaskGroupUpdate) RemoveTasks(t ...*Task) *TaskGroupUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tgu *TaskGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tgu.hooks) == 0 {
		affected, err = tgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tgu.mutation = mutation
			affected, err = tgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tgu.hooks) - 1; i >= 0; i-- {
			mut = tgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tgu *TaskGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := tgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tgu *TaskGroupUpdate) Exec(ctx context.Context) error {
	_, err := tgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgu *TaskGroupUpdate) ExecX(ctx context.Context) {
	if err := tgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tgu *TaskGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskgroup.Table,
			Columns: taskgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskgroup.FieldID,
			},
		},
	}
	if ps := tgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tgu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskgroup.FieldName,
		})
	}
	if tgu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   taskgroup.AppTable,
			Columns: taskgroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgu.mutation.RemovedAppIDs(); len(nodes) > 0 && !tgu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   taskgroup.AppTable,
			Columns: taskgroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   taskgroup.AppTable,
			Columns: taskgroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tgu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskgroup.TasksTable,
			Columns: taskgroup.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tgu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskgroup.TasksTable,
			Columns: taskgroup.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskgroup.TasksTable,
			Columns: taskgroup.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskgroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TaskGroupUpdateOne is the builder for updating a single TaskGroup entity.
type TaskGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskGroupMutation
}

// SetName sets the "Name" field.
func (tguo *TaskGroupUpdateOne) SetName(s string) *TaskGroupUpdateOne {
	tguo.mutation.SetName(s)
	return tguo
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (tguo *TaskGroupUpdateOne) AddAppIDs(ids ...int) *TaskGroupUpdateOne {
	tguo.mutation.AddAppIDs(ids...)
	return tguo
}

// AddApp adds the "App" edges to the App entity.
func (tguo *TaskGroupUpdateOne) AddApp(a ...*App) *TaskGroupUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tguo.AddAppIDs(ids...)
}

// AddTaskIDs adds the "Tasks" edge to the Task entity by IDs.
func (tguo *TaskGroupUpdateOne) AddTaskIDs(ids ...int) *TaskGroupUpdateOne {
	tguo.mutation.AddTaskIDs(ids...)
	return tguo
}

// AddTasks adds the "Tasks" edges to the Task entity.
func (tguo *TaskGroupUpdateOne) AddTasks(t ...*Task) *TaskGroupUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tguo.AddTaskIDs(ids...)
}

// Mutation returns the TaskGroupMutation object of the builder.
func (tguo *TaskGroupUpdateOne) Mutation() *TaskGroupMutation {
	return tguo.mutation
}

// ClearApp clears all "App" edges to the App entity.
func (tguo *TaskGroupUpdateOne) ClearApp() *TaskGroupUpdateOne {
	tguo.mutation.ClearApp()
	return tguo
}

// RemoveAppIDs removes the "App" edge to App entities by IDs.
func (tguo *TaskGroupUpdateOne) RemoveAppIDs(ids ...int) *TaskGroupUpdateOne {
	tguo.mutation.RemoveAppIDs(ids...)
	return tguo
}

// RemoveApp removes "App" edges to App entities.
func (tguo *TaskGroupUpdateOne) RemoveApp(a ...*App) *TaskGroupUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tguo.RemoveAppIDs(ids...)
}

// ClearTasks clears all "Tasks" edges to the Task entity.
func (tguo *TaskGroupUpdateOne) ClearTasks() *TaskGroupUpdateOne {
	tguo.mutation.ClearTasks()
	return tguo
}

// RemoveTaskIDs removes the "Tasks" edge to Task entities by IDs.
func (tguo *TaskGroupUpdateOne) RemoveTaskIDs(ids ...int) *TaskGroupUpdateOne {
	tguo.mutation.RemoveTaskIDs(ids...)
	return tguo
}

// RemoveTasks removes "Tasks" edges to Task entities.
func (tguo *TaskGroupUpdateOne) RemoveTasks(t ...*Task) *TaskGroupUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tguo.RemoveTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tguo *TaskGroupUpdateOne) Select(field string, fields ...string) *TaskGroupUpdateOne {
	tguo.fields = append([]string{field}, fields...)
	return tguo
}

// Save executes the query and returns the updated TaskGroup entity.
func (tguo *TaskGroupUpdateOne) Save(ctx context.Context) (*TaskGroup, error) {
	var (
		err  error
		node *TaskGroup
	)
	if len(tguo.hooks) == 0 {
		node, err = tguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tguo.mutation = mutation
			node, err = tguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tguo.hooks) - 1; i >= 0; i-- {
			mut = tguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tguo *TaskGroupUpdateOne) SaveX(ctx context.Context) *TaskGroup {
	node, err := tguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tguo *TaskGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := tguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tguo *TaskGroupUpdateOne) ExecX(ctx context.Context) {
	if err := tguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tguo *TaskGroupUpdateOne) sqlSave(ctx context.Context) (_node *TaskGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskgroup.Table,
			Columns: taskgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskgroup.FieldID,
			},
		},
	}
	id, ok := tguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TaskGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskgroup.FieldID)
		for _, f := range fields {
			if !taskgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskgroup.FieldName,
		})
	}
	if tguo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   taskgroup.AppTable,
			Columns: taskgroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tguo.mutation.RemovedAppIDs(); len(nodes) > 0 && !tguo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   taskgroup.AppTable,
			Columns: taskgroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tguo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   taskgroup.AppTable,
			Columns: taskgroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tguo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskgroup.TasksTable,
			Columns: taskgroup.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tguo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tguo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskgroup.TasksTable,
			Columns: taskgroup.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tguo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskgroup.TasksTable,
			Columns: taskgroup.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskGroup{config: tguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskgroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
