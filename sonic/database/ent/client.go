// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/migrate"

	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/accountgroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/address"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/billing"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/product"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/profile"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/profilegroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/proxy"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/proxylist"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/settings"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/shipping"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/statistic"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/stripe"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/task"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/taskgroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccountGroup is the client for interacting with the AccountGroup builders.
	AccountGroup *AccountGroupClient
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// App is the client for interacting with the App builders.
	App *AppClient
	// Billing is the client for interacting with the Billing builders.
	Billing *BillingClient
	// License is the client for interacting with the License builders.
	License *LicenseClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// Profile is the client for interacting with the Profile builders.
	Profile *ProfileClient
	// ProfileGroup is the client for interacting with the ProfileGroup builders.
	ProfileGroup *ProfileGroupClient
	// Proxy is the client for interacting with the Proxy builders.
	Proxy *ProxyClient
	// ProxyList is the client for interacting with the ProxyList builders.
	ProxyList *ProxyListClient
	// Settings is the client for interacting with the Settings builders.
	Settings *SettingsClient
	// Shipping is the client for interacting with the Shipping builders.
	Shipping *ShippingClient
	// Statistic is the client for interacting with the Statistic builders.
	Statistic *StatisticClient
	// Stripe is the client for interacting with the Stripe builders.
	Stripe *StripeClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// TaskGroup is the client for interacting with the TaskGroup builders.
	TaskGroup *TaskGroupClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccountGroup = NewAccountGroupClient(c.config)
	c.Address = NewAddressClient(c.config)
	c.App = NewAppClient(c.config)
	c.Billing = NewBillingClient(c.config)
	c.License = NewLicenseClient(c.config)
	c.Product = NewProductClient(c.config)
	c.Profile = NewProfileClient(c.config)
	c.ProfileGroup = NewProfileGroupClient(c.config)
	c.Proxy = NewProxyClient(c.config)
	c.ProxyList = NewProxyListClient(c.config)
	c.Settings = NewSettingsClient(c.config)
	c.Shipping = NewShippingClient(c.config)
	c.Statistic = NewStatisticClient(c.config)
	c.Stripe = NewStripeClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.TaskGroup = NewTaskGroupClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AccountGroup: NewAccountGroupClient(cfg),
		Address:      NewAddressClient(cfg),
		App:          NewAppClient(cfg),
		Billing:      NewBillingClient(cfg),
		License:      NewLicenseClient(cfg),
		Product:      NewProductClient(cfg),
		Profile:      NewProfileClient(cfg),
		ProfileGroup: NewProfileGroupClient(cfg),
		Proxy:        NewProxyClient(cfg),
		ProxyList:    NewProxyListClient(cfg),
		Settings:     NewSettingsClient(cfg),
		Shipping:     NewShippingClient(cfg),
		Statistic:    NewStatisticClient(cfg),
		Stripe:       NewStripeClient(cfg),
		Task:         NewTaskClient(cfg),
		TaskGroup:    NewTaskGroupClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:       cfg,
		AccountGroup: NewAccountGroupClient(cfg),
		Address:      NewAddressClient(cfg),
		App:          NewAppClient(cfg),
		Billing:      NewBillingClient(cfg),
		License:      NewLicenseClient(cfg),
		Product:      NewProductClient(cfg),
		Profile:      NewProfileClient(cfg),
		ProfileGroup: NewProfileGroupClient(cfg),
		Proxy:        NewProxyClient(cfg),
		ProxyList:    NewProxyListClient(cfg),
		Settings:     NewSettingsClient(cfg),
		Shipping:     NewShippingClient(cfg),
		Statistic:    NewStatisticClient(cfg),
		Stripe:       NewStripeClient(cfg),
		Task:         NewTaskClient(cfg),
		TaskGroup:    NewTaskGroupClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccountGroup.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AccountGroup.Use(hooks...)
	c.Address.Use(hooks...)
	c.App.Use(hooks...)
	c.Billing.Use(hooks...)
	c.License.Use(hooks...)
	c.Product.Use(hooks...)
	c.Profile.Use(hooks...)
	c.ProfileGroup.Use(hooks...)
	c.Proxy.Use(hooks...)
	c.ProxyList.Use(hooks...)
	c.Settings.Use(hooks...)
	c.Shipping.Use(hooks...)
	c.Statistic.Use(hooks...)
	c.Stripe.Use(hooks...)
	c.Task.Use(hooks...)
	c.TaskGroup.Use(hooks...)
	c.User.Use(hooks...)
}

// AccountGroupClient is a client for the AccountGroup schema.
type AccountGroupClient struct {
	config
}

// NewAccountGroupClient returns a client for the AccountGroup from the given config.
func NewAccountGroupClient(c config) *AccountGroupClient {
	return &AccountGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accountgroup.Hooks(f(g(h())))`.
func (c *AccountGroupClient) Use(hooks ...Hook) {
	c.hooks.AccountGroup = append(c.hooks.AccountGroup, hooks...)
}

// Create returns a create builder for AccountGroup.
func (c *AccountGroupClient) Create() *AccountGroupCreate {
	mutation := newAccountGroupMutation(c.config, OpCreate)
	return &AccountGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccountGroup entities.
func (c *AccountGroupClient) CreateBulk(builders ...*AccountGroupCreate) *AccountGroupCreateBulk {
	return &AccountGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccountGroup.
func (c *AccountGroupClient) Update() *AccountGroupUpdate {
	mutation := newAccountGroupMutation(c.config, OpUpdate)
	return &AccountGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountGroupClient) UpdateOne(ag *AccountGroup) *AccountGroupUpdateOne {
	mutation := newAccountGroupMutation(c.config, OpUpdateOne, withAccountGroup(ag))
	return &AccountGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountGroupClient) UpdateOneID(id int) *AccountGroupUpdateOne {
	mutation := newAccountGroupMutation(c.config, OpUpdateOne, withAccountGroupID(id))
	return &AccountGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccountGroup.
func (c *AccountGroupClient) Delete() *AccountGroupDelete {
	mutation := newAccountGroupMutation(c.config, OpDelete)
	return &AccountGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AccountGroupClient) DeleteOne(ag *AccountGroup) *AccountGroupDeleteOne {
	return c.DeleteOneID(ag.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AccountGroupClient) DeleteOneID(id int) *AccountGroupDeleteOne {
	builder := c.Delete().Where(accountgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountGroupDeleteOne{builder}
}

// Query returns a query builder for AccountGroup.
func (c *AccountGroupClient) Query() *AccountGroupQuery {
	return &AccountGroupQuery{
		config: c.config,
	}
}

// Get returns a AccountGroup entity by its id.
func (c *AccountGroupClient) Get(ctx context.Context, id int) (*AccountGroup, error) {
	return c.Query().Where(accountgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountGroupClient) GetX(ctx context.Context, id int) *AccountGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the App edge of a AccountGroup.
func (c *AccountGroupClient) QueryApp(ag *AccountGroup) *AppQuery {
	query := &AppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accountgroup.Table, accountgroup.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountgroup.AppTable, accountgroup.AppColumn),
		)
		fromV = sqlgraph.Neighbors(ag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountGroupClient) Hooks() []Hook {
	return c.hooks.AccountGroup
}

// AddressClient is a client for the Address schema.
type AddressClient struct {
	config
}

// NewAddressClient returns a client for the Address from the given config.
func NewAddressClient(c config) *AddressClient {
	return &AddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `address.Hooks(f(g(h())))`.
func (c *AddressClient) Use(hooks ...Hook) {
	c.hooks.Address = append(c.hooks.Address, hooks...)
}

// Create returns a create builder for Address.
func (c *AddressClient) Create() *AddressCreate {
	mutation := newAddressMutation(c.config, OpCreate)
	return &AddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Address entities.
func (c *AddressClient) CreateBulk(builders ...*AddressCreate) *AddressCreateBulk {
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Address.
func (c *AddressClient) Update() *AddressUpdate {
	mutation := newAddressMutation(c.config, OpUpdate)
	return &AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressClient) UpdateOne(a *Address) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddress(a))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressClient) UpdateOneID(id int) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddressID(id))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Address.
func (c *AddressClient) Delete() *AddressDelete {
	mutation := newAddressMutation(c.config, OpDelete)
	return &AddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AddressClient) DeleteOne(a *Address) *AddressDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AddressClient) DeleteOneID(id int) *AddressDeleteOne {
	builder := c.Delete().Where(address.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressDeleteOne{builder}
}

// Query returns a query builder for Address.
func (c *AddressClient) Query() *AddressQuery {
	return &AddressQuery{
		config: c.config,
	}
}

// Get returns a Address entity by its id.
func (c *AddressClient) Get(ctx context.Context, id int) (*Address, error) {
	return c.Query().Where(address.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressClient) GetX(ctx context.Context, id int) *Address {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShippingAddress queries the ShippingAddress edge of a Address.
func (c *AddressClient) QueryShippingAddress(a *Address) *ShippingQuery {
	query := &ShippingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(shipping.Table, shipping.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, address.ShippingAddressTable, address.ShippingAddressPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingAddress queries the BillingAddress edge of a Address.
func (c *AddressClient) QueryBillingAddress(a *Address) *ShippingQuery {
	query := &ShippingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(shipping.Table, shipping.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, address.BillingAddressTable, address.BillingAddressPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressClient) Hooks() []Hook {
	return c.hooks.Address
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `app.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Create returns a create builder for App.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id int) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppClient) DeleteOneID(id int) *AppDeleteOne {
	builder := c.Delete().Where(app.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id int) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id int) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the User edge of a App.
func (c *AppClient) QueryUser(a *App) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, app.UserTable, app.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySettings queries the Settings edge of a App.
func (c *AppClient) QuerySettings(a *App) *SettingsQuery {
	query := &SettingsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(settings.Table, settings.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.SettingsTable, app.SettingsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProxyLists queries the ProxyLists edge of a App.
func (c *AppClient) QueryProxyLists(a *App) *ProxyListQuery {
	query := &ProxyListQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(proxylist.Table, proxylist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, app.ProxyListsTable, app.ProxyListsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfileGroups queries the ProfileGroups edge of a App.
func (c *AppClient) QueryProfileGroups(a *App) *ProfileGroupQuery {
	query := &ProfileGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(profilegroup.Table, profilegroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, app.ProfileGroupsTable, app.ProfileGroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskGroups queries the TaskGroups edge of a App.
func (c *AppClient) QueryTaskGroups(a *App) *TaskGroupQuery {
	query := &TaskGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(taskgroup.Table, taskgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, app.TaskGroupsTable, app.TaskGroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccountGroups queries the AccountGroups edge of a App.
func (c *AppClient) QueryAccountGroups(a *App) *AccountGroupQuery {
	query := &AccountGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(accountgroup.Table, accountgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.AccountGroupsTable, app.AccountGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	return c.hooks.App
}

// BillingClient is a client for the Billing schema.
type BillingClient struct {
	config
}

// NewBillingClient returns a client for the Billing from the given config.
func NewBillingClient(c config) *BillingClient {
	return &BillingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billing.Hooks(f(g(h())))`.
func (c *BillingClient) Use(hooks ...Hook) {
	c.hooks.Billing = append(c.hooks.Billing, hooks...)
}

// Create returns a create builder for Billing.
func (c *BillingClient) Create() *BillingCreate {
	mutation := newBillingMutation(c.config, OpCreate)
	return &BillingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Billing entities.
func (c *BillingClient) CreateBulk(builders ...*BillingCreate) *BillingCreateBulk {
	return &BillingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Billing.
func (c *BillingClient) Update() *BillingUpdate {
	mutation := newBillingMutation(c.config, OpUpdate)
	return &BillingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingClient) UpdateOne(b *Billing) *BillingUpdateOne {
	mutation := newBillingMutation(c.config, OpUpdateOne, withBilling(b))
	return &BillingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingClient) UpdateOneID(id int) *BillingUpdateOne {
	mutation := newBillingMutation(c.config, OpUpdateOne, withBillingID(id))
	return &BillingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Billing.
func (c *BillingClient) Delete() *BillingDelete {
	mutation := newBillingMutation(c.config, OpDelete)
	return &BillingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillingClient) DeleteOne(b *Billing) *BillingDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillingClient) DeleteOneID(id int) *BillingDeleteOne {
	builder := c.Delete().Where(billing.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingDeleteOne{builder}
}

// Query returns a query builder for Billing.
func (c *BillingClient) Query() *BillingQuery {
	return &BillingQuery{
		config: c.config,
	}
}

// Get returns a Billing entity by its id.
func (c *BillingClient) Get(ctx context.Context, id int) (*Billing, error) {
	return c.Query().Where(billing.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingClient) GetX(ctx context.Context, id int) *Billing {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the Profile edge of a Billing.
func (c *BillingClient) QueryProfile(b *Billing) *ProfileQuery {
	query := &ProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billing.Table, billing.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, billing.ProfileTable, billing.ProfilePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingClient) Hooks() []Hook {
	return c.hooks.Billing
}

// LicenseClient is a client for the License schema.
type LicenseClient struct {
	config
}

// NewLicenseClient returns a client for the License from the given config.
func NewLicenseClient(c config) *LicenseClient {
	return &LicenseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `license.Hooks(f(g(h())))`.
func (c *LicenseClient) Use(hooks ...Hook) {
	c.hooks.License = append(c.hooks.License, hooks...)
}

// Create returns a create builder for License.
func (c *LicenseClient) Create() *LicenseCreate {
	mutation := newLicenseMutation(c.config, OpCreate)
	return &LicenseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of License entities.
func (c *LicenseClient) CreateBulk(builders ...*LicenseCreate) *LicenseCreateBulk {
	return &LicenseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for License.
func (c *LicenseClient) Update() *LicenseUpdate {
	mutation := newLicenseMutation(c.config, OpUpdate)
	return &LicenseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LicenseClient) UpdateOne(l *License) *LicenseUpdateOne {
	mutation := newLicenseMutation(c.config, OpUpdateOne, withLicense(l))
	return &LicenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LicenseClient) UpdateOneID(id int) *LicenseUpdateOne {
	mutation := newLicenseMutation(c.config, OpUpdateOne, withLicenseID(id))
	return &LicenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for License.
func (c *LicenseClient) Delete() *LicenseDelete {
	mutation := newLicenseMutation(c.config, OpDelete)
	return &LicenseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LicenseClient) DeleteOne(l *License) *LicenseDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LicenseClient) DeleteOneID(id int) *LicenseDeleteOne {
	builder := c.Delete().Where(license.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LicenseDeleteOne{builder}
}

// Query returns a query builder for License.
func (c *LicenseClient) Query() *LicenseQuery {
	return &LicenseQuery{
		config: c.config,
	}
}

// Get returns a License entity by its id.
func (c *LicenseClient) Get(ctx context.Context, id int) (*License, error) {
	return c.Query().Where(license.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LicenseClient) GetX(ctx context.Context, id int) *License {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the User edge of a License.
func (c *LicenseClient) QueryUser(l *License) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(license.Table, license.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, license.UserTable, license.UserColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStripe queries the Stripe edge of a License.
func (c *LicenseClient) QueryStripe(l *License) *StripeQuery {
	query := &StripeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(license.Table, license.FieldID, id),
			sqlgraph.To(stripe.Table, stripe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, license.StripeTable, license.StripeColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LicenseClient) Hooks() []Hook {
	return c.hooks.License
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a create builder for Product.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the Task edge of a Product.
func (c *ProductClient) QueryTask(pr *Product) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, product.TaskTable, product.TaskPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatistic queries the Statistic edge of a Product.
func (c *ProductClient) QueryStatistic(pr *Product) *StatisticQuery {
	query := &StatisticQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(statistic.Table, statistic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, product.StatisticTable, product.StatisticPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// ProfileClient is a client for the Profile schema.
type ProfileClient struct {
	config
}

// NewProfileClient returns a client for the Profile from the given config.
func NewProfileClient(c config) *ProfileClient {
	return &ProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profile.Hooks(f(g(h())))`.
func (c *ProfileClient) Use(hooks ...Hook) {
	c.hooks.Profile = append(c.hooks.Profile, hooks...)
}

// Create returns a create builder for Profile.
func (c *ProfileClient) Create() *ProfileCreate {
	mutation := newProfileMutation(c.config, OpCreate)
	return &ProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Profile entities.
func (c *ProfileClient) CreateBulk(builders ...*ProfileCreate) *ProfileCreateBulk {
	return &ProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Profile.
func (c *ProfileClient) Update() *ProfileUpdate {
	mutation := newProfileMutation(c.config, OpUpdate)
	return &ProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfileClient) UpdateOne(pr *Profile) *ProfileUpdateOne {
	mutation := newProfileMutation(c.config, OpUpdateOne, withProfile(pr))
	return &ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfileClient) UpdateOneID(id int) *ProfileUpdateOne {
	mutation := newProfileMutation(c.config, OpUpdateOne, withProfileID(id))
	return &ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Profile.
func (c *ProfileClient) Delete() *ProfileDelete {
	mutation := newProfileMutation(c.config, OpDelete)
	return &ProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProfileClient) DeleteOne(pr *Profile) *ProfileDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProfileClient) DeleteOneID(id int) *ProfileDeleteOne {
	builder := c.Delete().Where(profile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfileDeleteOne{builder}
}

// Query returns a query builder for Profile.
func (c *ProfileClient) Query() *ProfileQuery {
	return &ProfileQuery{
		config: c.config,
	}
}

// Get returns a Profile entity by its id.
func (c *ProfileClient) Get(ctx context.Context, id int) (*Profile, error) {
	return c.Query().Where(profile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfileClient) GetX(ctx context.Context, id int) *Profile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfileGroup queries the ProfileGroup edge of a Profile.
func (c *ProfileClient) QueryProfileGroup(pr *Profile) *ProfileGroupQuery {
	query := &ProfileGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(profilegroup.Table, profilegroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, profile.ProfileGroupTable, profile.ProfileGroupColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipping queries the Shipping edge of a Profile.
func (c *ProfileClient) QueryShipping(pr *Profile) *ShippingQuery {
	query := &ShippingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(shipping.Table, shipping.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profile.ShippingTable, profile.ShippingColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBilling queries the Billing edge of a Profile.
func (c *ProfileClient) QueryBilling(pr *Profile) *BillingQuery {
	query := &BillingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(billing.Table, billing.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, profile.BillingTable, profile.BillingPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProfileClient) Hooks() []Hook {
	return c.hooks.Profile
}

// ProfileGroupClient is a client for the ProfileGroup schema.
type ProfileGroupClient struct {
	config
}

// NewProfileGroupClient returns a client for the ProfileGroup from the given config.
func NewProfileGroupClient(c config) *ProfileGroupClient {
	return &ProfileGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profilegroup.Hooks(f(g(h())))`.
func (c *ProfileGroupClient) Use(hooks ...Hook) {
	c.hooks.ProfileGroup = append(c.hooks.ProfileGroup, hooks...)
}

// Create returns a create builder for ProfileGroup.
func (c *ProfileGroupClient) Create() *ProfileGroupCreate {
	mutation := newProfileGroupMutation(c.config, OpCreate)
	return &ProfileGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProfileGroup entities.
func (c *ProfileGroupClient) CreateBulk(builders ...*ProfileGroupCreate) *ProfileGroupCreateBulk {
	return &ProfileGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProfileGroup.
func (c *ProfileGroupClient) Update() *ProfileGroupUpdate {
	mutation := newProfileGroupMutation(c.config, OpUpdate)
	return &ProfileGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfileGroupClient) UpdateOne(pg *ProfileGroup) *ProfileGroupUpdateOne {
	mutation := newProfileGroupMutation(c.config, OpUpdateOne, withProfileGroup(pg))
	return &ProfileGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfileGroupClient) UpdateOneID(id int) *ProfileGroupUpdateOne {
	mutation := newProfileGroupMutation(c.config, OpUpdateOne, withProfileGroupID(id))
	return &ProfileGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProfileGroup.
func (c *ProfileGroupClient) Delete() *ProfileGroupDelete {
	mutation := newProfileGroupMutation(c.config, OpDelete)
	return &ProfileGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProfileGroupClient) DeleteOne(pg *ProfileGroup) *ProfileGroupDeleteOne {
	return c.DeleteOneID(pg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProfileGroupClient) DeleteOneID(id int) *ProfileGroupDeleteOne {
	builder := c.Delete().Where(profilegroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfileGroupDeleteOne{builder}
}

// Query returns a query builder for ProfileGroup.
func (c *ProfileGroupClient) Query() *ProfileGroupQuery {
	return &ProfileGroupQuery{
		config: c.config,
	}
}

// Get returns a ProfileGroup entity by its id.
func (c *ProfileGroupClient) Get(ctx context.Context, id int) (*ProfileGroup, error) {
	return c.Query().Where(profilegroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfileGroupClient) GetX(ctx context.Context, id int) *ProfileGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfiles queries the Profiles edge of a ProfileGroup.
func (c *ProfileGroupClient) QueryProfiles(pg *ProfileGroup) *ProfileQuery {
	query := &ProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profilegroup.Table, profilegroup.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, profilegroup.ProfilesTable, profilegroup.ProfilesColumn),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the App edge of a ProfileGroup.
func (c *ProfileGroupClient) QueryApp(pg *ProfileGroup) *AppQuery {
	query := &AppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profilegroup.Table, profilegroup.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, profilegroup.AppTable, profilegroup.AppPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the Task edge of a ProfileGroup.
func (c *ProfileGroupClient) QueryTask(pg *ProfileGroup) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profilegroup.Table, profilegroup.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, profilegroup.TaskTable, profilegroup.TaskPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProfileGroupClient) Hooks() []Hook {
	return c.hooks.ProfileGroup
}

// ProxyClient is a client for the Proxy schema.
type ProxyClient struct {
	config
}

// NewProxyClient returns a client for the Proxy from the given config.
func NewProxyClient(c config) *ProxyClient {
	return &ProxyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proxy.Hooks(f(g(h())))`.
func (c *ProxyClient) Use(hooks ...Hook) {
	c.hooks.Proxy = append(c.hooks.Proxy, hooks...)
}

// Create returns a create builder for Proxy.
func (c *ProxyClient) Create() *ProxyCreate {
	mutation := newProxyMutation(c.config, OpCreate)
	return &ProxyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Proxy entities.
func (c *ProxyClient) CreateBulk(builders ...*ProxyCreate) *ProxyCreateBulk {
	return &ProxyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Proxy.
func (c *ProxyClient) Update() *ProxyUpdate {
	mutation := newProxyMutation(c.config, OpUpdate)
	return &ProxyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProxyClient) UpdateOne(pr *Proxy) *ProxyUpdateOne {
	mutation := newProxyMutation(c.config, OpUpdateOne, withProxy(pr))
	return &ProxyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProxyClient) UpdateOneID(id int) *ProxyUpdateOne {
	mutation := newProxyMutation(c.config, OpUpdateOne, withProxyID(id))
	return &ProxyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Proxy.
func (c *ProxyClient) Delete() *ProxyDelete {
	mutation := newProxyMutation(c.config, OpDelete)
	return &ProxyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProxyClient) DeleteOne(pr *Proxy) *ProxyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProxyClient) DeleteOneID(id int) *ProxyDeleteOne {
	builder := c.Delete().Where(proxy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProxyDeleteOne{builder}
}

// Query returns a query builder for Proxy.
func (c *ProxyClient) Query() *ProxyQuery {
	return &ProxyQuery{
		config: c.config,
	}
}

// Get returns a Proxy entity by its id.
func (c *ProxyClient) Get(ctx context.Context, id int) (*Proxy, error) {
	return c.Query().Where(proxy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProxyClient) GetX(ctx context.Context, id int) *Proxy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProxyList queries the ProxyList edge of a Proxy.
func (c *ProxyClient) QueryProxyList(pr *Proxy) *ProxyListQuery {
	query := &ProxyListQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proxy.Table, proxy.FieldID, id),
			sqlgraph.To(proxylist.Table, proxylist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, proxy.ProxyListTable, proxy.ProxyListColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProxyClient) Hooks() []Hook {
	return c.hooks.Proxy
}

// ProxyListClient is a client for the ProxyList schema.
type ProxyListClient struct {
	config
}

// NewProxyListClient returns a client for the ProxyList from the given config.
func NewProxyListClient(c config) *ProxyListClient {
	return &ProxyListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proxylist.Hooks(f(g(h())))`.
func (c *ProxyListClient) Use(hooks ...Hook) {
	c.hooks.ProxyList = append(c.hooks.ProxyList, hooks...)
}

// Create returns a create builder for ProxyList.
func (c *ProxyListClient) Create() *ProxyListCreate {
	mutation := newProxyListMutation(c.config, OpCreate)
	return &ProxyListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProxyList entities.
func (c *ProxyListClient) CreateBulk(builders ...*ProxyListCreate) *ProxyListCreateBulk {
	return &ProxyListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProxyList.
func (c *ProxyListClient) Update() *ProxyListUpdate {
	mutation := newProxyListMutation(c.config, OpUpdate)
	return &ProxyListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProxyListClient) UpdateOne(pl *ProxyList) *ProxyListUpdateOne {
	mutation := newProxyListMutation(c.config, OpUpdateOne, withProxyList(pl))
	return &ProxyListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProxyListClient) UpdateOneID(id int) *ProxyListUpdateOne {
	mutation := newProxyListMutation(c.config, OpUpdateOne, withProxyListID(id))
	return &ProxyListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProxyList.
func (c *ProxyListClient) Delete() *ProxyListDelete {
	mutation := newProxyListMutation(c.config, OpDelete)
	return &ProxyListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProxyListClient) DeleteOne(pl *ProxyList) *ProxyListDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProxyListClient) DeleteOneID(id int) *ProxyListDeleteOne {
	builder := c.Delete().Where(proxylist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProxyListDeleteOne{builder}
}

// Query returns a query builder for ProxyList.
func (c *ProxyListClient) Query() *ProxyListQuery {
	return &ProxyListQuery{
		config: c.config,
	}
}

// Get returns a ProxyList entity by its id.
func (c *ProxyListClient) Get(ctx context.Context, id int) (*ProxyList, error) {
	return c.Query().Where(proxylist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProxyListClient) GetX(ctx context.Context, id int) *ProxyList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the App edge of a ProxyList.
func (c *ProxyListClient) QueryApp(pl *ProxyList) *AppQuery {
	query := &AppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proxylist.Table, proxylist.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proxylist.AppTable, proxylist.AppPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProxies queries the Proxies edge of a ProxyList.
func (c *ProxyListClient) QueryProxies(pl *ProxyList) *ProxyQuery {
	query := &ProxyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proxylist.Table, proxylist.FieldID, id),
			sqlgraph.To(proxy.Table, proxy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, proxylist.ProxiesTable, proxylist.ProxiesColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the Task edge of a ProxyList.
func (c *ProxyListClient) QueryTask(pl *ProxyList) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proxylist.Table, proxylist.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, proxylist.TaskTable, proxylist.TaskPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProxyListClient) Hooks() []Hook {
	return c.hooks.ProxyList
}

// SettingsClient is a client for the Settings schema.
type SettingsClient struct {
	config
}

// NewSettingsClient returns a client for the Settings from the given config.
func NewSettingsClient(c config) *SettingsClient {
	return &SettingsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `settings.Hooks(f(g(h())))`.
func (c *SettingsClient) Use(hooks ...Hook) {
	c.hooks.Settings = append(c.hooks.Settings, hooks...)
}

// Create returns a create builder for Settings.
func (c *SettingsClient) Create() *SettingsCreate {
	mutation := newSettingsMutation(c.config, OpCreate)
	return &SettingsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Settings entities.
func (c *SettingsClient) CreateBulk(builders ...*SettingsCreate) *SettingsCreateBulk {
	return &SettingsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Settings.
func (c *SettingsClient) Update() *SettingsUpdate {
	mutation := newSettingsMutation(c.config, OpUpdate)
	return &SettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingsClient) UpdateOne(s *Settings) *SettingsUpdateOne {
	mutation := newSettingsMutation(c.config, OpUpdateOne, withSettings(s))
	return &SettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingsClient) UpdateOneID(id int) *SettingsUpdateOne {
	mutation := newSettingsMutation(c.config, OpUpdateOne, withSettingsID(id))
	return &SettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Settings.
func (c *SettingsClient) Delete() *SettingsDelete {
	mutation := newSettingsMutation(c.config, OpDelete)
	return &SettingsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SettingsClient) DeleteOne(s *Settings) *SettingsDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SettingsClient) DeleteOneID(id int) *SettingsDeleteOne {
	builder := c.Delete().Where(settings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingsDeleteOne{builder}
}

// Query returns a query builder for Settings.
func (c *SettingsClient) Query() *SettingsQuery {
	return &SettingsQuery{
		config: c.config,
	}
}

// Get returns a Settings entity by its id.
func (c *SettingsClient) Get(ctx context.Context, id int) (*Settings, error) {
	return c.Query().Where(settings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingsClient) GetX(ctx context.Context, id int) *Settings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the App edge of a Settings.
func (c *SettingsClient) QueryApp(s *Settings) *AppQuery {
	query := &AppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(settings.Table, settings.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, settings.AppTable, settings.AppColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SettingsClient) Hooks() []Hook {
	return c.hooks.Settings
}

// ShippingClient is a client for the Shipping schema.
type ShippingClient struct {
	config
}

// NewShippingClient returns a client for the Shipping from the given config.
func NewShippingClient(c config) *ShippingClient {
	return &ShippingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipping.Hooks(f(g(h())))`.
func (c *ShippingClient) Use(hooks ...Hook) {
	c.hooks.Shipping = append(c.hooks.Shipping, hooks...)
}

// Create returns a create builder for Shipping.
func (c *ShippingClient) Create() *ShippingCreate {
	mutation := newShippingMutation(c.config, OpCreate)
	return &ShippingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Shipping entities.
func (c *ShippingClient) CreateBulk(builders ...*ShippingCreate) *ShippingCreateBulk {
	return &ShippingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shipping.
func (c *ShippingClient) Update() *ShippingUpdate {
	mutation := newShippingMutation(c.config, OpUpdate)
	return &ShippingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShippingClient) UpdateOne(s *Shipping) *ShippingUpdateOne {
	mutation := newShippingMutation(c.config, OpUpdateOne, withShipping(s))
	return &ShippingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShippingClient) UpdateOneID(id int) *ShippingUpdateOne {
	mutation := newShippingMutation(c.config, OpUpdateOne, withShippingID(id))
	return &ShippingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shipping.
func (c *ShippingClient) Delete() *ShippingDelete {
	mutation := newShippingMutation(c.config, OpDelete)
	return &ShippingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShippingClient) DeleteOne(s *Shipping) *ShippingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShippingClient) DeleteOneID(id int) *ShippingDeleteOne {
	builder := c.Delete().Where(shipping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShippingDeleteOne{builder}
}

// Query returns a query builder for Shipping.
func (c *ShippingClient) Query() *ShippingQuery {
	return &ShippingQuery{
		config: c.config,
	}
}

// Get returns a Shipping entity by its id.
func (c *ShippingClient) Get(ctx context.Context, id int) (*Shipping, error) {
	return c.Query().Where(shipping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShippingClient) GetX(ctx context.Context, id int) *Shipping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfile queries the Profile edge of a Shipping.
func (c *ShippingClient) QueryProfile(s *Shipping) *ProfileQuery {
	query := &ProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipping.Table, shipping.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipping.ProfileTable, shipping.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShippingAddress queries the ShippingAddress edge of a Shipping.
func (c *ShippingClient) QueryShippingAddress(s *Shipping) *AddressQuery {
	query := &AddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipping.Table, shipping.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, shipping.ShippingAddressTable, shipping.ShippingAddressPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingAddress queries the BillingAddress edge of a Shipping.
func (c *ShippingClient) QueryBillingAddress(s *Shipping) *AddressQuery {
	query := &AddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipping.Table, shipping.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, shipping.BillingAddressTable, shipping.BillingAddressPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShippingClient) Hooks() []Hook {
	return c.hooks.Shipping
}

// StatisticClient is a client for the Statistic schema.
type StatisticClient struct {
	config
}

// NewStatisticClient returns a client for the Statistic from the given config.
func NewStatisticClient(c config) *StatisticClient {
	return &StatisticClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statistic.Hooks(f(g(h())))`.
func (c *StatisticClient) Use(hooks ...Hook) {
	c.hooks.Statistic = append(c.hooks.Statistic, hooks...)
}

// Create returns a create builder for Statistic.
func (c *StatisticClient) Create() *StatisticCreate {
	mutation := newStatisticMutation(c.config, OpCreate)
	return &StatisticCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Statistic entities.
func (c *StatisticClient) CreateBulk(builders ...*StatisticCreate) *StatisticCreateBulk {
	return &StatisticCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Statistic.
func (c *StatisticClient) Update() *StatisticUpdate {
	mutation := newStatisticMutation(c.config, OpUpdate)
	return &StatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatisticClient) UpdateOne(s *Statistic) *StatisticUpdateOne {
	mutation := newStatisticMutation(c.config, OpUpdateOne, withStatistic(s))
	return &StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatisticClient) UpdateOneID(id int) *StatisticUpdateOne {
	mutation := newStatisticMutation(c.config, OpUpdateOne, withStatisticID(id))
	return &StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statistic.
func (c *StatisticClient) Delete() *StatisticDelete {
	mutation := newStatisticMutation(c.config, OpDelete)
	return &StatisticDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatisticClient) DeleteOne(s *Statistic) *StatisticDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatisticClient) DeleteOneID(id int) *StatisticDeleteOne {
	builder := c.Delete().Where(statistic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatisticDeleteOne{builder}
}

// Query returns a query builder for Statistic.
func (c *StatisticClient) Query() *StatisticQuery {
	return &StatisticQuery{
		config: c.config,
	}
}

// Get returns a Statistic entity by its id.
func (c *StatisticClient) Get(ctx context.Context, id int) (*Statistic, error) {
	return c.Query().Where(statistic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatisticClient) GetX(ctx context.Context, id int) *Statistic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the User edge of a Statistic.
func (c *StatisticClient) QueryUser(s *Statistic) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statistic.Table, statistic.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, statistic.UserTable, statistic.UserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the Product edge of a Statistic.
func (c *StatisticClient) QueryProduct(s *Statistic) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statistic.Table, statistic.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, statistic.ProductTable, statistic.ProductPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatisticClient) Hooks() []Hook {
	return c.hooks.Statistic
}

// StripeClient is a client for the Stripe schema.
type StripeClient struct {
	config
}

// NewStripeClient returns a client for the Stripe from the given config.
func NewStripeClient(c config) *StripeClient {
	return &StripeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stripe.Hooks(f(g(h())))`.
func (c *StripeClient) Use(hooks ...Hook) {
	c.hooks.Stripe = append(c.hooks.Stripe, hooks...)
}

// Create returns a create builder for Stripe.
func (c *StripeClient) Create() *StripeCreate {
	mutation := newStripeMutation(c.config, OpCreate)
	return &StripeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stripe entities.
func (c *StripeClient) CreateBulk(builders ...*StripeCreate) *StripeCreateBulk {
	return &StripeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stripe.
func (c *StripeClient) Update() *StripeUpdate {
	mutation := newStripeMutation(c.config, OpUpdate)
	return &StripeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StripeClient) UpdateOne(s *Stripe) *StripeUpdateOne {
	mutation := newStripeMutation(c.config, OpUpdateOne, withStripe(s))
	return &StripeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StripeClient) UpdateOneID(id int) *StripeUpdateOne {
	mutation := newStripeMutation(c.config, OpUpdateOne, withStripeID(id))
	return &StripeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stripe.
func (c *StripeClient) Delete() *StripeDelete {
	mutation := newStripeMutation(c.config, OpDelete)
	return &StripeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StripeClient) DeleteOne(s *Stripe) *StripeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StripeClient) DeleteOneID(id int) *StripeDeleteOne {
	builder := c.Delete().Where(stripe.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StripeDeleteOne{builder}
}

// Query returns a query builder for Stripe.
func (c *StripeClient) Query() *StripeQuery {
	return &StripeQuery{
		config: c.config,
	}
}

// Get returns a Stripe entity by its id.
func (c *StripeClient) Get(ctx context.Context, id int) (*Stripe, error) {
	return c.Query().Where(stripe.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StripeClient) GetX(ctx context.Context, id int) *Stripe {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLicense queries the License edge of a Stripe.
func (c *StripeClient) QueryLicense(s *Stripe) *LicenseQuery {
	query := &LicenseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stripe.Table, stripe.FieldID, id),
			sqlgraph.To(license.Table, license.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stripe.LicenseTable, stripe.LicenseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StripeClient) Hooks() []Hook {
	return c.hooks.Stripe
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Create returns a create builder for Task.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskClient) DeleteOneID(id int) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the Product edge of a Task.
func (c *TaskClient) QueryProduct(t *Task) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, task.ProductTable, task.ProductPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProxyList queries the ProxyList edge of a Task.
func (c *TaskClient) QueryProxyList(t *Task) *ProxyListQuery {
	query := &ProxyListQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(proxylist.Table, proxylist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, task.ProxyListTable, task.ProxyListPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfileGroup queries the ProfileGroup edge of a Task.
func (c *TaskClient) QueryProfileGroup(t *Task) *ProfileGroupQuery {
	query := &ProfileGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(profilegroup.Table, profilegroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, task.ProfileGroupTable, task.ProfileGroupPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskGroup queries the TaskGroup edge of a Task.
func (c *TaskClient) QueryTaskGroup(t *Task) *TaskGroupQuery {
	query := &TaskGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(taskgroup.Table, taskgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.TaskGroupTable, task.TaskGroupPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// TaskGroupClient is a client for the TaskGroup schema.
type TaskGroupClient struct {
	config
}

// NewTaskGroupClient returns a client for the TaskGroup from the given config.
func NewTaskGroupClient(c config) *TaskGroupClient {
	return &TaskGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskgroup.Hooks(f(g(h())))`.
func (c *TaskGroupClient) Use(hooks ...Hook) {
	c.hooks.TaskGroup = append(c.hooks.TaskGroup, hooks...)
}

// Create returns a create builder for TaskGroup.
func (c *TaskGroupClient) Create() *TaskGroupCreate {
	mutation := newTaskGroupMutation(c.config, OpCreate)
	return &TaskGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskGroup entities.
func (c *TaskGroupClient) CreateBulk(builders ...*TaskGroupCreate) *TaskGroupCreateBulk {
	return &TaskGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskGroup.
func (c *TaskGroupClient) Update() *TaskGroupUpdate {
	mutation := newTaskGroupMutation(c.config, OpUpdate)
	return &TaskGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskGroupClient) UpdateOne(tg *TaskGroup) *TaskGroupUpdateOne {
	mutation := newTaskGroupMutation(c.config, OpUpdateOne, withTaskGroup(tg))
	return &TaskGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskGroupClient) UpdateOneID(id int) *TaskGroupUpdateOne {
	mutation := newTaskGroupMutation(c.config, OpUpdateOne, withTaskGroupID(id))
	return &TaskGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskGroup.
func (c *TaskGroupClient) Delete() *TaskGroupDelete {
	mutation := newTaskGroupMutation(c.config, OpDelete)
	return &TaskGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskGroupClient) DeleteOne(tg *TaskGroup) *TaskGroupDeleteOne {
	return c.DeleteOneID(tg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskGroupClient) DeleteOneID(id int) *TaskGroupDeleteOne {
	builder := c.Delete().Where(taskgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskGroupDeleteOne{builder}
}

// Query returns a query builder for TaskGroup.
func (c *TaskGroupClient) Query() *TaskGroupQuery {
	return &TaskGroupQuery{
		config: c.config,
	}
}

// Get returns a TaskGroup entity by its id.
func (c *TaskGroupClient) Get(ctx context.Context, id int) (*TaskGroup, error) {
	return c.Query().Where(taskgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskGroupClient) GetX(ctx context.Context, id int) *TaskGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the App edge of a TaskGroup.
func (c *TaskGroupClient) QueryApp(tg *TaskGroup) *AppQuery {
	query := &AppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskgroup.Table, taskgroup.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, taskgroup.AppTable, taskgroup.AppPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the Tasks edge of a TaskGroup.
func (c *TaskGroupClient) QueryTasks(tg *TaskGroup) *TaskQuery {
	query := &TaskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(taskgroup.Table, taskgroup.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, taskgroup.TasksTable, taskgroup.TasksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(tg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskGroupClient) Hooks() []Hook {
	return c.hooks.TaskGroup
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLicense queries the License edge of a User.
func (c *UserClient) QueryLicense(u *User) *LicenseQuery {
	query := &LicenseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(license.Table, license.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.LicenseTable, user.LicenseColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatistics queries the Statistics edge of a User.
func (c *UserClient) QueryStatistics(u *User) *StatisticQuery {
	query := &StatisticQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(statistic.Table, statistic.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.StatisticsTable, user.StatisticsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the App edge of a User.
func (c *UserClient) QueryApp(u *User) *AppQuery {
	query := &AppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.AppTable, user.AppColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
