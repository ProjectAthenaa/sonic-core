// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/release"
	"github.com/google/uuid"
)

// Release is the model entity for the Release schema.
type Release struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ReleaseDate holds the value of the "ReleaseDate" field.
	ReleaseDate time.Time `json:"ReleaseDate,omitempty"`
	// StockLevel holds the value of the "StockLevel" field.
	StockLevel int32 `json:"StockLevel,omitempty"`
	// Code holds the value of the "Code" field.
	Code string `json:"Code,omitempty"`
	// Type holds the value of the "Type" field.
	Type release.Type `json:"Type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReleaseQuery when eager-loading is set.
	Edges ReleaseEdges `json:"edges"`
}

// ReleaseEdges holds the relations/edges for other nodes in the graph.
type ReleaseEdges struct {
	// Customers holds the value of the Customers edge.
	Customers []*User `json:"Customers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CustomersOrErr returns the Customers value or an error if the edge
// was not loaded in eager-loading.
func (e ReleaseEdges) CustomersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Customers, nil
	}
	return nil, &NotLoadedError{edge: "Customers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Release) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case release.FieldStockLevel:
			values[i] = new(sql.NullInt64)
		case release.FieldCode, release.FieldType:
			values[i] = new(sql.NullString)
		case release.FieldCreatedAt, release.FieldReleaseDate:
			values[i] = new(sql.NullTime)
		case release.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Release", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Release fields.
func (r *Release) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case release.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case release.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case release.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ReleaseDate", values[i])
			} else if value.Valid {
				r.ReleaseDate = value.Time
			}
		case release.FieldStockLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field StockLevel", values[i])
			} else if value.Valid {
				r.StockLevel = int32(value.Int64)
			}
		case release.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Code", values[i])
			} else if value.Valid {
				r.Code = value.String
			}
		case release.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				r.Type = release.Type(value.String)
			}
		}
	}
	return nil
}

// QueryCustomers queries the "Customers" edge of the Release entity.
func (r *Release) QueryCustomers() *UserQuery {
	return (&ReleaseClient{config: r.config}).QueryCustomers(r)
}

// Update returns a builder for updating this Release.
// Note that you need to call Release.Unwrap() before calling this method if this Release
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Release) Update() *ReleaseUpdateOne {
	return (&ReleaseClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Release entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Release) Unwrap() *Release {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Release is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Release) String() string {
	var builder strings.Builder
	builder.WriteString("Release(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ReleaseDate=")
	builder.WriteString(r.ReleaseDate.Format(time.ANSIC))
	builder.WriteString(", StockLevel=")
	builder.WriteString(fmt.Sprintf("%v", r.StockLevel))
	builder.WriteString(", Code=")
	builder.WriteString(r.Code)
	builder.WriteString(", Type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Releases is a parsable slice of Release.
type Releases []*Release

func (r Releases) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
