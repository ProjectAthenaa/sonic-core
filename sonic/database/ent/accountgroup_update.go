// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/accountgroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
)

// AccountGroupUpdate is the builder for updating AccountGroup entities.
type AccountGroupUpdate struct {
	config
	hooks    []Hook
	mutation *AccountGroupMutation
}

// Where adds a new predicate for the AccountGroupUpdate builder.
func (agu *AccountGroupUpdate) Where(ps ...predicate.AccountGroup) *AccountGroupUpdate {
	agu.mutation.predicates = append(agu.mutation.predicates, ps...)
	return agu
}

// SetName sets the "Name" field.
func (agu *AccountGroupUpdate) SetName(s string) *AccountGroupUpdate {
	agu.mutation.SetName(s)
	return agu
}

// SetSite sets the "Site" field.
func (agu *AccountGroupUpdate) SetSite(a accountgroup.Site) *AccountGroupUpdate {
	agu.mutation.SetSite(a)
	return agu
}

// SetAccounts sets the "Accounts" field.
func (agu *AccountGroupUpdate) SetAccounts(s sonic.Map) *AccountGroupUpdate {
	agu.mutation.SetAccounts(s)
	return agu
}

// SetAppID sets the "App" edge to the App entity by ID.
func (agu *AccountGroupUpdate) SetAppID(id int) *AccountGroupUpdate {
	agu.mutation.SetAppID(id)
	return agu
}

// SetNillableAppID sets the "App" edge to the App entity by ID if the given value is not nil.
func (agu *AccountGroupUpdate) SetNillableAppID(id *int) *AccountGroupUpdate {
	if id != nil {
		agu = agu.SetAppID(*id)
	}
	return agu
}

// SetApp sets the "App" edge to the App entity.
func (agu *AccountGroupUpdate) SetApp(a *App) *AccountGroupUpdate {
	return agu.SetAppID(a.ID)
}

// Mutation returns the AccountGroupMutation object of the builder.
func (agu *AccountGroupUpdate) Mutation() *AccountGroupMutation {
	return agu.mutation
}

// ClearApp clears the "App" edge to the App entity.
func (agu *AccountGroupUpdate) ClearApp() *AccountGroupUpdate {
	agu.mutation.ClearApp()
	return agu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *AccountGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(agu.hooks) == 0 {
		if err = agu.check(); err != nil {
			return 0, err
		}
		affected, err = agu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = agu.check(); err != nil {
				return 0, err
			}
			agu.mutation = mutation
			affected, err = agu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agu.hooks) - 1; i >= 0; i-- {
			mut = agu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agu *AccountGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *AccountGroupUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *AccountGroupUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agu *AccountGroupUpdate) check() error {
	if v, ok := agu.mutation.Site(); ok {
		if err := accountgroup.SiteValidator(v); err != nil {
			return &ValidationError{Name: "Site", err: fmt.Errorf("ent: validator failed for field \"Site\": %w", err)}
		}
	}
	return nil
}

func (agu *AccountGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountgroup.Table,
			Columns: accountgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountgroup.FieldID,
			},
		},
	}
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountgroup.FieldName,
		})
	}
	if value, ok := agu.mutation.Site(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accountgroup.FieldSite,
		})
	}
	if value, ok := agu.mutation.Accounts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: accountgroup.FieldAccounts,
		})
	}
	if agu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountgroup.AppTable,
			Columns: []string{accountgroup.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountgroup.AppTable,
			Columns: []string{accountgroup.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountgroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountGroupUpdateOne is the builder for updating a single AccountGroup entity.
type AccountGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountGroupMutation
}

// SetName sets the "Name" field.
func (aguo *AccountGroupUpdateOne) SetName(s string) *AccountGroupUpdateOne {
	aguo.mutation.SetName(s)
	return aguo
}

// SetSite sets the "Site" field.
func (aguo *AccountGroupUpdateOne) SetSite(a accountgroup.Site) *AccountGroupUpdateOne {
	aguo.mutation.SetSite(a)
	return aguo
}

// SetAccounts sets the "Accounts" field.
func (aguo *AccountGroupUpdateOne) SetAccounts(s sonic.Map) *AccountGroupUpdateOne {
	aguo.mutation.SetAccounts(s)
	return aguo
}

// SetAppID sets the "App" edge to the App entity by ID.
func (aguo *AccountGroupUpdateOne) SetAppID(id int) *AccountGroupUpdateOne {
	aguo.mutation.SetAppID(id)
	return aguo
}

// SetNillableAppID sets the "App" edge to the App entity by ID if the given value is not nil.
func (aguo *AccountGroupUpdateOne) SetNillableAppID(id *int) *AccountGroupUpdateOne {
	if id != nil {
		aguo = aguo.SetAppID(*id)
	}
	return aguo
}

// SetApp sets the "App" edge to the App entity.
func (aguo *AccountGroupUpdateOne) SetApp(a *App) *AccountGroupUpdateOne {
	return aguo.SetAppID(a.ID)
}

// Mutation returns the AccountGroupMutation object of the builder.
func (aguo *AccountGroupUpdateOne) Mutation() *AccountGroupMutation {
	return aguo.mutation
}

// ClearApp clears the "App" edge to the App entity.
func (aguo *AccountGroupUpdateOne) ClearApp() *AccountGroupUpdateOne {
	aguo.mutation.ClearApp()
	return aguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *AccountGroupUpdateOne) Select(field string, fields ...string) *AccountGroupUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated AccountGroup entity.
func (aguo *AccountGroupUpdateOne) Save(ctx context.Context) (*AccountGroup, error) {
	var (
		err  error
		node *AccountGroup
	)
	if len(aguo.hooks) == 0 {
		if err = aguo.check(); err != nil {
			return nil, err
		}
		node, err = aguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aguo.check(); err != nil {
				return nil, err
			}
			aguo.mutation = mutation
			node, err = aguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aguo.hooks) - 1; i >= 0; i-- {
			mut = aguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *AccountGroupUpdateOne) SaveX(ctx context.Context) *AccountGroup {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *AccountGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *AccountGroupUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aguo *AccountGroupUpdateOne) check() error {
	if v, ok := aguo.mutation.Site(); ok {
		if err := accountgroup.SiteValidator(v); err != nil {
			return &ValidationError{Name: "Site", err: fmt.Errorf("ent: validator failed for field \"Site\": %w", err)}
		}
	}
	return nil
}

func (aguo *AccountGroupUpdateOne) sqlSave(ctx context.Context) (_node *AccountGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountgroup.Table,
			Columns: accountgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountgroup.FieldID,
			},
		},
	}
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AccountGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountgroup.FieldID)
		for _, f := range fields {
			if !accountgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountgroup.FieldName,
		})
	}
	if value, ok := aguo.mutation.Site(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accountgroup.FieldSite,
		})
	}
	if value, ok := aguo.mutation.Accounts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: accountgroup.FieldAccounts,
		})
	}
	if aguo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountgroup.AppTable,
			Columns: []string{accountgroup.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountgroup.AppTable,
			Columns: []string{accountgroup.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountGroup{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountgroup.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
