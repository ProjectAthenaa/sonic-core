// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxy"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxylist"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/google/uuid"
)

// ProxyListCreate is the builder for creating a ProxyList entity.
type ProxyListCreate struct {
	config
	mutation *ProxyListMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (plc *ProxyListCreate) SetCreatedAt(t time.Time) *ProxyListCreate {
	plc.mutation.SetCreatedAt(t)
	return plc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (plc *ProxyListCreate) SetNillableCreatedAt(t *time.Time) *ProxyListCreate {
	if t != nil {
		plc.SetCreatedAt(*t)
	}
	return plc
}

// SetUpdatedAt sets the "updated_at" field.
func (plc *ProxyListCreate) SetUpdatedAt(t time.Time) *ProxyListCreate {
	plc.mutation.SetUpdatedAt(t)
	return plc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (plc *ProxyListCreate) SetNillableUpdatedAt(t *time.Time) *ProxyListCreate {
	if t != nil {
		plc.SetUpdatedAt(*t)
	}
	return plc
}

// SetName sets the "Name" field.
func (plc *ProxyListCreate) SetName(s string) *ProxyListCreate {
	plc.mutation.SetName(s)
	return plc
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (plc *ProxyListCreate) SetNillableName(s *string) *ProxyListCreate {
	if s != nil {
		plc.SetName(*s)
	}
	return plc
}

// SetType sets the "Type" field.
func (plc *ProxyListCreate) SetType(pr proxylist.Type) *ProxyListCreate {
	plc.mutation.SetType(pr)
	return plc
}

// SetID sets the "id" field.
func (plc *ProxyListCreate) SetID(u uuid.UUID) *ProxyListCreate {
	plc.mutation.SetID(u)
	return plc
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (plc *ProxyListCreate) AddAppIDs(ids ...uuid.UUID) *ProxyListCreate {
	plc.mutation.AddAppIDs(ids...)
	return plc
}

// AddApp adds the "App" edges to the App entity.
func (plc *ProxyListCreate) AddApp(a ...*App) *ProxyListCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return plc.AddAppIDs(ids...)
}

// AddProxyIDs adds the "Proxies" edge to the Proxy entity by IDs.
func (plc *ProxyListCreate) AddProxyIDs(ids ...uuid.UUID) *ProxyListCreate {
	plc.mutation.AddProxyIDs(ids...)
	return plc
}

// AddProxies adds the "Proxies" edges to the Proxy entity.
func (plc *ProxyListCreate) AddProxies(p ...*Proxy) *ProxyListCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return plc.AddProxyIDs(ids...)
}

// AddTaskIDs adds the "Task" edge to the Task entity by IDs.
func (plc *ProxyListCreate) AddTaskIDs(ids ...uuid.UUID) *ProxyListCreate {
	plc.mutation.AddTaskIDs(ids...)
	return plc
}

// AddTask adds the "Task" edges to the Task entity.
func (plc *ProxyListCreate) AddTask(t ...*Task) *ProxyListCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return plc.AddTaskIDs(ids...)
}

// Mutation returns the ProxyListMutation object of the builder.
func (plc *ProxyListCreate) Mutation() *ProxyListMutation {
	return plc.mutation
}

// Save creates the ProxyList in the database.
func (plc *ProxyListCreate) Save(ctx context.Context) (*ProxyList, error) {
	var (
		err  error
		node *ProxyList
	)
	plc.defaults()
	if len(plc.hooks) == 0 {
		if err = plc.check(); err != nil {
			return nil, err
		}
		node, err = plc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProxyListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plc.check(); err != nil {
				return nil, err
			}
			plc.mutation = mutation
			node, err = plc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(plc.hooks) - 1; i >= 0; i-- {
			mut = plc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, plc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (plc *ProxyListCreate) SaveX(ctx context.Context) *ProxyList {
	v, err := plc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (plc *ProxyListCreate) defaults() {
	if _, ok := plc.mutation.CreatedAt(); !ok {
		v := proxylist.DefaultCreatedAt()
		plc.mutation.SetCreatedAt(v)
	}
	if _, ok := plc.mutation.UpdatedAt(); !ok {
		v := proxylist.DefaultUpdatedAt()
		plc.mutation.SetUpdatedAt(v)
	}
	if _, ok := plc.mutation.Name(); !ok {
		v := proxylist.DefaultName
		plc.mutation.SetName(v)
	}
	if _, ok := plc.mutation.ID(); !ok {
		v := proxylist.DefaultID()
		plc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plc *ProxyListCreate) check() error {
	if _, ok := plc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := plc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := plc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New("ent: missing required field \"Name\"")}
	}
	if _, ok := plc.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New("ent: missing required field \"Type\"")}
	}
	if v, ok := plc.mutation.GetType(); ok {
		if err := proxylist.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (plc *ProxyListCreate) sqlSave(ctx context.Context) (*ProxyList, error) {
	_node, _spec := plc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (plc *ProxyListCreate) createSpec() (*ProxyList, *sqlgraph.CreateSpec) {
	var (
		_node = &ProxyList{config: plc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: proxylist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: proxylist.FieldID,
			},
		}
	)
	if id, ok := plc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := plc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxylist.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := plc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxylist.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := plc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxylist.FieldName,
		})
		_node.Name = value
	}
	if value, ok := plc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: proxylist.FieldType,
		})
		_node.Type = value
	}
	if nodes := plc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.AppTable,
			Columns: proxylist.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := plc.mutation.ProxiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   proxylist.ProxiesTable,
			Columns: []string{proxylist.ProxiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := plc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   proxylist.TaskTable,
			Columns: proxylist.TaskPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProxyListCreateBulk is the builder for creating many ProxyList entities in bulk.
type ProxyListCreateBulk struct {
	config
	builders []*ProxyListCreate
}

// Save creates the ProxyList entities in the database.
func (plcb *ProxyListCreateBulk) Save(ctx context.Context) ([]*ProxyList, error) {
	specs := make([]*sqlgraph.CreateSpec, len(plcb.builders))
	nodes := make([]*ProxyList, len(plcb.builders))
	mutators := make([]Mutator, len(plcb.builders))
	for i := range plcb.builders {
		func(i int, root context.Context) {
			builder := plcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProxyListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plcb *ProxyListCreateBulk) SaveX(ctx context.Context) []*ProxyList {
	v, err := plcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
