// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/product"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/schema"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/statistic"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// StatisticUpdate is the builder for updating Statistic entities.
type StatisticUpdate struct {
	config
	hooks    []Hook
	mutation *StatisticMutation
}

// Where appends a list predicates to the StatisticUpdate builder.
func (su *StatisticUpdate) Where(ps ...predicate.Statistic) *StatisticUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StatisticUpdate) SetCreatedAt(t time.Time) *StatisticUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableCreatedAt(t *time.Time) *StatisticUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StatisticUpdate) SetUpdatedAt(t time.Time) *StatisticUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetType sets the "Type" field.
func (su *StatisticUpdate) SetType(s statistic.Type) *StatisticUpdate {
	su.mutation.SetType(s)
	return su
}

// SetPotentialProfit sets the "PotentialProfit" field.
func (su *StatisticUpdate) SetPotentialProfit(i int) *StatisticUpdate {
	su.mutation.ResetPotentialProfit()
	su.mutation.SetPotentialProfit(i)
	return su
}

// SetNillablePotentialProfit sets the "PotentialProfit" field if the given value is not nil.
func (su *StatisticUpdate) SetNillablePotentialProfit(i *int) *StatisticUpdate {
	if i != nil {
		su.SetPotentialProfit(*i)
	}
	return su
}

// AddPotentialProfit adds i to the "PotentialProfit" field.
func (su *StatisticUpdate) AddPotentialProfit(i int) *StatisticUpdate {
	su.mutation.AddPotentialProfit(i)
	return su
}

// ClearPotentialProfit clears the value of the "PotentialProfit" field.
func (su *StatisticUpdate) ClearPotentialProfit() *StatisticUpdate {
	su.mutation.ClearPotentialProfit()
	return su
}

// SetAxis sets the "Axis" field.
func (su *StatisticUpdate) SetAxis(m map[schema.Axis]string) *StatisticUpdate {
	su.mutation.SetAxis(m)
	return su
}

// SetValue sets the "Value" field.
func (su *StatisticUpdate) SetValue(i int) *StatisticUpdate {
	su.mutation.ResetValue()
	su.mutation.SetValue(i)
	return su
}

// SetNillableValue sets the "Value" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableValue(i *int) *StatisticUpdate {
	if i != nil {
		su.SetValue(*i)
	}
	return su
}

// AddValue adds i to the "Value" field.
func (su *StatisticUpdate) AddValue(i int) *StatisticUpdate {
	su.mutation.AddValue(i)
	return su
}

// ClearValue clears the value of the "Value" field.
func (su *StatisticUpdate) ClearValue() *StatisticUpdate {
	su.mutation.ClearValue()
	return su
}

// SetSpent sets the "Spent" field.
func (su *StatisticUpdate) SetSpent(f float64) *StatisticUpdate {
	su.mutation.ResetSpent()
	su.mutation.SetSpent(f)
	return su
}

// SetNillableSpent sets the "Spent" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableSpent(f *float64) *StatisticUpdate {
	if f != nil {
		su.SetSpent(*f)
	}
	return su
}

// AddSpent adds f to the "Spent" field.
func (su *StatisticUpdate) AddSpent(f float64) *StatisticUpdate {
	su.mutation.AddSpent(f)
	return su
}

// ClearSpent clears the value of the "Spent" field.
func (su *StatisticUpdate) ClearSpent() *StatisticUpdate {
	su.mutation.ClearSpent()
	return su
}

// AddUserIDs adds the "User" edge to the User entity by IDs.
func (su *StatisticUpdate) AddUserIDs(ids ...uuid.UUID) *StatisticUpdate {
	su.mutation.AddUserIDs(ids...)
	return su
}

// AddUser adds the "User" edges to the User entity.
func (su *StatisticUpdate) AddUser(u ...*User) *StatisticUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddUserIDs(ids...)
}

// AddProductIDs adds the "Product" edge to the Product entity by IDs.
func (su *StatisticUpdate) AddProductIDs(ids ...uuid.UUID) *StatisticUpdate {
	su.mutation.AddProductIDs(ids...)
	return su
}

// AddProduct adds the "Product" edges to the Product entity.
func (su *StatisticUpdate) AddProduct(p ...*Product) *StatisticUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProductIDs(ids...)
}

// Mutation returns the StatisticMutation object of the builder.
func (su *StatisticUpdate) Mutation() *StatisticMutation {
	return su.mutation
}

// ClearUser clears all "User" edges to the User entity.
func (su *StatisticUpdate) ClearUser() *StatisticUpdate {
	su.mutation.ClearUser()
	return su
}

// RemoveUserIDs removes the "User" edge to User entities by IDs.
func (su *StatisticUpdate) RemoveUserIDs(ids ...uuid.UUID) *StatisticUpdate {
	su.mutation.RemoveUserIDs(ids...)
	return su
}

// RemoveUser removes "User" edges to User entities.
func (su *StatisticUpdate) RemoveUser(u ...*User) *StatisticUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveUserIDs(ids...)
}

// ClearProduct clears all "Product" edges to the Product entity.
func (su *StatisticUpdate) ClearProduct() *StatisticUpdate {
	su.mutation.ClearProduct()
	return su
}

// RemoveProductIDs removes the "Product" edge to Product entities by IDs.
func (su *StatisticUpdate) RemoveProductIDs(ids ...uuid.UUID) *StatisticUpdate {
	su.mutation.RemoveProductIDs(ids...)
	return su
}

// RemoveProduct removes "Product" edges to Product entities.
func (su *StatisticUpdate) RemoveProduct(p ...*Product) *StatisticUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatisticUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatisticUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatisticUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatisticUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StatisticUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := statistic.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StatisticUpdate) check() error {
	if v, ok := su.mutation.GetType(); ok {
		if err := statistic.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (su *StatisticUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statistic.Table,
			Columns: statistic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: statistic.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statistic.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statistic.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: statistic.FieldType,
		})
	}
	if value, ok := su.mutation.PotentialProfit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldPotentialProfit,
		})
	}
	if value, ok := su.mutation.AddedPotentialProfit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldPotentialProfit,
		})
	}
	if su.mutation.PotentialProfitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: statistic.FieldPotentialProfit,
		})
	}
	if value, ok := su.mutation.Axis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: statistic.FieldAxis,
		})
	}
	if value, ok := su.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldValue,
		})
	}
	if value, ok := su.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldValue,
		})
	}
	if su.mutation.ValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: statistic.FieldValue,
		})
	}
	if value, ok := su.mutation.Spent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statistic.FieldSpent,
		})
	}
	if value, ok := su.mutation.AddedSpent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statistic.FieldSpent,
		})
	}
	if su.mutation.SpentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: statistic.FieldSpent,
		})
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   statistic.UserTable,
			Columns: statistic.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedUserIDs(); len(nodes) > 0 && !su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   statistic.UserTable,
			Columns: statistic.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   statistic.UserTable,
			Columns: statistic.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statistic.ProductTable,
			Columns: statistic.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProductIDs(); len(nodes) > 0 && !su.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statistic.ProductTable,
			Columns: statistic.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statistic.ProductTable,
			Columns: statistic.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StatisticUpdateOne is the builder for updating a single Statistic entity.
type StatisticUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatisticMutation
}

// SetCreatedAt sets the "created_at" field.
func (suo *StatisticUpdateOne) SetCreatedAt(t time.Time) *StatisticUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableCreatedAt(t *time.Time) *StatisticUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StatisticUpdateOne) SetUpdatedAt(t time.Time) *StatisticUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetType sets the "Type" field.
func (suo *StatisticUpdateOne) SetType(s statistic.Type) *StatisticUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetPotentialProfit sets the "PotentialProfit" field.
func (suo *StatisticUpdateOne) SetPotentialProfit(i int) *StatisticUpdateOne {
	suo.mutation.ResetPotentialProfit()
	suo.mutation.SetPotentialProfit(i)
	return suo
}

// SetNillablePotentialProfit sets the "PotentialProfit" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillablePotentialProfit(i *int) *StatisticUpdateOne {
	if i != nil {
		suo.SetPotentialProfit(*i)
	}
	return suo
}

// AddPotentialProfit adds i to the "PotentialProfit" field.
func (suo *StatisticUpdateOne) AddPotentialProfit(i int) *StatisticUpdateOne {
	suo.mutation.AddPotentialProfit(i)
	return suo
}

// ClearPotentialProfit clears the value of the "PotentialProfit" field.
func (suo *StatisticUpdateOne) ClearPotentialProfit() *StatisticUpdateOne {
	suo.mutation.ClearPotentialProfit()
	return suo
}

// SetAxis sets the "Axis" field.
func (suo *StatisticUpdateOne) SetAxis(m map[schema.Axis]string) *StatisticUpdateOne {
	suo.mutation.SetAxis(m)
	return suo
}

// SetValue sets the "Value" field.
func (suo *StatisticUpdateOne) SetValue(i int) *StatisticUpdateOne {
	suo.mutation.ResetValue()
	suo.mutation.SetValue(i)
	return suo
}

// SetNillableValue sets the "Value" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableValue(i *int) *StatisticUpdateOne {
	if i != nil {
		suo.SetValue(*i)
	}
	return suo
}

// AddValue adds i to the "Value" field.
func (suo *StatisticUpdateOne) AddValue(i int) *StatisticUpdateOne {
	suo.mutation.AddValue(i)
	return suo
}

// ClearValue clears the value of the "Value" field.
func (suo *StatisticUpdateOne) ClearValue() *StatisticUpdateOne {
	suo.mutation.ClearValue()
	return suo
}

// SetSpent sets the "Spent" field.
func (suo *StatisticUpdateOne) SetSpent(f float64) *StatisticUpdateOne {
	suo.mutation.ResetSpent()
	suo.mutation.SetSpent(f)
	return suo
}

// SetNillableSpent sets the "Spent" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableSpent(f *float64) *StatisticUpdateOne {
	if f != nil {
		suo.SetSpent(*f)
	}
	return suo
}

// AddSpent adds f to the "Spent" field.
func (suo *StatisticUpdateOne) AddSpent(f float64) *StatisticUpdateOne {
	suo.mutation.AddSpent(f)
	return suo
}

// ClearSpent clears the value of the "Spent" field.
func (suo *StatisticUpdateOne) ClearSpent() *StatisticUpdateOne {
	suo.mutation.ClearSpent()
	return suo
}

// AddUserIDs adds the "User" edge to the User entity by IDs.
func (suo *StatisticUpdateOne) AddUserIDs(ids ...uuid.UUID) *StatisticUpdateOne {
	suo.mutation.AddUserIDs(ids...)
	return suo
}

// AddUser adds the "User" edges to the User entity.
func (suo *StatisticUpdateOne) AddUser(u ...*User) *StatisticUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddUserIDs(ids...)
}

// AddProductIDs adds the "Product" edge to the Product entity by IDs.
func (suo *StatisticUpdateOne) AddProductIDs(ids ...uuid.UUID) *StatisticUpdateOne {
	suo.mutation.AddProductIDs(ids...)
	return suo
}

// AddProduct adds the "Product" edges to the Product entity.
func (suo *StatisticUpdateOne) AddProduct(p ...*Product) *StatisticUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProductIDs(ids...)
}

// Mutation returns the StatisticMutation object of the builder.
func (suo *StatisticUpdateOne) Mutation() *StatisticMutation {
	return suo.mutation
}

// ClearUser clears all "User" edges to the User entity.
func (suo *StatisticUpdateOne) ClearUser() *StatisticUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// RemoveUserIDs removes the "User" edge to User entities by IDs.
func (suo *StatisticUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *StatisticUpdateOne {
	suo.mutation.RemoveUserIDs(ids...)
	return suo
}

// RemoveUser removes "User" edges to User entities.
func (suo *StatisticUpdateOne) RemoveUser(u ...*User) *StatisticUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveUserIDs(ids...)
}

// ClearProduct clears all "Product" edges to the Product entity.
func (suo *StatisticUpdateOne) ClearProduct() *StatisticUpdateOne {
	suo.mutation.ClearProduct()
	return suo
}

// RemoveProductIDs removes the "Product" edge to Product entities by IDs.
func (suo *StatisticUpdateOne) RemoveProductIDs(ids ...uuid.UUID) *StatisticUpdateOne {
	suo.mutation.RemoveProductIDs(ids...)
	return suo
}

// RemoveProduct removes "Product" edges to Product entities.
func (suo *StatisticUpdateOne) RemoveProduct(p ...*Product) *StatisticUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatisticUpdateOne) Select(field string, fields ...string) *StatisticUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Statistic entity.
func (suo *StatisticUpdateOne) Save(ctx context.Context) (*Statistic, error) {
	var (
		err  error
		node *Statistic
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatisticUpdateOne) SaveX(ctx context.Context) *Statistic {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatisticUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatisticUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StatisticUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := statistic.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StatisticUpdateOne) check() error {
	if v, ok := suo.mutation.GetType(); ok {
		if err := statistic.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	return nil
}

func (suo *StatisticUpdateOne) sqlSave(ctx context.Context) (_node *Statistic, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statistic.Table,
			Columns: statistic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: statistic.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Statistic.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statistic.FieldID)
		for _, f := range fields {
			if !statistic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statistic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statistic.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statistic.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: statistic.FieldType,
		})
	}
	if value, ok := suo.mutation.PotentialProfit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldPotentialProfit,
		})
	}
	if value, ok := suo.mutation.AddedPotentialProfit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldPotentialProfit,
		})
	}
	if suo.mutation.PotentialProfitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: statistic.FieldPotentialProfit,
		})
	}
	if value, ok := suo.mutation.Axis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: statistic.FieldAxis,
		})
	}
	if value, ok := suo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldValue,
		})
	}
	if value, ok := suo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldValue,
		})
	}
	if suo.mutation.ValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: statistic.FieldValue,
		})
	}
	if value, ok := suo.mutation.Spent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statistic.FieldSpent,
		})
	}
	if value, ok := suo.mutation.AddedSpent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statistic.FieldSpent,
		})
	}
	if suo.mutation.SpentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: statistic.FieldSpent,
		})
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   statistic.UserTable,
			Columns: statistic.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedUserIDs(); len(nodes) > 0 && !suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   statistic.UserTable,
			Columns: statistic.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   statistic.UserTable,
			Columns: statistic.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statistic.ProductTable,
			Columns: statistic.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProductIDs(); len(nodes) > 0 && !suo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statistic.ProductTable,
			Columns: statistic.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statistic.ProductTable,
			Columns: statistic.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Statistic{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
