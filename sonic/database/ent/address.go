// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/address"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/shipping"
	"github.com/google/uuid"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AddressLine holds the value of the "AddressLine" field.
	AddressLine string `json:"AddressLine,omitempty"`
	// AddressLine2 holds the value of the "AddressLine2" field.
	AddressLine2 string `json:"AddressLine2,omitempty"`
	// Country holds the value of the "Country" field.
	Country string `json:"Country,omitempty"`
	// State holds the value of the "State" field.
	State string `json:"State,omitempty"`
	// City holds the value of the "City" field.
	City string `json:"City,omitempty"`
	// ZIP holds the value of the "ZIP" field.
	ZIP string `json:"ZIP,omitempty"`
	// StateCode holds the value of the "StateCode" field.
	StateCode string `json:"StateCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges                     AddressEdges `json:"edges"`
	shipping_shipping_address *uuid.UUID
	shipping_billing_address  *uuid.UUID
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// ShippingAddress holds the value of the ShippingAddress edge.
	ShippingAddress *Shipping `json:"ShippingAddress,omitempty"`
	// BillingAddress holds the value of the BillingAddress edge.
	BillingAddress *Shipping `json:"BillingAddress,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ShippingAddressOrErr returns the ShippingAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) ShippingAddressOrErr() (*Shipping, error) {
	if e.loadedTypes[0] {
		if e.ShippingAddress == nil {
			// The edge ShippingAddress was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipping.Label}
		}
		return e.ShippingAddress, nil
	}
	return nil, &NotLoadedError{edge: "ShippingAddress"}
}

// BillingAddressOrErr returns the BillingAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) BillingAddressOrErr() (*Shipping, error) {
	if e.loadedTypes[1] {
		if e.BillingAddress == nil {
			// The edge BillingAddress was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shipping.Label}
		}
		return e.BillingAddress, nil
	}
	return nil, &NotLoadedError{edge: "BillingAddress"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldAddressLine, address.FieldAddressLine2, address.FieldCountry, address.FieldState, address.FieldCity, address.FieldZIP, address.FieldStateCode:
			values[i] = new(sql.NullString)
		case address.FieldCreatedAt, address.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case address.FieldID:
			values[i] = new(uuid.UUID)
		case address.ForeignKeys[0]: // shipping_shipping_address
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case address.ForeignKeys[1]: // shipping_billing_address
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Address", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (a *Address) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case address.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case address.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case address.FieldAddressLine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AddressLine", values[i])
			} else if value.Valid {
				a.AddressLine = value.String
			}
		case address.FieldAddressLine2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AddressLine2", values[i])
			} else if value.Valid {
				a.AddressLine2 = value.String
			}
		case address.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Country", values[i])
			} else if value.Valid {
				a.Country = value.String
			}
		case address.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field State", values[i])
			} else if value.Valid {
				a.State = value.String
			}
		case address.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field City", values[i])
			} else if value.Valid {
				a.City = value.String
			}
		case address.FieldZIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ZIP", values[i])
			} else if value.Valid {
				a.ZIP = value.String
			}
		case address.FieldStateCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field StateCode", values[i])
			} else if value.Valid {
				a.StateCode = value.String
			}
		case address.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_shipping_address", values[i])
			} else if value.Valid {
				a.shipping_shipping_address = new(uuid.UUID)
				*a.shipping_shipping_address = *value.S.(*uuid.UUID)
			}
		case address.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_billing_address", values[i])
			} else if value.Valid {
				a.shipping_billing_address = new(uuid.UUID)
				*a.shipping_billing_address = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryShippingAddress queries the "ShippingAddress" edge of the Address entity.
func (a *Address) QueryShippingAddress() *ShippingQuery {
	return (&AddressClient{config: a.config}).QueryShippingAddress(a)
}

// QueryBillingAddress queries the "BillingAddress" edge of the Address entity.
func (a *Address) QueryBillingAddress() *ShippingQuery {
	return (&AddressClient{config: a.config}).QueryBillingAddress(a)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Address) Update() *AddressUpdateOne {
	return (&AddressClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Address) Unwrap() *Address {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Address is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", AddressLine=")
	builder.WriteString(a.AddressLine)
	builder.WriteString(", AddressLine2=")
	builder.WriteString(a.AddressLine2)
	builder.WriteString(", Country=")
	builder.WriteString(a.Country)
	builder.WriteString(", State=")
	builder.WriteString(a.State)
	builder.WriteString(", City=")
	builder.WriteString(a.City)
	builder.WriteString(", ZIP=")
	builder.WriteString(a.ZIP)
	builder.WriteString(", StateCode=")
	builder.WriteString(a.StateCode)
	builder.WriteByte(')')
	return builder.String()
}

// Addresses is a parsable slice of Address.
type Addresses []*Address

func (a Addresses) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
