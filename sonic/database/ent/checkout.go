// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/checkout"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// Checkout is the model entity for the Checkout schema.
type Checkout struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Date holds the value of the "Date" field.
	Date time.Time `json:"Date,omitempty"`
	// ProductName holds the value of the "ProductName" field.
	ProductName string `json:"ProductName,omitempty"`
	// ProductPrice holds the value of the "ProductPrice" field.
	ProductPrice float64 `json:"ProductPrice,omitempty"`
	// ProductImage holds the value of the "ProductImage" field.
	ProductImage string `json:"ProductImage,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckoutQuery when eager-loading is set.
	Edges          CheckoutEdges `json:"edges"`
	user_checkouts *uuid.UUID
}

// CheckoutEdges holds the relations/edges for other nodes in the graph.
type CheckoutEdges struct {
	// User holds the value of the User edge.
	User *User `json:"User,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge User was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "User"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Checkout) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkout.FieldProductPrice:
			values[i] = new(sql.NullFloat64)
		case checkout.FieldProductName, checkout.FieldProductImage:
			values[i] = new(sql.NullString)
		case checkout.FieldDate:
			values[i] = new(sql.NullTime)
		case checkout.FieldID:
			values[i] = new(uuid.UUID)
		case checkout.ForeignKeys[0]: // user_checkouts
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Checkout", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Checkout fields.
func (c *Checkout) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkout.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case checkout.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Date", values[i])
			} else if value.Valid {
				c.Date = value.Time
			}
		case checkout.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProductName", values[i])
			} else if value.Valid {
				c.ProductName = value.String
			}
		case checkout.FieldProductPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ProductPrice", values[i])
			} else if value.Valid {
				c.ProductPrice = value.Float64
			}
		case checkout.FieldProductImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProductImage", values[i])
			} else if value.Valid {
				c.ProductImage = value.String
			}
		case checkout.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_checkouts", values[i])
			} else if value.Valid {
				c.user_checkouts = new(uuid.UUID)
				*c.user_checkouts = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "User" edge of the Checkout entity.
func (c *Checkout) QueryUser() *UserQuery {
	return (&CheckoutClient{config: c.config}).QueryUser(c)
}

// Update returns a builder for updating this Checkout.
// Note that you need to call Checkout.Unwrap() before calling this method if this Checkout
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Checkout) Update() *CheckoutUpdateOne {
	return (&CheckoutClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Checkout entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Checkout) Unwrap() *Checkout {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Checkout is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Checkout) String() string {
	var builder strings.Builder
	builder.WriteString("Checkout(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", Date=")
	builder.WriteString(c.Date.Format(time.ANSIC))
	builder.WriteString(", ProductName=")
	builder.WriteString(c.ProductName)
	builder.WriteString(", ProductPrice=")
	builder.WriteString(fmt.Sprintf("%v", c.ProductPrice))
	builder.WriteString(", ProductImage=")
	builder.WriteString(c.ProductImage)
	builder.WriteByte(')')
	return builder.String()
}

// Checkouts is a parsable slice of Checkout.
type Checkouts []*Checkout

func (c Checkouts) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
