// Code generated by entc, DO NOT EDIT.

package proxy

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Username applies equality check predicate on the "Username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Password applies equality check predicate on the "Password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// IP applies equality check predicate on the "IP" field. It's identical to IPEQ.
func IP(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// Port applies equality check predicate on the "Port" field. It's identical to PortEQ.
func Port(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// UsernameEQ applies the EQ predicate on the "Username" field.
func UsernameEQ(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "Username" field.
func UsernameNEQ(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "Username" field.
func UsernameIn(vs ...string) predicate.Proxy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "Username" field.
func UsernameNotIn(vs ...string) predicate.Proxy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "Username" field.
func UsernameGT(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "Username" field.
func UsernameGTE(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "Username" field.
func UsernameLT(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "Username" field.
func UsernameLTE(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "Username" field.
func UsernameContains(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "Username" field.
func UsernameHasPrefix(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "Username" field.
func UsernameHasSuffix(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameIsNil applies the IsNil predicate on the "Username" field.
func UsernameIsNil() predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsername)))
	})
}

// UsernameNotNil applies the NotNil predicate on the "Username" field.
func UsernameNotNil() predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsername)))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "Username" field.
func UsernameEqualFold(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "Username" field.
func UsernameContainsFold(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// PasswordEQ applies the EQ predicate on the "Password" field.
func PasswordEQ(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "Password" field.
func PasswordNEQ(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "Password" field.
func PasswordIn(vs ...string) predicate.Proxy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "Password" field.
func PasswordNotIn(vs ...string) predicate.Proxy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "Password" field.
func PasswordGT(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "Password" field.
func PasswordGTE(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "Password" field.
func PasswordLT(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "Password" field.
func PasswordLTE(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "Password" field.
func PasswordContains(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "Password" field.
func PasswordHasPrefix(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "Password" field.
func PasswordHasSuffix(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordIsNil applies the IsNil predicate on the "Password" field.
func PasswordIsNil() predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassword)))
	})
}

// PasswordNotNil applies the NotNil predicate on the "Password" field.
func PasswordNotNil() predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassword)))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "Password" field.
func PasswordEqualFold(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "Password" field.
func PasswordContainsFold(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// IPEQ applies the EQ predicate on the "IP" field.
func IPEQ(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "IP" field.
func IPNEQ(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "IP" field.
func IPIn(vs ...string) predicate.Proxy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "IP" field.
func IPNotIn(vs ...string) predicate.Proxy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "IP" field.
func IPGT(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "IP" field.
func IPGTE(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "IP" field.
func IPLT(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "IP" field.
func IPLTE(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "IP" field.
func IPContains(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "IP" field.
func IPHasPrefix(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "IP" field.
func IPHasSuffix(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "IP" field.
func IPEqualFold(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "IP" field.
func IPContainsFold(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// PortEQ applies the EQ predicate on the "Port" field.
func PortEQ(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// PortNEQ applies the NEQ predicate on the "Port" field.
func PortNEQ(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPort), v))
	})
}

// PortIn applies the In predicate on the "Port" field.
func PortIn(vs ...string) predicate.Proxy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPort), v...))
	})
}

// PortNotIn applies the NotIn predicate on the "Port" field.
func PortNotIn(vs ...string) predicate.Proxy {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Proxy(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPort), v...))
	})
}

// PortGT applies the GT predicate on the "Port" field.
func PortGT(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPort), v))
	})
}

// PortGTE applies the GTE predicate on the "Port" field.
func PortGTE(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPort), v))
	})
}

// PortLT applies the LT predicate on the "Port" field.
func PortLT(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPort), v))
	})
}

// PortLTE applies the LTE predicate on the "Port" field.
func PortLTE(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPort), v))
	})
}

// PortContains applies the Contains predicate on the "Port" field.
func PortContains(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPort), v))
	})
}

// PortHasPrefix applies the HasPrefix predicate on the "Port" field.
func PortHasPrefix(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPort), v))
	})
}

// PortHasSuffix applies the HasSuffix predicate on the "Port" field.
func PortHasSuffix(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPort), v))
	})
}

// PortEqualFold applies the EqualFold predicate on the "Port" field.
func PortEqualFold(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPort), v))
	})
}

// PortContainsFold applies the ContainsFold predicate on the "Port" field.
func PortContainsFold(v string) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPort), v))
	})
}

// HasProxyList applies the HasEdge predicate on the "ProxyList" edge.
func HasProxyList() predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProxyListTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProxyListTable, ProxyListColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProxyListWith applies the HasEdge predicate on the "ProxyList" edge with a given conditions (other predicates).
func HasProxyListWith(preds ...predicate.ProxyList) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProxyListInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProxyListTable, ProxyListColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Proxy) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Proxy) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Proxy) predicate.Proxy {
	return predicate.Proxy(func(s *sql.Selector) {
		p(s.Not())
	})
}
