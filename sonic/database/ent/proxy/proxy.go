// Code generated by entc, DO NOT EDIT.

package proxy

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the proxy type in the database.
	Label = "proxy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// EdgeProxyList holds the string denoting the proxylist edge name in mutations.
	EdgeProxyList = "ProxyList"
	// Table holds the table name of the proxy in the database.
	Table = "proxies"
	// ProxyListTable is the table that holds the ProxyList relation/edge.
	ProxyListTable = "proxies"
	// ProxyListInverseTable is the table name for the ProxyList entity.
	// It exists in this package in order to avoid circular dependency with the "proxylist" package.
	ProxyListInverseTable = "proxy_lists"
	// ProxyListColumn is the table column denoting the ProxyList relation/edge.
	ProxyListColumn = "proxy_list_proxies"
)

// Columns holds all SQL columns for proxy fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUsername,
	FieldPassword,
	FieldIP,
	FieldPort,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "proxies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"proxy_list_proxies",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
