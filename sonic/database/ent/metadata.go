// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/metadata"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// Metadata is the model entity for the Metadata schema.
type Metadata struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FirstLogin holds the value of the "FirstLogin" field.
	FirstLogin bool `json:"FirstLogin,omitempty"`
	// Theme holds the value of the "Theme" field.
	Theme metadata.Theme `json:"Theme,omitempty"`
	// DiscordID holds the value of the "DiscordID" field.
	DiscordID string `json:"DiscordID,omitempty"`
	// DiscordAccessToken holds the value of the "DiscordAccessToken" field.
	DiscordAccessToken string `json:"DiscordAccessToken,omitempty"`
	// DiscordRefreshToken holds the value of the "DiscordRefreshToken" field.
	DiscordRefreshToken string `json:"DiscordRefreshToken,omitempty"`
	// DiscordUsername holds the value of the "DiscordUsername" field.
	DiscordUsername string `json:"DiscordUsername,omitempty"`
	// DiscordAvatar holds the value of the "DiscordAvatar" field.
	DiscordAvatar string `json:"DiscordAvatar,omitempty"`
	// DiscordDiscriminator holds the value of the "DiscordDiscriminator" field.
	DiscordDiscriminator string `json:"DiscordDiscriminator,omitempty"`
	// DiscordExpiryTime holds the value of the "DiscordExpiryTime" field.
	DiscordExpiryTime time.Time `json:"DiscordExpiryTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetadataQuery when eager-loading is set.
	Edges         MetadataEdges `json:"edges"`
	user_metadata *uuid.UUID
}

// MetadataEdges holds the relations/edges for other nodes in the graph.
type MetadataEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetadataEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metadata) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case metadata.FieldFirstLogin:
			values[i] = new(sql.NullBool)
		case metadata.FieldTheme, metadata.FieldDiscordID, metadata.FieldDiscordAccessToken, metadata.FieldDiscordRefreshToken, metadata.FieldDiscordUsername, metadata.FieldDiscordAvatar, metadata.FieldDiscordDiscriminator:
			values[i] = new(sql.NullString)
		case metadata.FieldCreatedAt, metadata.FieldUpdatedAt, metadata.FieldDiscordExpiryTime:
			values[i] = new(sql.NullTime)
		case metadata.FieldID:
			values[i] = new(uuid.UUID)
		case metadata.ForeignKeys[0]: // user_metadata
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Metadata", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metadata fields.
func (m *Metadata) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metadata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case metadata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case metadata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case metadata.FieldFirstLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field FirstLogin", values[i])
			} else if value.Valid {
				m.FirstLogin = value.Bool
			}
		case metadata.FieldTheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Theme", values[i])
			} else if value.Valid {
				m.Theme = metadata.Theme(value.String)
			}
		case metadata.FieldDiscordID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DiscordID", values[i])
			} else if value.Valid {
				m.DiscordID = value.String
			}
		case metadata.FieldDiscordAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DiscordAccessToken", values[i])
			} else if value.Valid {
				m.DiscordAccessToken = value.String
			}
		case metadata.FieldDiscordRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DiscordRefreshToken", values[i])
			} else if value.Valid {
				m.DiscordRefreshToken = value.String
			}
		case metadata.FieldDiscordUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DiscordUsername", values[i])
			} else if value.Valid {
				m.DiscordUsername = value.String
			}
		case metadata.FieldDiscordAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DiscordAvatar", values[i])
			} else if value.Valid {
				m.DiscordAvatar = value.String
			}
		case metadata.FieldDiscordDiscriminator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DiscordDiscriminator", values[i])
			} else if value.Valid {
				m.DiscordDiscriminator = value.String
			}
		case metadata.FieldDiscordExpiryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DiscordExpiryTime", values[i])
			} else if value.Valid {
				m.DiscordExpiryTime = value.Time
			}
		case metadata.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_metadata", values[i])
			} else if value != nil {
				m.user_metadata = value
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Metadata entity.
func (m *Metadata) QueryUser() *UserQuery {
	return (&MetadataClient{config: m.config}).QueryUser(m)
}

// Update returns a builder for updating this Metadata.
// Note that you need to call Metadata.Unwrap() before calling this method if this Metadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metadata) Update() *MetadataUpdateOne {
	return (&MetadataClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Metadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metadata) Unwrap() *Metadata {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metadata is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metadata) String() string {
	var builder strings.Builder
	builder.WriteString("Metadata(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", FirstLogin=")
	builder.WriteString(fmt.Sprintf("%v", m.FirstLogin))
	builder.WriteString(", Theme=")
	builder.WriteString(fmt.Sprintf("%v", m.Theme))
	builder.WriteString(", DiscordID=")
	builder.WriteString(m.DiscordID)
	builder.WriteString(", DiscordAccessToken=")
	builder.WriteString(m.DiscordAccessToken)
	builder.WriteString(", DiscordRefreshToken=")
	builder.WriteString(m.DiscordRefreshToken)
	builder.WriteString(", DiscordUsername=")
	builder.WriteString(m.DiscordUsername)
	builder.WriteString(", DiscordAvatar=")
	builder.WriteString(m.DiscordAvatar)
	builder.WriteString(", DiscordDiscriminator=")
	builder.WriteString(m.DiscordDiscriminator)
	builder.WriteString(", DiscordExpiryTime=")
	builder.WriteString(m.DiscordExpiryTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MetadataSlice is a parsable slice of Metadata.
type MetadataSlice []*Metadata

func (m MetadataSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
