// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/calendar"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/product"
	"github.com/google/uuid"
)

// Calendar is the model entity for the Calendar schema.
type Calendar struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ReleaseDate holds the value of the "ReleaseDate" field.
	ReleaseDate time.Time `json:"ReleaseDate,omitempty"`
	// ProductImage holds the value of the "ProductImage" field.
	ProductImage string `json:"ProductImage,omitempty"`
	// ProductName holds the value of the "ProductName" field.
	ProductName string `json:"ProductName,omitempty"`
	// HypedRelease holds the value of the "HypedRelease" field.
	HypedRelease bool `json:"HypedRelease,omitempty"`
	// UsersRunning holds the value of the "UsersRunning" field.
	UsersRunning int `json:"UsersRunning,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CalendarQuery when eager-loading is set.
	Edges CalendarEdges `json:"edges"`
}

// CalendarEdges holds the relations/edges for other nodes in the graph.
type CalendarEdges struct {
	// QuickTask holds the value of the QuickTask edge.
	QuickTask *Product `json:"QuickTask,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuickTaskOrErr returns the QuickTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CalendarEdges) QuickTaskOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.QuickTask == nil {
			// The edge QuickTask was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.QuickTask, nil
	}
	return nil, &NotLoadedError{edge: "QuickTask"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Calendar) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case calendar.FieldHypedRelease:
			values[i] = new(sql.NullBool)
		case calendar.FieldUsersRunning:
			values[i] = new(sql.NullInt64)
		case calendar.FieldProductImage, calendar.FieldProductName:
			values[i] = new(sql.NullString)
		case calendar.FieldCreatedAt, calendar.FieldUpdatedAt, calendar.FieldReleaseDate:
			values[i] = new(sql.NullTime)
		case calendar.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Calendar", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Calendar fields.
func (c *Calendar) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case calendar.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case calendar.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case calendar.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case calendar.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ReleaseDate", values[i])
			} else if value.Valid {
				c.ReleaseDate = value.Time
			}
		case calendar.FieldProductImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProductImage", values[i])
			} else if value.Valid {
				c.ProductImage = value.String
			}
		case calendar.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ProductName", values[i])
			} else if value.Valid {
				c.ProductName = value.String
			}
		case calendar.FieldHypedRelease:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field HypedRelease", values[i])
			} else if value.Valid {
				c.HypedRelease = value.Bool
			}
		case calendar.FieldUsersRunning:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UsersRunning", values[i])
			} else if value.Valid {
				c.UsersRunning = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuickTask queries the "QuickTask" edge of the Calendar entity.
func (c *Calendar) QueryQuickTask() *ProductQuery {
	return (&CalendarClient{config: c.config}).QueryQuickTask(c)
}

// Update returns a builder for updating this Calendar.
// Note that you need to call Calendar.Unwrap() before calling this method if this Calendar
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Calendar) Update() *CalendarUpdateOne {
	return (&CalendarClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Calendar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Calendar) Unwrap() *Calendar {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Calendar is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Calendar) String() string {
	var builder strings.Builder
	builder.WriteString("Calendar(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ReleaseDate=")
	builder.WriteString(c.ReleaseDate.Format(time.ANSIC))
	builder.WriteString(", ProductImage=")
	builder.WriteString(c.ProductImage)
	builder.WriteString(", ProductName=")
	builder.WriteString(c.ProductName)
	builder.WriteString(", HypedRelease=")
	builder.WriteString(fmt.Sprintf("%v", c.HypedRelease))
	builder.WriteString(", UsersRunning=")
	builder.WriteString(fmt.Sprintf("%v", c.UsersRunning))
	builder.WriteByte(')')
	return builder.String()
}

// Calendars is a parsable slice of Calendar.
type Calendars []*Calendar

func (c Calendars) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
