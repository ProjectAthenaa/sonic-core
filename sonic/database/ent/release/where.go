// Code generated by entc, DO NOT EDIT.

package release

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// ReleaseDate applies equality check predicate on the "ReleaseDate" field. It's identical to ReleaseDateEQ.
func ReleaseDate(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// StockLevel applies equality check predicate on the "StockLevel" field. It's identical to StockLevelEQ.
func StockLevel(v int32) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStockLevel), v))
	})
}

// Code applies equality check predicate on the "Code" field. It's identical to CodeEQ.
func Code(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// OneTimeFeeAmount applies equality check predicate on the "OneTimeFeeAmount" field. It's identical to OneTimeFeeAmountEQ.
func OneTimeFeeAmount(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOneTimeFeeAmount), v))
	})
}

// SubscriptionFee applies equality check predicate on the "SubscriptionFee" field. It's identical to SubscriptionFeeEQ.
func SubscriptionFee(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscriptionFee), v))
	})
}

// ProductPriceID applies equality check predicate on the "ProductPriceID" field. It's identical to ProductPriceIDEQ.
func ProductPriceID(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPriceID), v))
	})
}

// SubscriptionPriceID applies equality check predicate on the "SubscriptionPriceID" field. It's identical to SubscriptionPriceIDEQ.
func SubscriptionPriceID(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscriptionPriceID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// ReleaseDateEQ applies the EQ predicate on the "ReleaseDate" field.
func ReleaseDateEQ(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateNEQ applies the NEQ predicate on the "ReleaseDate" field.
func ReleaseDateNEQ(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateIn applies the In predicate on the "ReleaseDate" field.
func ReleaseDateIn(vs ...time.Time) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateNotIn applies the NotIn predicate on the "ReleaseDate" field.
func ReleaseDateNotIn(vs ...time.Time) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReleaseDate), v...))
	})
}

// ReleaseDateGT applies the GT predicate on the "ReleaseDate" field.
func ReleaseDateGT(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateGTE applies the GTE predicate on the "ReleaseDate" field.
func ReleaseDateGTE(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLT applies the LT predicate on the "ReleaseDate" field.
func ReleaseDateLT(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReleaseDate), v))
	})
}

// ReleaseDateLTE applies the LTE predicate on the "ReleaseDate" field.
func ReleaseDateLTE(v time.Time) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReleaseDate), v))
	})
}

// StockLevelEQ applies the EQ predicate on the "StockLevel" field.
func StockLevelEQ(v int32) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStockLevel), v))
	})
}

// StockLevelNEQ applies the NEQ predicate on the "StockLevel" field.
func StockLevelNEQ(v int32) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStockLevel), v))
	})
}

// StockLevelIn applies the In predicate on the "StockLevel" field.
func StockLevelIn(vs ...int32) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStockLevel), v...))
	})
}

// StockLevelNotIn applies the NotIn predicate on the "StockLevel" field.
func StockLevelNotIn(vs ...int32) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStockLevel), v...))
	})
}

// StockLevelGT applies the GT predicate on the "StockLevel" field.
func StockLevelGT(v int32) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStockLevel), v))
	})
}

// StockLevelGTE applies the GTE predicate on the "StockLevel" field.
func StockLevelGTE(v int32) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStockLevel), v))
	})
}

// StockLevelLT applies the LT predicate on the "StockLevel" field.
func StockLevelLT(v int32) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStockLevel), v))
	})
}

// StockLevelLTE applies the LTE predicate on the "StockLevel" field.
func StockLevelLTE(v int32) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStockLevel), v))
	})
}

// CodeEQ applies the EQ predicate on the "Code" field.
func CodeEQ(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "Code" field.
func CodeNEQ(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "Code" field.
func CodeIn(vs ...string) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "Code" field.
func CodeNotIn(vs ...string) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "Code" field.
func CodeGT(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "Code" field.
func CodeGTE(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "Code" field.
func CodeLT(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "Code" field.
func CodeLTE(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "Code" field.
func CodeContains(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "Code" field.
func CodeHasPrefix(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "Code" field.
func CodeHasSuffix(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "Code" field.
func CodeEqualFold(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "Code" field.
func CodeContainsFold(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// TypeEQ applies the EQ predicate on the "Type" field.
func TypeEQ(v Type) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "Type" field.
func TypeNEQ(v Type) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "Type" field.
func TypeIn(vs ...Type) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "Type" field.
func TypeNotIn(vs ...Type) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// OneTimeFeeAmountEQ applies the EQ predicate on the "OneTimeFeeAmount" field.
func OneTimeFeeAmountEQ(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOneTimeFeeAmount), v))
	})
}

// OneTimeFeeAmountNEQ applies the NEQ predicate on the "OneTimeFeeAmount" field.
func OneTimeFeeAmountNEQ(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOneTimeFeeAmount), v))
	})
}

// OneTimeFeeAmountIn applies the In predicate on the "OneTimeFeeAmount" field.
func OneTimeFeeAmountIn(vs ...int64) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOneTimeFeeAmount), v...))
	})
}

// OneTimeFeeAmountNotIn applies the NotIn predicate on the "OneTimeFeeAmount" field.
func OneTimeFeeAmountNotIn(vs ...int64) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOneTimeFeeAmount), v...))
	})
}

// OneTimeFeeAmountGT applies the GT predicate on the "OneTimeFeeAmount" field.
func OneTimeFeeAmountGT(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOneTimeFeeAmount), v))
	})
}

// OneTimeFeeAmountGTE applies the GTE predicate on the "OneTimeFeeAmount" field.
func OneTimeFeeAmountGTE(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOneTimeFeeAmount), v))
	})
}

// OneTimeFeeAmountLT applies the LT predicate on the "OneTimeFeeAmount" field.
func OneTimeFeeAmountLT(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOneTimeFeeAmount), v))
	})
}

// OneTimeFeeAmountLTE applies the LTE predicate on the "OneTimeFeeAmount" field.
func OneTimeFeeAmountLTE(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOneTimeFeeAmount), v))
	})
}

// SubscriptionFeeEQ applies the EQ predicate on the "SubscriptionFee" field.
func SubscriptionFeeEQ(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscriptionFee), v))
	})
}

// SubscriptionFeeNEQ applies the NEQ predicate on the "SubscriptionFee" field.
func SubscriptionFeeNEQ(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubscriptionFee), v))
	})
}

// SubscriptionFeeIn applies the In predicate on the "SubscriptionFee" field.
func SubscriptionFeeIn(vs ...int64) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubscriptionFee), v...))
	})
}

// SubscriptionFeeNotIn applies the NotIn predicate on the "SubscriptionFee" field.
func SubscriptionFeeNotIn(vs ...int64) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubscriptionFee), v...))
	})
}

// SubscriptionFeeGT applies the GT predicate on the "SubscriptionFee" field.
func SubscriptionFeeGT(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubscriptionFee), v))
	})
}

// SubscriptionFeeGTE applies the GTE predicate on the "SubscriptionFee" field.
func SubscriptionFeeGTE(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubscriptionFee), v))
	})
}

// SubscriptionFeeLT applies the LT predicate on the "SubscriptionFee" field.
func SubscriptionFeeLT(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubscriptionFee), v))
	})
}

// SubscriptionFeeLTE applies the LTE predicate on the "SubscriptionFee" field.
func SubscriptionFeeLTE(v int64) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubscriptionFee), v))
	})
}

// SubscriptionFeeIsNil applies the IsNil predicate on the "SubscriptionFee" field.
func SubscriptionFeeIsNil() predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubscriptionFee)))
	})
}

// SubscriptionFeeNotNil applies the NotNil predicate on the "SubscriptionFee" field.
func SubscriptionFeeNotNil() predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubscriptionFee)))
	})
}

// ProductPriceIDEQ applies the EQ predicate on the "ProductPriceID" field.
func ProductPriceIDEQ(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDNEQ applies the NEQ predicate on the "ProductPriceID" field.
func ProductPriceIDNEQ(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDIn applies the In predicate on the "ProductPriceID" field.
func ProductPriceIDIn(vs ...string) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPriceID), v...))
	})
}

// ProductPriceIDNotIn applies the NotIn predicate on the "ProductPriceID" field.
func ProductPriceIDNotIn(vs ...string) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPriceID), v...))
	})
}

// ProductPriceIDGT applies the GT predicate on the "ProductPriceID" field.
func ProductPriceIDGT(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDGTE applies the GTE predicate on the "ProductPriceID" field.
func ProductPriceIDGTE(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDLT applies the LT predicate on the "ProductPriceID" field.
func ProductPriceIDLT(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDLTE applies the LTE predicate on the "ProductPriceID" field.
func ProductPriceIDLTE(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDContains applies the Contains predicate on the "ProductPriceID" field.
func ProductPriceIDContains(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDHasPrefix applies the HasPrefix predicate on the "ProductPriceID" field.
func ProductPriceIDHasPrefix(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDHasSuffix applies the HasSuffix predicate on the "ProductPriceID" field.
func ProductPriceIDHasSuffix(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDEqualFold applies the EqualFold predicate on the "ProductPriceID" field.
func ProductPriceIDEqualFold(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductPriceID), v))
	})
}

// ProductPriceIDContainsFold applies the ContainsFold predicate on the "ProductPriceID" field.
func ProductPriceIDContainsFold(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductPriceID), v))
	})
}

// SubscriptionPriceIDEQ applies the EQ predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDEQ(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDNEQ applies the NEQ predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDNEQ(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDIn applies the In predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDIn(vs ...string) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubscriptionPriceID), v...))
	})
}

// SubscriptionPriceIDNotIn applies the NotIn predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDNotIn(vs ...string) predicate.Release {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Release(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubscriptionPriceID), v...))
	})
}

// SubscriptionPriceIDGT applies the GT predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDGT(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDGTE applies the GTE predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDGTE(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDLT applies the LT predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDLT(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDLTE applies the LTE predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDLTE(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDContains applies the Contains predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDContains(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDHasPrefix applies the HasPrefix predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDHasPrefix(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDHasSuffix applies the HasSuffix predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDHasSuffix(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDIsNil applies the IsNil predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDIsNil() predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubscriptionPriceID)))
	})
}

// SubscriptionPriceIDNotNil applies the NotNil predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDNotNil() predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubscriptionPriceID)))
	})
}

// SubscriptionPriceIDEqualFold applies the EqualFold predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDEqualFold(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubscriptionPriceID), v))
	})
}

// SubscriptionPriceIDContainsFold applies the ContainsFold predicate on the "SubscriptionPriceID" field.
func SubscriptionPriceIDContainsFold(v string) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubscriptionPriceID), v))
	})
}

// HasCustomers applies the HasEdge predicate on the "Customers" edge.
func HasCustomers() predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomersTable, CustomersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomersWith applies the HasEdge predicate on the "Customers" edge with a given conditions (other predicates).
func HasCustomersWith(preds ...predicate.User) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomersTable, CustomersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Release) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Release) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Release) predicate.Release {
	return predicate.Release(func(s *sql.Selector) {
		p(s.Not())
	})
}
