// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/device"
	"github.com/google/uuid"
)

// Device is the model entity for the Device schema.
type Device struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GpuVendor holds the value of the "gpuVendor" field.
	GpuVendor string `json:"gpuVendor,omitempty"`
	// Plugins holds the value of the "plugins" field.
	Plugins []string `json:"plugins,omitempty"`
	// Adevice holds the value of the "adevice" field.
	Adevice *sonic.Map `json:"adevice,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Device) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case device.FieldPlugins:
			values[i] = new([]byte)
		case device.FieldAdevice:
			values[i] = new(sonic.Map)
		case device.FieldGpuVendor:
			values[i] = new(sql.NullString)
		case device.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Device", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Device fields.
func (d *Device) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case device.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case device.FieldGpuVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpuVendor", values[i])
			} else if value.Valid {
				d.GpuVendor = value.String
			}
		case device.FieldPlugins:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field plugins", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Plugins); err != nil {
					return fmt.Errorf("unmarshal field plugins: %w", err)
				}
			}
		case device.FieldAdevice:
			if value, ok := values[i].(*sonic.Map); !ok {
				return fmt.Errorf("unexpected type %T for field adevice", values[i])
			} else if value != nil {
				d.Adevice = value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Device.
// Note that you need to call Device.Unwrap() before calling this method if this Device
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Device) Update() *DeviceUpdateOne {
	return (&DeviceClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Device entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Device) Unwrap() *Device {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Device is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Device) String() string {
	var builder strings.Builder
	builder.WriteString("Device(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", gpuVendor=")
	builder.WriteString(d.GpuVendor)
	builder.WriteString(", plugins=")
	builder.WriteString(fmt.Sprintf("%v", d.Plugins))
	if v := d.Adevice; v != nil {
		builder.WriteString(", adevice=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Devices is a parsable slice of Device.
type Devices []*Device

func (d Devices) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
