// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/settings"
	"github.com/google/uuid"
)

// SettingsCreate is the builder for creating a Settings entity.
type SettingsCreate struct {
	config
	mutation *SettingsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SettingsCreate) SetCreatedAt(t time.Time) *SettingsCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableCreatedAt(t *time.Time) *SettingsCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SettingsCreate) SetUpdatedAt(t time.Time) *SettingsCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableUpdatedAt(t *time.Time) *SettingsCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetSuccessWebhook sets the "SuccessWebhook" field.
func (sc *SettingsCreate) SetSuccessWebhook(s string) *SettingsCreate {
	sc.mutation.SetSuccessWebhook(s)
	return sc
}

// SetDeclineWebhook sets the "DeclineWebhook" field.
func (sc *SettingsCreate) SetDeclineWebhook(s string) *SettingsCreate {
	sc.mutation.SetDeclineWebhook(s)
	return sc
}

// SetCheckoutDelay sets the "CheckoutDelay" field.
func (sc *SettingsCreate) SetCheckoutDelay(i int) *SettingsCreate {
	sc.mutation.SetCheckoutDelay(i)
	return sc
}

// SetATCDelay sets the "ATCDelay" field.
func (sc *SettingsCreate) SetATCDelay(i int) *SettingsCreate {
	sc.mutation.SetATCDelay(i)
	return sc
}

// SetID sets the "id" field.
func (sc *SettingsCreate) SetID(u uuid.UUID) *SettingsCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetAppID sets the "App" edge to the App entity by ID.
func (sc *SettingsCreate) SetAppID(id uuid.UUID) *SettingsCreate {
	sc.mutation.SetAppID(id)
	return sc
}

// SetApp sets the "App" edge to the App entity.
func (sc *SettingsCreate) SetApp(a *App) *SettingsCreate {
	return sc.SetAppID(a.ID)
}

// Mutation returns the SettingsMutation object of the builder.
func (sc *SettingsCreate) Mutation() *SettingsMutation {
	return sc.mutation
}

// Save creates the Settings in the database.
func (sc *SettingsCreate) Save(ctx context.Context) (*Settings, error) {
	var (
		err  error
		node *Settings
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettingsCreate) SaveX(ctx context.Context) *Settings {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sc *SettingsCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := settings.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := settings.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := settings.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettingsCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := sc.mutation.SuccessWebhook(); !ok {
		return &ValidationError{Name: "SuccessWebhook", err: errors.New("ent: missing required field \"SuccessWebhook\"")}
	}
	if _, ok := sc.mutation.DeclineWebhook(); !ok {
		return &ValidationError{Name: "DeclineWebhook", err: errors.New("ent: missing required field \"DeclineWebhook\"")}
	}
	if _, ok := sc.mutation.CheckoutDelay(); !ok {
		return &ValidationError{Name: "CheckoutDelay", err: errors.New("ent: missing required field \"CheckoutDelay\"")}
	}
	if _, ok := sc.mutation.ATCDelay(); !ok {
		return &ValidationError{Name: "ATCDelay", err: errors.New("ent: missing required field \"ATCDelay\"")}
	}
	if _, ok := sc.mutation.AppID(); !ok {
		return &ValidationError{Name: "App", err: errors.New("ent: missing required edge \"App\"")}
	}
	return nil
}

func (sc *SettingsCreate) sqlSave(ctx context.Context) (*Settings, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (sc *SettingsCreate) createSpec() (*Settings, *sqlgraph.CreateSpec) {
	var (
		_node = &Settings{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: settings.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: settings.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: settings.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: settings.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.SuccessWebhook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldSuccessWebhook,
		})
		_node.SuccessWebhook = value
	}
	if value, ok := sc.mutation.DeclineWebhook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: settings.FieldDeclineWebhook,
		})
		_node.DeclineWebhook = value
	}
	if value, ok := sc.mutation.CheckoutDelay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldCheckoutDelay,
		})
		_node.CheckoutDelay = value
	}
	if value, ok := sc.mutation.ATCDelay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: settings.FieldATCDelay,
		})
		_node.ATCDelay = value
	}
	if nodes := sc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   settings.AppTable,
			Columns: []string{settings.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.app_settings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SettingsCreateBulk is the builder for creating many Settings entities in bulk.
type SettingsCreateBulk struct {
	config
	builders []*SettingsCreate
}

// Save creates the Settings entities in the database.
func (scb *SettingsCreateBulk) Save(ctx context.Context) ([]*Settings, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Settings, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettingsCreateBulk) SaveX(ctx context.Context) []*Settings {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
