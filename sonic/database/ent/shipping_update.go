// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/address"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/shipping"
	"github.com/google/uuid"
)

// ShippingUpdate is the builder for updating Shipping entities.
type ShippingUpdate struct {
	config
	hooks    []Hook
	mutation *ShippingMutation
}

// Where appends a list predicates to the ShippingUpdate builder.
func (su *ShippingUpdate) Where(ps ...predicate.Shipping) *ShippingUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *ShippingUpdate) SetCreatedAt(t time.Time) *ShippingUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *ShippingUpdate) SetNillableCreatedAt(t *time.Time) *ShippingUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ShippingUpdate) SetUpdatedAt(t time.Time) *ShippingUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetFirstName sets the "FirstName" field.
func (su *ShippingUpdate) SetFirstName(s string) *ShippingUpdate {
	su.mutation.SetFirstName(s)
	return su
}

// SetLastName sets the "LastName" field.
func (su *ShippingUpdate) SetLastName(s string) *ShippingUpdate {
	su.mutation.SetLastName(s)
	return su
}

// SetPhoneNumber sets the "PhoneNumber" field.
func (su *ShippingUpdate) SetPhoneNumber(s string) *ShippingUpdate {
	su.mutation.SetPhoneNumber(s)
	return su
}

// SetBillingIsShipping sets the "BillingIsShipping" field.
func (su *ShippingUpdate) SetBillingIsShipping(b bool) *ShippingUpdate {
	su.mutation.SetBillingIsShipping(b)
	return su
}

// SetProfileID sets the "Profile" edge to the Profile entity by ID.
func (su *ShippingUpdate) SetProfileID(id uuid.UUID) *ShippingUpdate {
	su.mutation.SetProfileID(id)
	return su
}

// SetNillableProfileID sets the "Profile" edge to the Profile entity by ID if the given value is not nil.
func (su *ShippingUpdate) SetNillableProfileID(id *uuid.UUID) *ShippingUpdate {
	if id != nil {
		su = su.SetProfileID(*id)
	}
	return su
}

// SetProfile sets the "Profile" edge to the Profile entity.
func (su *ShippingUpdate) SetProfile(p *Profile) *ShippingUpdate {
	return su.SetProfileID(p.ID)
}

// SetShippingAddressID sets the "ShippingAddress" edge to the Address entity by ID.
func (su *ShippingUpdate) SetShippingAddressID(id uuid.UUID) *ShippingUpdate {
	su.mutation.SetShippingAddressID(id)
	return su
}

// SetNillableShippingAddressID sets the "ShippingAddress" edge to the Address entity by ID if the given value is not nil.
func (su *ShippingUpdate) SetNillableShippingAddressID(id *uuid.UUID) *ShippingUpdate {
	if id != nil {
		su = su.SetShippingAddressID(*id)
	}
	return su
}

// SetShippingAddress sets the "ShippingAddress" edge to the Address entity.
func (su *ShippingUpdate) SetShippingAddress(a *Address) *ShippingUpdate {
	return su.SetShippingAddressID(a.ID)
}

// AddBillingAddresIDs adds the "BillingAddress" edge to the Address entity by IDs.
func (su *ShippingUpdate) AddBillingAddresIDs(ids ...uuid.UUID) *ShippingUpdate {
	su.mutation.AddBillingAddresIDs(ids...)
	return su
}

// AddBillingAddress adds the "BillingAddress" edges to the Address entity.
func (su *ShippingUpdate) AddBillingAddress(a ...*Address) *ShippingUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddBillingAddresIDs(ids...)
}

// Mutation returns the ShippingMutation object of the builder.
func (su *ShippingUpdate) Mutation() *ShippingMutation {
	return su.mutation
}

// ClearProfile clears the "Profile" edge to the Profile entity.
func (su *ShippingUpdate) ClearProfile() *ShippingUpdate {
	su.mutation.ClearProfile()
	return su
}

// ClearShippingAddress clears the "ShippingAddress" edge to the Address entity.
func (su *ShippingUpdate) ClearShippingAddress() *ShippingUpdate {
	su.mutation.ClearShippingAddress()
	return su
}

// ClearBillingAddress clears all "BillingAddress" edges to the Address entity.
func (su *ShippingUpdate) ClearBillingAddress() *ShippingUpdate {
	su.mutation.ClearBillingAddress()
	return su
}

// RemoveBillingAddresIDs removes the "BillingAddress" edge to Address entities by IDs.
func (su *ShippingUpdate) RemoveBillingAddresIDs(ids ...uuid.UUID) *ShippingUpdate {
	su.mutation.RemoveBillingAddresIDs(ids...)
	return su
}

// RemoveBillingAddress removes "BillingAddress" edges to Address entities.
func (su *ShippingUpdate) RemoveBillingAddress(a ...*Address) *ShippingUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveBillingAddresIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShippingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShippingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShippingUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShippingUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShippingUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ShippingUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := shipping.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ShippingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipping.Table,
			Columns: shipping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: shipping.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipping.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipping.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldFirstName,
		})
	}
	if value, ok := su.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldLastName,
		})
	}
	if value, ok := su.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldPhoneNumber,
		})
	}
	if value, ok := su.mutation.BillingIsShipping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shipping.FieldBillingIsShipping,
		})
	}
	if su.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipping.ProfileTable,
			Columns: []string{shipping.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipping.ProfileTable,
			Columns: []string{shipping.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShippingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipping.ShippingAddressTable,
			Columns: []string{shipping.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShippingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipping.ShippingAddressTable,
			Columns: []string{shipping.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipping.BillingAddressTable,
			Columns: shipping.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBillingAddressIDs(); len(nodes) > 0 && !su.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipping.BillingAddressTable,
			Columns: shipping.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipping.BillingAddressTable,
			Columns: shipping.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ShippingUpdateOne is the builder for updating a single Shipping entity.
type ShippingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShippingMutation
}

// SetCreatedAt sets the "created_at" field.
func (suo *ShippingUpdateOne) SetCreatedAt(t time.Time) *ShippingUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *ShippingUpdateOne) SetNillableCreatedAt(t *time.Time) *ShippingUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ShippingUpdateOne) SetUpdatedAt(t time.Time) *ShippingUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetFirstName sets the "FirstName" field.
func (suo *ShippingUpdateOne) SetFirstName(s string) *ShippingUpdateOne {
	suo.mutation.SetFirstName(s)
	return suo
}

// SetLastName sets the "LastName" field.
func (suo *ShippingUpdateOne) SetLastName(s string) *ShippingUpdateOne {
	suo.mutation.SetLastName(s)
	return suo
}

// SetPhoneNumber sets the "PhoneNumber" field.
func (suo *ShippingUpdateOne) SetPhoneNumber(s string) *ShippingUpdateOne {
	suo.mutation.SetPhoneNumber(s)
	return suo
}

// SetBillingIsShipping sets the "BillingIsShipping" field.
func (suo *ShippingUpdateOne) SetBillingIsShipping(b bool) *ShippingUpdateOne {
	suo.mutation.SetBillingIsShipping(b)
	return suo
}

// SetProfileID sets the "Profile" edge to the Profile entity by ID.
func (suo *ShippingUpdateOne) SetProfileID(id uuid.UUID) *ShippingUpdateOne {
	suo.mutation.SetProfileID(id)
	return suo
}

// SetNillableProfileID sets the "Profile" edge to the Profile entity by ID if the given value is not nil.
func (suo *ShippingUpdateOne) SetNillableProfileID(id *uuid.UUID) *ShippingUpdateOne {
	if id != nil {
		suo = suo.SetProfileID(*id)
	}
	return suo
}

// SetProfile sets the "Profile" edge to the Profile entity.
func (suo *ShippingUpdateOne) SetProfile(p *Profile) *ShippingUpdateOne {
	return suo.SetProfileID(p.ID)
}

// SetShippingAddressID sets the "ShippingAddress" edge to the Address entity by ID.
func (suo *ShippingUpdateOne) SetShippingAddressID(id uuid.UUID) *ShippingUpdateOne {
	suo.mutation.SetShippingAddressID(id)
	return suo
}

// SetNillableShippingAddressID sets the "ShippingAddress" edge to the Address entity by ID if the given value is not nil.
func (suo *ShippingUpdateOne) SetNillableShippingAddressID(id *uuid.UUID) *ShippingUpdateOne {
	if id != nil {
		suo = suo.SetShippingAddressID(*id)
	}
	return suo
}

// SetShippingAddress sets the "ShippingAddress" edge to the Address entity.
func (suo *ShippingUpdateOne) SetShippingAddress(a *Address) *ShippingUpdateOne {
	return suo.SetShippingAddressID(a.ID)
}

// AddBillingAddresIDs adds the "BillingAddress" edge to the Address entity by IDs.
func (suo *ShippingUpdateOne) AddBillingAddresIDs(ids ...uuid.UUID) *ShippingUpdateOne {
	suo.mutation.AddBillingAddresIDs(ids...)
	return suo
}

// AddBillingAddress adds the "BillingAddress" edges to the Address entity.
func (suo *ShippingUpdateOne) AddBillingAddress(a ...*Address) *ShippingUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddBillingAddresIDs(ids...)
}

// Mutation returns the ShippingMutation object of the builder.
func (suo *ShippingUpdateOne) Mutation() *ShippingMutation {
	return suo.mutation
}

// ClearProfile clears the "Profile" edge to the Profile entity.
func (suo *ShippingUpdateOne) ClearProfile() *ShippingUpdateOne {
	suo.mutation.ClearProfile()
	return suo
}

// ClearShippingAddress clears the "ShippingAddress" edge to the Address entity.
func (suo *ShippingUpdateOne) ClearShippingAddress() *ShippingUpdateOne {
	suo.mutation.ClearShippingAddress()
	return suo
}

// ClearBillingAddress clears all "BillingAddress" edges to the Address entity.
func (suo *ShippingUpdateOne) ClearBillingAddress() *ShippingUpdateOne {
	suo.mutation.ClearBillingAddress()
	return suo
}

// RemoveBillingAddresIDs removes the "BillingAddress" edge to Address entities by IDs.
func (suo *ShippingUpdateOne) RemoveBillingAddresIDs(ids ...uuid.UUID) *ShippingUpdateOne {
	suo.mutation.RemoveBillingAddresIDs(ids...)
	return suo
}

// RemoveBillingAddress removes "BillingAddress" edges to Address entities.
func (suo *ShippingUpdateOne) RemoveBillingAddress(a ...*Address) *ShippingUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveBillingAddresIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShippingUpdateOne) Select(field string, fields ...string) *ShippingUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shipping entity.
func (suo *ShippingUpdateOne) Save(ctx context.Context) (*Shipping, error) {
	var (
		err  error
		node *Shipping
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShippingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShippingUpdateOne) SaveX(ctx context.Context) *Shipping {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShippingUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShippingUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ShippingUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := shipping.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ShippingUpdateOne) sqlSave(ctx context.Context) (_node *Shipping, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shipping.Table,
			Columns: shipping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: shipping.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Shipping.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipping.FieldID)
		for _, f := range fields {
			if !shipping.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipping.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipping.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipping.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldFirstName,
		})
	}
	if value, ok := suo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldLastName,
		})
	}
	if value, ok := suo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldPhoneNumber,
		})
	}
	if value, ok := suo.mutation.BillingIsShipping(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shipping.FieldBillingIsShipping,
		})
	}
	if suo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipping.ProfileTable,
			Columns: []string{shipping.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipping.ProfileTable,
			Columns: []string{shipping.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShippingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipping.ShippingAddressTable,
			Columns: []string{shipping.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShippingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipping.ShippingAddressTable,
			Columns: []string{shipping.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipping.BillingAddressTable,
			Columns: shipping.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBillingAddressIDs(); len(nodes) > 0 && !suo.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipping.BillingAddressTable,
			Columns: shipping.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipping.BillingAddressTable,
			Columns: shipping.BillingAddressPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shipping{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipping.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
