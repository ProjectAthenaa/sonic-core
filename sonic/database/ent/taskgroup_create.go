// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/task"
	"github.com/ProjectAthenaa/sonic-core/sonic/models/ent/taskgroup"
)

// TaskGroupCreate is the builder for creating a TaskGroup entity.
type TaskGroupCreate struct {
	config
	mutation *TaskGroupMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (tgc *TaskGroupCreate) SetName(s string) *TaskGroupCreate {
	tgc.mutation.SetName(s)
	return tgc
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (tgc *TaskGroupCreate) AddAppIDs(ids ...int) *TaskGroupCreate {
	tgc.mutation.AddAppIDs(ids...)
	return tgc
}

// AddApp adds the "App" edges to the App entity.
func (tgc *TaskGroupCreate) AddApp(a ...*App) *TaskGroupCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tgc.AddAppIDs(ids...)
}

// AddTaskIDs adds the "Tasks" edge to the Task entity by IDs.
func (tgc *TaskGroupCreate) AddTaskIDs(ids ...int) *TaskGroupCreate {
	tgc.mutation.AddTaskIDs(ids...)
	return tgc
}

// AddTasks adds the "Tasks" edges to the Task entity.
func (tgc *TaskGroupCreate) AddTasks(t ...*Task) *TaskGroupCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgc.AddTaskIDs(ids...)
}

// Mutation returns the TaskGroupMutation object of the builder.
func (tgc *TaskGroupCreate) Mutation() *TaskGroupMutation {
	return tgc.mutation
}

// Save creates the TaskGroup in the database.
func (tgc *TaskGroupCreate) Save(ctx context.Context) (*TaskGroup, error) {
	var (
		err  error
		node *TaskGroup
	)
	if len(tgc.hooks) == 0 {
		if err = tgc.check(); err != nil {
			return nil, err
		}
		node, err = tgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tgc.check(); err != nil {
				return nil, err
			}
			tgc.mutation = mutation
			node, err = tgc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tgc.hooks) - 1; i >= 0; i-- {
			mut = tgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tgc *TaskGroupCreate) SaveX(ctx context.Context) *TaskGroup {
	v, err := tgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (tgc *TaskGroupCreate) check() error {
	if _, ok := tgc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New("ent: missing required field \"Name\"")}
	}
	if len(tgc.mutation.AppIDs()) == 0 {
		return &ValidationError{Name: "App", err: errors.New("ent: missing required edge \"App\"")}
	}
	return nil
}

func (tgc *TaskGroupCreate) sqlSave(ctx context.Context) (*TaskGroup, error) {
	_node, _spec := tgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tgc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tgc *TaskGroupCreate) createSpec() (*TaskGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskGroup{config: tgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskgroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: taskgroup.FieldID,
			},
		}
	)
	if value, ok := tgc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskgroup.FieldName,
		})
		_node.Name = value
	}
	if nodes := tgc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   taskgroup.AppTable,
			Columns: taskgroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tgc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskgroup.TasksTable,
			Columns: taskgroup.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskGroupCreateBulk is the builder for creating many TaskGroup entities in bulk.
type TaskGroupCreateBulk struct {
	config
	builders []*TaskGroupCreate
}

// Save creates the TaskGroup entities in the database.
func (tgcb *TaskGroupCreateBulk) Save(ctx context.Context) ([]*TaskGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tgcb.builders))
	nodes := make([]*TaskGroup, len(tgcb.builders))
	mutators := make([]Mutator, len(tgcb.builders))
	for i := range tgcb.builders {
		func(i int, root context.Context) {
			builder := tgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tgcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tgcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tgcb *TaskGroupCreateBulk) SaveX(ctx context.Context) []*TaskGroup {
	v, err := tgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
