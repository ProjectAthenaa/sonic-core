// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/taskgroup"
	"github.com/google/uuid"
)

// TaskGroupCreate is the builder for creating a TaskGroup entity.
type TaskGroupCreate struct {
	config
	mutation *TaskGroupMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tgc *TaskGroupCreate) SetCreatedAt(t time.Time) *TaskGroupCreate {
	tgc.mutation.SetCreatedAt(t)
	return tgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tgc *TaskGroupCreate) SetNillableCreatedAt(t *time.Time) *TaskGroupCreate {
	if t != nil {
		tgc.SetCreatedAt(*t)
	}
	return tgc
}

// SetUpdatedAt sets the "updated_at" field.
func (tgc *TaskGroupCreate) SetUpdatedAt(t time.Time) *TaskGroupCreate {
	tgc.mutation.SetUpdatedAt(t)
	return tgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tgc *TaskGroupCreate) SetNillableUpdatedAt(t *time.Time) *TaskGroupCreate {
	if t != nil {
		tgc.SetUpdatedAt(*t)
	}
	return tgc
}

// SetName sets the "Name" field.
func (tgc *TaskGroupCreate) SetName(s string) *TaskGroupCreate {
	tgc.mutation.SetName(s)
	return tgc
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (tgc *TaskGroupCreate) SetNillableName(s *string) *TaskGroupCreate {
	if s != nil {
		tgc.SetName(*s)
	}
	return tgc
}

// SetID sets the "id" field.
func (tgc *TaskGroupCreate) SetID(u uuid.UUID) *TaskGroupCreate {
	tgc.mutation.SetID(u)
	return tgc
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (tgc *TaskGroupCreate) AddAppIDs(ids ...uuid.UUID) *TaskGroupCreate {
	tgc.mutation.AddAppIDs(ids...)
	return tgc
}

// AddApp adds the "App" edges to the App entity.
func (tgc *TaskGroupCreate) AddApp(a ...*App) *TaskGroupCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tgc.AddAppIDs(ids...)
}

// AddTaskIDs adds the "Tasks" edge to the Task entity by IDs.
func (tgc *TaskGroupCreate) AddTaskIDs(ids ...uuid.UUID) *TaskGroupCreate {
	tgc.mutation.AddTaskIDs(ids...)
	return tgc
}

// AddTasks adds the "Tasks" edges to the Task entity.
func (tgc *TaskGroupCreate) AddTasks(t ...*Task) *TaskGroupCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgc.AddTaskIDs(ids...)
}

// Mutation returns the TaskGroupMutation object of the builder.
func (tgc *TaskGroupCreate) Mutation() *TaskGroupMutation {
	return tgc.mutation
}

// Save creates the TaskGroup in the database.
func (tgc *TaskGroupCreate) Save(ctx context.Context) (*TaskGroup, error) {
	var (
		err  error
		node *TaskGroup
	)
	tgc.defaults()
	if len(tgc.hooks) == 0 {
		if err = tgc.check(); err != nil {
			return nil, err
		}
		node, err = tgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tgc.check(); err != nil {
				return nil, err
			}
			tgc.mutation = mutation
			if node, err = tgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tgc.hooks) - 1; i >= 0; i-- {
			if tgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tgc *TaskGroupCreate) SaveX(ctx context.Context) *TaskGroup {
	v, err := tgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgc *TaskGroupCreate) Exec(ctx context.Context) error {
	_, err := tgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgc *TaskGroupCreate) ExecX(ctx context.Context) {
	if err := tgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tgc *TaskGroupCreate) defaults() {
	if _, ok := tgc.mutation.CreatedAt(); !ok {
		v := taskgroup.DefaultCreatedAt()
		tgc.mutation.SetCreatedAt(v)
	}
	if _, ok := tgc.mutation.UpdatedAt(); !ok {
		v := taskgroup.DefaultUpdatedAt()
		tgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tgc.mutation.Name(); !ok {
		v := taskgroup.DefaultName
		tgc.mutation.SetName(v)
	}
	if _, ok := tgc.mutation.ID(); !ok {
		v := taskgroup.DefaultID()
		tgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgc *TaskGroupCreate) check() error {
	if _, ok := tgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := tgc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Name"`)}
	}
	if len(tgc.mutation.AppIDs()) == 0 {
		return &ValidationError{Name: "App", err: errors.New("ent: missing required edge \"App\"")}
	}
	return nil
}

func (tgc *TaskGroupCreate) sqlSave(ctx context.Context) (*TaskGroup, error) {
	_node, _spec := tgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (tgc *TaskGroupCreate) createSpec() (*TaskGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskGroup{config: tgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskgroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: taskgroup.FieldID,
			},
		}
	)
	if id, ok := tgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskgroup.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: taskgroup.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tgc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: taskgroup.FieldName,
		})
		_node.Name = value
	}
	if nodes := tgc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   taskgroup.AppTable,
			Columns: taskgroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tgc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   taskgroup.TasksTable,
			Columns: taskgroup.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskGroupCreateBulk is the builder for creating many TaskGroup entities in bulk.
type TaskGroupCreateBulk struct {
	config
	builders []*TaskGroupCreate
}

// Save creates the TaskGroup entities in the database.
func (tgcb *TaskGroupCreateBulk) Save(ctx context.Context) ([]*TaskGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tgcb.builders))
	nodes := make([]*TaskGroup, len(tgcb.builders))
	mutators := make([]Mutator, len(tgcb.builders))
	for i := range tgcb.builders {
		func(i int, root context.Context) {
			builder := tgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tgcb *TaskGroupCreateBulk) SaveX(ctx context.Context) []*TaskGroup {
	v, err := tgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgcb *TaskGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := tgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgcb *TaskGroupCreateBulk) ExecX(ctx context.Context) {
	if err := tgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
