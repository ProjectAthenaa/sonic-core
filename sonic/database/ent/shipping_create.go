// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/address"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/shipping"
	"github.com/google/uuid"
)

// ShippingCreate is the builder for creating a Shipping entity.
type ShippingCreate struct {
	config
	mutation *ShippingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShippingCreate) SetCreatedAt(t time.Time) *ShippingCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShippingCreate) SetNillableCreatedAt(t *time.Time) *ShippingCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ShippingCreate) SetUpdatedAt(t time.Time) *ShippingCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ShippingCreate) SetNillableUpdatedAt(t *time.Time) *ShippingCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetFirstName sets the "FirstName" field.
func (sc *ShippingCreate) SetFirstName(s string) *ShippingCreate {
	sc.mutation.SetFirstName(s)
	return sc
}

// SetLastName sets the "LastName" field.
func (sc *ShippingCreate) SetLastName(s string) *ShippingCreate {
	sc.mutation.SetLastName(s)
	return sc
}

// SetPhoneNumber sets the "PhoneNumber" field.
func (sc *ShippingCreate) SetPhoneNumber(s string) *ShippingCreate {
	sc.mutation.SetPhoneNumber(s)
	return sc
}

// SetBillingIsShipping sets the "BillingIsShipping" field.
func (sc *ShippingCreate) SetBillingIsShipping(b bool) *ShippingCreate {
	sc.mutation.SetBillingIsShipping(b)
	return sc
}

// SetID sets the "id" field.
func (sc *ShippingCreate) SetID(u uuid.UUID) *ShippingCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetProfileID sets the "Profile" edge to the Profile entity by ID.
func (sc *ShippingCreate) SetProfileID(id uuid.UUID) *ShippingCreate {
	sc.mutation.SetProfileID(id)
	return sc
}

// SetNillableProfileID sets the "Profile" edge to the Profile entity by ID if the given value is not nil.
func (sc *ShippingCreate) SetNillableProfileID(id *uuid.UUID) *ShippingCreate {
	if id != nil {
		sc = sc.SetProfileID(*id)
	}
	return sc
}

// SetProfile sets the "Profile" edge to the Profile entity.
func (sc *ShippingCreate) SetProfile(p *Profile) *ShippingCreate {
	return sc.SetProfileID(p.ID)
}

// SetShippingAddressID sets the "ShippingAddress" edge to the Address entity by ID.
func (sc *ShippingCreate) SetShippingAddressID(id uuid.UUID) *ShippingCreate {
	sc.mutation.SetShippingAddressID(id)
	return sc
}

// SetShippingAddress sets the "ShippingAddress" edge to the Address entity.
func (sc *ShippingCreate) SetShippingAddress(a *Address) *ShippingCreate {
	return sc.SetShippingAddressID(a.ID)
}

// SetBillingAddressID sets the "BillingAddress" edge to the Address entity by ID.
func (sc *ShippingCreate) SetBillingAddressID(id uuid.UUID) *ShippingCreate {
	sc.mutation.SetBillingAddressID(id)
	return sc
}

// SetNillableBillingAddressID sets the "BillingAddress" edge to the Address entity by ID if the given value is not nil.
func (sc *ShippingCreate) SetNillableBillingAddressID(id *uuid.UUID) *ShippingCreate {
	if id != nil {
		sc = sc.SetBillingAddressID(*id)
	}
	return sc
}

// SetBillingAddress sets the "BillingAddress" edge to the Address entity.
func (sc *ShippingCreate) SetBillingAddress(a *Address) *ShippingCreate {
	return sc.SetBillingAddressID(a.ID)
}

// Mutation returns the ShippingMutation object of the builder.
func (sc *ShippingCreate) Mutation() *ShippingMutation {
	return sc.mutation
}

// Save creates the Shipping in the database.
func (sc *ShippingCreate) Save(ctx context.Context) (*Shipping, error) {
	var (
		err  error
		node *Shipping
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShippingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShippingCreate) SaveX(ctx context.Context) *Shipping {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShippingCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShippingCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShippingCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := shipping.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := shipping.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := shipping.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShippingCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := sc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "FirstName", err: errors.New(`ent: missing required field "FirstName"`)}
	}
	if _, ok := sc.mutation.LastName(); !ok {
		return &ValidationError{Name: "LastName", err: errors.New(`ent: missing required field "LastName"`)}
	}
	if _, ok := sc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "PhoneNumber", err: errors.New(`ent: missing required field "PhoneNumber"`)}
	}
	if _, ok := sc.mutation.BillingIsShipping(); !ok {
		return &ValidationError{Name: "BillingIsShipping", err: errors.New(`ent: missing required field "BillingIsShipping"`)}
	}
	if _, ok := sc.mutation.ShippingAddressID(); !ok {
		return &ValidationError{Name: "ShippingAddress", err: errors.New("ent: missing required edge \"ShippingAddress\"")}
	}
	return nil
}

func (sc *ShippingCreate) sqlSave(ctx context.Context) (*Shipping, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (sc *ShippingCreate) createSpec() (*Shipping, *sqlgraph.CreateSpec) {
	var (
		_node = &Shipping{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shipping.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: shipping.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipping.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shipping.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := sc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := sc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shipping.FieldPhoneNumber,
		})
		_node.PhoneNumber = value
	}
	if value, ok := sc.mutation.BillingIsShipping(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shipping.FieldBillingIsShipping,
		})
		_node.BillingIsShipping = value
	}
	if nodes := sc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipping.ProfileTable,
			Columns: []string{shipping.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_shipping = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShippingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipping.ShippingAddressTable,
			Columns: []string{shipping.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipping.BillingAddressTable,
			Columns: []string{shipping.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShippingCreateBulk is the builder for creating many Shipping entities in bulk.
type ShippingCreateBulk struct {
	config
	builders []*ShippingCreate
}

// Save creates the Shipping entities in the database.
func (scb *ShippingCreateBulk) Save(ctx context.Context) ([]*Shipping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shipping, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShippingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShippingCreateBulk) SaveX(ctx context.Context) []*Shipping {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShippingCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShippingCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
