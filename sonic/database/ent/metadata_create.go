// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/metadata"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// MetadataCreate is the builder for creating a Metadata entity.
type MetadataCreate struct {
	config
	mutation *MetadataMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mc *MetadataCreate) SetCreatedAt(t time.Time) *MetadataCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableCreatedAt(t *time.Time) *MetadataCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MetadataCreate) SetUpdatedAt(t time.Time) *MetadataCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableUpdatedAt(t *time.Time) *MetadataCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetFirstLogin sets the "FirstLogin" field.
func (mc *MetadataCreate) SetFirstLogin(b bool) *MetadataCreate {
	mc.mutation.SetFirstLogin(b)
	return mc
}

// SetNillableFirstLogin sets the "FirstLogin" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableFirstLogin(b *bool) *MetadataCreate {
	if b != nil {
		mc.SetFirstLogin(*b)
	}
	return mc
}

// SetTheme sets the "Theme" field.
func (mc *MetadataCreate) SetTheme(m metadata.Theme) *MetadataCreate {
	mc.mutation.SetTheme(m)
	return mc
}

// SetNillableTheme sets the "Theme" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableTheme(m *metadata.Theme) *MetadataCreate {
	if m != nil {
		mc.SetTheme(*m)
	}
	return mc
}

// SetDiscordID sets the "DiscordID" field.
func (mc *MetadataCreate) SetDiscordID(s string) *MetadataCreate {
	mc.mutation.SetDiscordID(s)
	return mc
}

// SetNillableDiscordID sets the "DiscordID" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableDiscordID(s *string) *MetadataCreate {
	if s != nil {
		mc.SetDiscordID(*s)
	}
	return mc
}

// SetDiscordAccessToken sets the "DiscordAccessToken" field.
func (mc *MetadataCreate) SetDiscordAccessToken(s string) *MetadataCreate {
	mc.mutation.SetDiscordAccessToken(s)
	return mc
}

// SetNillableDiscordAccessToken sets the "DiscordAccessToken" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableDiscordAccessToken(s *string) *MetadataCreate {
	if s != nil {
		mc.SetDiscordAccessToken(*s)
	}
	return mc
}

// SetDiscordRefreshToken sets the "DiscordRefreshToken" field.
func (mc *MetadataCreate) SetDiscordRefreshToken(s string) *MetadataCreate {
	mc.mutation.SetDiscordRefreshToken(s)
	return mc
}

// SetNillableDiscordRefreshToken sets the "DiscordRefreshToken" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableDiscordRefreshToken(s *string) *MetadataCreate {
	if s != nil {
		mc.SetDiscordRefreshToken(*s)
	}
	return mc
}

// SetDiscordUsername sets the "DiscordUsername" field.
func (mc *MetadataCreate) SetDiscordUsername(s string) *MetadataCreate {
	mc.mutation.SetDiscordUsername(s)
	return mc
}

// SetNillableDiscordUsername sets the "DiscordUsername" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableDiscordUsername(s *string) *MetadataCreate {
	if s != nil {
		mc.SetDiscordUsername(*s)
	}
	return mc
}

// SetDiscordAvatar sets the "DiscordAvatar" field.
func (mc *MetadataCreate) SetDiscordAvatar(s string) *MetadataCreate {
	mc.mutation.SetDiscordAvatar(s)
	return mc
}

// SetNillableDiscordAvatar sets the "DiscordAvatar" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableDiscordAvatar(s *string) *MetadataCreate {
	if s != nil {
		mc.SetDiscordAvatar(*s)
	}
	return mc
}

// SetDiscordDiscriminator sets the "DiscordDiscriminator" field.
func (mc *MetadataCreate) SetDiscordDiscriminator(s string) *MetadataCreate {
	mc.mutation.SetDiscordDiscriminator(s)
	return mc
}

// SetNillableDiscordDiscriminator sets the "DiscordDiscriminator" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableDiscordDiscriminator(s *string) *MetadataCreate {
	if s != nil {
		mc.SetDiscordDiscriminator(*s)
	}
	return mc
}

// SetDiscordExpiryTime sets the "DiscordExpiryTime" field.
func (mc *MetadataCreate) SetDiscordExpiryTime(t time.Time) *MetadataCreate {
	mc.mutation.SetDiscordExpiryTime(t)
	return mc
}

// SetNillableDiscordExpiryTime sets the "DiscordExpiryTime" field if the given value is not nil.
func (mc *MetadataCreate) SetNillableDiscordExpiryTime(t *time.Time) *MetadataCreate {
	if t != nil {
		mc.SetDiscordExpiryTime(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MetadataCreate) SetID(u uuid.UUID) *MetadataCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mc *MetadataCreate) SetUserID(id uuid.UUID) *MetadataCreate {
	mc.mutation.SetUserID(id)
	return mc
}

// SetUser sets the "user" edge to the User entity.
func (mc *MetadataCreate) SetUser(u *User) *MetadataCreate {
	return mc.SetUserID(u.ID)
}

// Mutation returns the MetadataMutation object of the builder.
func (mc *MetadataCreate) Mutation() *MetadataMutation {
	return mc.mutation
}

// Save creates the Metadata in the database.
func (mc *MetadataCreate) Save(ctx context.Context) (*Metadata, error) {
	var (
		err  error
		node *Metadata
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MetadataCreate) SaveX(ctx context.Context) *Metadata {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mc *MetadataCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := metadata.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := metadata.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.FirstLogin(); !ok {
		v := metadata.DefaultFirstLogin
		mc.mutation.SetFirstLogin(v)
	}
	if _, ok := mc.mutation.Theme(); !ok {
		v := metadata.DefaultTheme
		mc.mutation.SetTheme(v)
	}
	if _, ok := mc.mutation.DiscordID(); !ok {
		v := metadata.DefaultDiscordID
		mc.mutation.SetDiscordID(v)
	}
	if _, ok := mc.mutation.DiscordAccessToken(); !ok {
		v := metadata.DefaultDiscordAccessToken
		mc.mutation.SetDiscordAccessToken(v)
	}
	if _, ok := mc.mutation.DiscordRefreshToken(); !ok {
		v := metadata.DefaultDiscordRefreshToken
		mc.mutation.SetDiscordRefreshToken(v)
	}
	if _, ok := mc.mutation.DiscordUsername(); !ok {
		v := metadata.DefaultDiscordUsername
		mc.mutation.SetDiscordUsername(v)
	}
	if _, ok := mc.mutation.DiscordAvatar(); !ok {
		v := metadata.DefaultDiscordAvatar
		mc.mutation.SetDiscordAvatar(v)
	}
	if _, ok := mc.mutation.DiscordDiscriminator(); !ok {
		v := metadata.DefaultDiscordDiscriminator
		mc.mutation.SetDiscordDiscriminator(v)
	}
	if _, ok := mc.mutation.DiscordExpiryTime(); !ok {
		v := metadata.DefaultDiscordExpiryTime()
		mc.mutation.SetDiscordExpiryTime(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := metadata.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MetadataCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := mc.mutation.FirstLogin(); !ok {
		return &ValidationError{Name: "FirstLogin", err: errors.New("ent: missing required field \"FirstLogin\"")}
	}
	if _, ok := mc.mutation.Theme(); !ok {
		return &ValidationError{Name: "Theme", err: errors.New("ent: missing required field \"Theme\"")}
	}
	if v, ok := mc.mutation.Theme(); ok {
		if err := metadata.ThemeValidator(v); err != nil {
			return &ValidationError{Name: "Theme", err: fmt.Errorf("ent: validator failed for field \"Theme\": %w", err)}
		}
	}
	if _, ok := mc.mutation.DiscordID(); !ok {
		return &ValidationError{Name: "DiscordID", err: errors.New("ent: missing required field \"DiscordID\"")}
	}
	if _, ok := mc.mutation.DiscordAccessToken(); !ok {
		return &ValidationError{Name: "DiscordAccessToken", err: errors.New("ent: missing required field \"DiscordAccessToken\"")}
	}
	if _, ok := mc.mutation.DiscordRefreshToken(); !ok {
		return &ValidationError{Name: "DiscordRefreshToken", err: errors.New("ent: missing required field \"DiscordRefreshToken\"")}
	}
	if _, ok := mc.mutation.DiscordUsername(); !ok {
		return &ValidationError{Name: "DiscordUsername", err: errors.New("ent: missing required field \"DiscordUsername\"")}
	}
	if _, ok := mc.mutation.DiscordAvatar(); !ok {
		return &ValidationError{Name: "DiscordAvatar", err: errors.New("ent: missing required field \"DiscordAvatar\"")}
	}
	if _, ok := mc.mutation.DiscordDiscriminator(); !ok {
		return &ValidationError{Name: "DiscordDiscriminator", err: errors.New("ent: missing required field \"DiscordDiscriminator\"")}
	}
	if _, ok := mc.mutation.DiscordExpiryTime(); !ok {
		return &ValidationError{Name: "DiscordExpiryTime", err: errors.New("ent: missing required field \"DiscordExpiryTime\"")}
	}
	if _, ok := mc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (mc *MetadataCreate) sqlSave(ctx context.Context) (*Metadata, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (mc *MetadataCreate) createSpec() (*Metadata, *sqlgraph.CreateSpec) {
	var (
		_node = &Metadata{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: metadata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: metadata.FieldID,
			},
		}
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.FirstLogin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metadata.FieldFirstLogin,
		})
		_node.FirstLogin = value
	}
	if value, ok := mc.mutation.Theme(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: metadata.FieldTheme,
		})
		_node.Theme = value
	}
	if value, ok := mc.mutation.DiscordID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordID,
		})
		_node.DiscordID = value
	}
	if value, ok := mc.mutation.DiscordAccessToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordAccessToken,
		})
		_node.DiscordAccessToken = value
	}
	if value, ok := mc.mutation.DiscordRefreshToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordRefreshToken,
		})
		_node.DiscordRefreshToken = value
	}
	if value, ok := mc.mutation.DiscordUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordUsername,
		})
		_node.DiscordUsername = value
	}
	if value, ok := mc.mutation.DiscordAvatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordAvatar,
		})
		_node.DiscordAvatar = value
	}
	if value, ok := mc.mutation.DiscordDiscriminator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordDiscriminator,
		})
		_node.DiscordDiscriminator = value
	}
	if value, ok := mc.mutation.DiscordExpiryTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldDiscordExpiryTime,
		})
		_node.DiscordExpiryTime = value
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metadata.UserTable,
			Columns: []string{metadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MetadataCreateBulk is the builder for creating many Metadata entities in bulk.
type MetadataCreateBulk struct {
	config
	builders []*MetadataCreate
}

// Save creates the Metadata entities in the database.
func (mcb *MetadataCreateBulk) Save(ctx context.Context) ([]*Metadata, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Metadata, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MetadataCreateBulk) SaveX(ctx context.Context) []*Metadata {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
