// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/stripe"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// LicenseUpdate is the builder for updating License entities.
type LicenseUpdate struct {
	config
	hooks    []Hook
	mutation *LicenseMutation
}

// Where adds a new predicate for the LicenseUpdate builder.
func (lu *LicenseUpdate) Where(ps ...predicate.License) *LicenseUpdate {
	lu.mutation.predicates = append(lu.mutation.predicates, ps...)
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LicenseUpdate) SetCreatedAt(t time.Time) *LicenseUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableCreatedAt(t *time.Time) *LicenseUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LicenseUpdate) SetUpdatedAt(t time.Time) *LicenseUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetKey sets the "Key" field.
func (lu *LicenseUpdate) SetKey(s string) *LicenseUpdate {
	lu.mutation.SetKey(s)
	return lu
}

// SetHardwareID sets the "HardwareID" field.
func (lu *LicenseUpdate) SetHardwareID(s string) *LicenseUpdate {
	lu.mutation.SetHardwareID(s)
	return lu
}

// SetNillableHardwareID sets the "HardwareID" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableHardwareID(s *string) *LicenseUpdate {
	if s != nil {
		lu.SetHardwareID(*s)
	}
	return lu
}

// ClearHardwareID clears the value of the "HardwareID" field.
func (lu *LicenseUpdate) ClearHardwareID() *LicenseUpdate {
	lu.mutation.ClearHardwareID()
	return lu
}

// SetMobileHardwareID sets the "MobileHardwareID" field.
func (lu *LicenseUpdate) SetMobileHardwareID(s string) *LicenseUpdate {
	lu.mutation.SetMobileHardwareID(s)
	return lu
}

// SetNillableMobileHardwareID sets the "MobileHardwareID" field if the given value is not nil.
func (lu *LicenseUpdate) SetNillableMobileHardwareID(s *string) *LicenseUpdate {
	if s != nil {
		lu.SetMobileHardwareID(*s)
	}
	return lu
}

// ClearMobileHardwareID clears the value of the "MobileHardwareID" field.
func (lu *LicenseUpdate) ClearMobileHardwareID() *LicenseUpdate {
	lu.mutation.ClearMobileHardwareID()
	return lu
}

// SetType sets the "Type" field.
func (lu *LicenseUpdate) SetType(l license.Type) *LicenseUpdate {
	lu.mutation.SetType(l)
	return lu
}

// SetUserID sets the "User" edge to the User entity by ID.
func (lu *LicenseUpdate) SetUserID(id uuid.UUID) *LicenseUpdate {
	lu.mutation.SetUserID(id)
	return lu
}

// SetUser sets the "User" edge to the User entity.
func (lu *LicenseUpdate) SetUser(u *User) *LicenseUpdate {
	return lu.SetUserID(u.ID)
}

// AddStripeIDs adds the "Stripe" edge to the Stripe entity by IDs.
func (lu *LicenseUpdate) AddStripeIDs(ids ...uuid.UUID) *LicenseUpdate {
	lu.mutation.AddStripeIDs(ids...)
	return lu
}

// AddStripe adds the "Stripe" edges to the Stripe entity.
func (lu *LicenseUpdate) AddStripe(s ...*Stripe) *LicenseUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.AddStripeIDs(ids...)
}

// Mutation returns the LicenseMutation object of the builder.
func (lu *LicenseUpdate) Mutation() *LicenseMutation {
	return lu.mutation
}

// ClearUser clears the "User" edge to the User entity.
func (lu *LicenseUpdate) ClearUser() *LicenseUpdate {
	lu.mutation.ClearUser()
	return lu
}

// ClearStripe clears all "Stripe" edges to the Stripe entity.
func (lu *LicenseUpdate) ClearStripe() *LicenseUpdate {
	lu.mutation.ClearStripe()
	return lu
}

// RemoveStripeIDs removes the "Stripe" edge to Stripe entities by IDs.
func (lu *LicenseUpdate) RemoveStripeIDs(ids ...uuid.UUID) *LicenseUpdate {
	lu.mutation.RemoveStripeIDs(ids...)
	return lu
}

// RemoveStripe removes "Stripe" edges to Stripe entities.
func (lu *LicenseUpdate) RemoveStripe(s ...*Stripe) *LicenseUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.RemoveStripeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LicenseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	lu.defaults()
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LicenseUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LicenseUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LicenseUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LicenseUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := license.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LicenseUpdate) check() error {
	if v, ok := lu.mutation.GetType(); ok {
		if err := license.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	if _, ok := lu.mutation.UserID(); lu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"User\"")
	}
	return nil
}

func (lu *LicenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   license.Table,
			Columns: license.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: license.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: license.FieldCreatedAt,
		})
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: license.FieldUpdatedAt,
		})
	}
	if value, ok := lu.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldKey,
		})
	}
	if value, ok := lu.mutation.HardwareID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldHardwareID,
		})
	}
	if lu.mutation.HardwareIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: license.FieldHardwareID,
		})
	}
	if value, ok := lu.mutation.MobileHardwareID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldMobileHardwareID,
		})
	}
	if lu.mutation.MobileHardwareIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: license.FieldMobileHardwareID,
		})
	}
	if value, ok := lu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: license.FieldType,
		})
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   license.UserTable,
			Columns: []string{license.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   license.UserTable,
			Columns: []string{license.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.StripeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   license.StripeTable,
			Columns: []string{license.StripeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: stripe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedStripeIDs(); len(nodes) > 0 && !lu.mutation.StripeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   license.StripeTable,
			Columns: []string{license.StripeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: stripe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.StripeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   license.StripeTable,
			Columns: []string{license.StripeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: stripe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{license.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LicenseUpdateOne is the builder for updating a single License entity.
type LicenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LicenseMutation
}

// SetCreatedAt sets the "created_at" field.
func (luo *LicenseUpdateOne) SetCreatedAt(t time.Time) *LicenseUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableCreatedAt(t *time.Time) *LicenseUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LicenseUpdateOne) SetUpdatedAt(t time.Time) *LicenseUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetKey sets the "Key" field.
func (luo *LicenseUpdateOne) SetKey(s string) *LicenseUpdateOne {
	luo.mutation.SetKey(s)
	return luo
}

// SetHardwareID sets the "HardwareID" field.
func (luo *LicenseUpdateOne) SetHardwareID(s string) *LicenseUpdateOne {
	luo.mutation.SetHardwareID(s)
	return luo
}

// SetNillableHardwareID sets the "HardwareID" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableHardwareID(s *string) *LicenseUpdateOne {
	if s != nil {
		luo.SetHardwareID(*s)
	}
	return luo
}

// ClearHardwareID clears the value of the "HardwareID" field.
func (luo *LicenseUpdateOne) ClearHardwareID() *LicenseUpdateOne {
	luo.mutation.ClearHardwareID()
	return luo
}

// SetMobileHardwareID sets the "MobileHardwareID" field.
func (luo *LicenseUpdateOne) SetMobileHardwareID(s string) *LicenseUpdateOne {
	luo.mutation.SetMobileHardwareID(s)
	return luo
}

// SetNillableMobileHardwareID sets the "MobileHardwareID" field if the given value is not nil.
func (luo *LicenseUpdateOne) SetNillableMobileHardwareID(s *string) *LicenseUpdateOne {
	if s != nil {
		luo.SetMobileHardwareID(*s)
	}
	return luo
}

// ClearMobileHardwareID clears the value of the "MobileHardwareID" field.
func (luo *LicenseUpdateOne) ClearMobileHardwareID() *LicenseUpdateOne {
	luo.mutation.ClearMobileHardwareID()
	return luo
}

// SetType sets the "Type" field.
func (luo *LicenseUpdateOne) SetType(l license.Type) *LicenseUpdateOne {
	luo.mutation.SetType(l)
	return luo
}

// SetUserID sets the "User" edge to the User entity by ID.
func (luo *LicenseUpdateOne) SetUserID(id uuid.UUID) *LicenseUpdateOne {
	luo.mutation.SetUserID(id)
	return luo
}

// SetUser sets the "User" edge to the User entity.
func (luo *LicenseUpdateOne) SetUser(u *User) *LicenseUpdateOne {
	return luo.SetUserID(u.ID)
}

// AddStripeIDs adds the "Stripe" edge to the Stripe entity by IDs.
func (luo *LicenseUpdateOne) AddStripeIDs(ids ...uuid.UUID) *LicenseUpdateOne {
	luo.mutation.AddStripeIDs(ids...)
	return luo
}

// AddStripe adds the "Stripe" edges to the Stripe entity.
func (luo *LicenseUpdateOne) AddStripe(s ...*Stripe) *LicenseUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.AddStripeIDs(ids...)
}

// Mutation returns the LicenseMutation object of the builder.
func (luo *LicenseUpdateOne) Mutation() *LicenseMutation {
	return luo.mutation
}

// ClearUser clears the "User" edge to the User entity.
func (luo *LicenseUpdateOne) ClearUser() *LicenseUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// ClearStripe clears all "Stripe" edges to the Stripe entity.
func (luo *LicenseUpdateOne) ClearStripe() *LicenseUpdateOne {
	luo.mutation.ClearStripe()
	return luo
}

// RemoveStripeIDs removes the "Stripe" edge to Stripe entities by IDs.
func (luo *LicenseUpdateOne) RemoveStripeIDs(ids ...uuid.UUID) *LicenseUpdateOne {
	luo.mutation.RemoveStripeIDs(ids...)
	return luo
}

// RemoveStripe removes "Stripe" edges to Stripe entities.
func (luo *LicenseUpdateOne) RemoveStripe(s ...*Stripe) *LicenseUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.RemoveStripeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LicenseUpdateOne) Select(field string, fields ...string) *LicenseUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated License entity.
func (luo *LicenseUpdateOne) Save(ctx context.Context) (*License, error) {
	var (
		err  error
		node *License
	)
	luo.defaults()
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LicenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LicenseUpdateOne) SaveX(ctx context.Context) *License {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LicenseUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LicenseUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LicenseUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := license.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LicenseUpdateOne) check() error {
	if v, ok := luo.mutation.GetType(); ok {
		if err := license.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf("ent: validator failed for field \"Type\": %w", err)}
		}
	}
	if _, ok := luo.mutation.UserID(); luo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"User\"")
	}
	return nil
}

func (luo *LicenseUpdateOne) sqlSave(ctx context.Context) (_node *License, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   license.Table,
			Columns: license.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: license.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing License.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, license.FieldID)
		for _, f := range fields {
			if !license.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != license.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: license.FieldCreatedAt,
		})
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: license.FieldUpdatedAt,
		})
	}
	if value, ok := luo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldKey,
		})
	}
	if value, ok := luo.mutation.HardwareID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldHardwareID,
		})
	}
	if luo.mutation.HardwareIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: license.FieldHardwareID,
		})
	}
	if value, ok := luo.mutation.MobileHardwareID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: license.FieldMobileHardwareID,
		})
	}
	if luo.mutation.MobileHardwareIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: license.FieldMobileHardwareID,
		})
	}
	if value, ok := luo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: license.FieldType,
		})
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   license.UserTable,
			Columns: []string{license.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   license.UserTable,
			Columns: []string{license.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.StripeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   license.StripeTable,
			Columns: []string{license.StripeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: stripe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedStripeIDs(); len(nodes) > 0 && !luo.mutation.StripeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   license.StripeTable,
			Columns: []string{license.StripeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: stripe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.StripeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   license.StripeTable,
			Columns: []string{license.StripeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: stripe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &License{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{license.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
