// Code generated by entc, DO NOT EDIT.

package task

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStartTime holds the string denoting the starttime field in the database.
	FieldStartTime = "start_time"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "Product"
	// EdgeProxyList holds the string denoting the proxylist edge name in mutations.
	EdgeProxyList = "ProxyList"
	// EdgeProfileGroup holds the string denoting the profilegroup edge name in mutations.
	EdgeProfileGroup = "ProfileGroup"
	// EdgeTaskGroup holds the string denoting the taskgroup edge name in mutations.
	EdgeTaskGroup = "TaskGroup"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// ProductTable is the table that holds the Product relation/edge. The primary key declared below.
	ProductTable = "task_Product"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProxyListTable is the table that holds the ProxyList relation/edge. The primary key declared below.
	ProxyListTable = "task_ProxyList"
	// ProxyListInverseTable is the table name for the ProxyList entity.
	// It exists in this package in order to avoid circular dependency with the "proxylist" package.
	ProxyListInverseTable = "proxy_lists"
	// ProfileGroupTable is the table that holds the ProfileGroup relation/edge. The primary key declared below.
	ProfileGroupTable = "task_ProfileGroup"
	// ProfileGroupInverseTable is the table name for the ProfileGroup entity.
	// It exists in this package in order to avoid circular dependency with the "profilegroup" package.
	ProfileGroupInverseTable = "profile_groups"
	// TaskGroupTable is the table that holds the TaskGroup relation/edge. The primary key declared below.
	TaskGroupTable = "task_group_Tasks"
	// TaskGroupInverseTable is the table name for the TaskGroup entity.
	// It exists in this package in order to avoid circular dependency with the "taskgroup" package.
	TaskGroupInverseTable = "task_groups"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStartTime,
}

var (
	// ProductPrimaryKey and ProductColumn2 are the table columns denoting the
	// primary key for the Product relation (M2M).
	ProductPrimaryKey = []string{"task_id", "product_id"}
	// ProxyListPrimaryKey and ProxyListColumn2 are the table columns denoting the
	// primary key for the ProxyList relation (M2M).
	ProxyListPrimaryKey = []string{"task_id", "proxy_list_id"}
	// ProfileGroupPrimaryKey and ProfileGroupColumn2 are the table columns denoting the
	// primary key for the ProfileGroup relation (M2M).
	ProfileGroupPrimaryKey = []string{"task_id", "profile_group_id"}
	// TaskGroupPrimaryKey and TaskGroupColumn2 are the table columns denoting the
	// primary key for the TaskGroup relation (M2M).
	TaskGroupPrimaryKey = []string{"task_group_id", "task_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
