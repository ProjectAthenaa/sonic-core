// Code generated by entc, DO NOT EDIT.

package checkout

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Date applies equality check predicate on the "Date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// ProductName applies equality check predicate on the "ProductName" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// ProductPrice applies equality check predicate on the "ProductPrice" field. It's identical to ProductPriceEQ.
func ProductPrice(v float64) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPrice), v))
	})
}

// ProductImage applies equality check predicate on the "ProductImage" field. It's identical to ProductImageEQ.
func ProductImage(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductImage), v))
	})
}

// DateEQ applies the EQ predicate on the "Date" field.
func DateEQ(v time.Time) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "Date" field.
func DateNEQ(v time.Time) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "Date" field.
func DateIn(vs ...time.Time) predicate.Checkout {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "Date" field.
func DateNotIn(vs ...time.Time) predicate.Checkout {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "Date" field.
func DateGT(v time.Time) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "Date" field.
func DateGTE(v time.Time) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "Date" field.
func DateLT(v time.Time) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "Date" field.
func DateLTE(v time.Time) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// ProductNameEQ applies the EQ predicate on the "ProductName" field.
func ProductNameEQ(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductName), v))
	})
}

// ProductNameNEQ applies the NEQ predicate on the "ProductName" field.
func ProductNameNEQ(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductName), v))
	})
}

// ProductNameIn applies the In predicate on the "ProductName" field.
func ProductNameIn(vs ...string) predicate.Checkout {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductName), v...))
	})
}

// ProductNameNotIn applies the NotIn predicate on the "ProductName" field.
func ProductNameNotIn(vs ...string) predicate.Checkout {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductName), v...))
	})
}

// ProductNameGT applies the GT predicate on the "ProductName" field.
func ProductNameGT(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductName), v))
	})
}

// ProductNameGTE applies the GTE predicate on the "ProductName" field.
func ProductNameGTE(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductName), v))
	})
}

// ProductNameLT applies the LT predicate on the "ProductName" field.
func ProductNameLT(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductName), v))
	})
}

// ProductNameLTE applies the LTE predicate on the "ProductName" field.
func ProductNameLTE(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductName), v))
	})
}

// ProductNameContains applies the Contains predicate on the "ProductName" field.
func ProductNameContains(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductName), v))
	})
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "ProductName" field.
func ProductNameHasPrefix(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductName), v))
	})
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "ProductName" field.
func ProductNameHasSuffix(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductName), v))
	})
}

// ProductNameEqualFold applies the EqualFold predicate on the "ProductName" field.
func ProductNameEqualFold(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductName), v))
	})
}

// ProductNameContainsFold applies the ContainsFold predicate on the "ProductName" field.
func ProductNameContainsFold(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductName), v))
	})
}

// ProductPriceEQ applies the EQ predicate on the "ProductPrice" field.
func ProductPriceEQ(v float64) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPrice), v))
	})
}

// ProductPriceNEQ applies the NEQ predicate on the "ProductPrice" field.
func ProductPriceNEQ(v float64) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPrice), v))
	})
}

// ProductPriceIn applies the In predicate on the "ProductPrice" field.
func ProductPriceIn(vs ...float64) predicate.Checkout {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPrice), v...))
	})
}

// ProductPriceNotIn applies the NotIn predicate on the "ProductPrice" field.
func ProductPriceNotIn(vs ...float64) predicate.Checkout {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPrice), v...))
	})
}

// ProductPriceGT applies the GT predicate on the "ProductPrice" field.
func ProductPriceGT(v float64) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPrice), v))
	})
}

// ProductPriceGTE applies the GTE predicate on the "ProductPrice" field.
func ProductPriceGTE(v float64) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPrice), v))
	})
}

// ProductPriceLT applies the LT predicate on the "ProductPrice" field.
func ProductPriceLT(v float64) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPrice), v))
	})
}

// ProductPriceLTE applies the LTE predicate on the "ProductPrice" field.
func ProductPriceLTE(v float64) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPrice), v))
	})
}

// ProductImageEQ applies the EQ predicate on the "ProductImage" field.
func ProductImageEQ(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductImage), v))
	})
}

// ProductImageNEQ applies the NEQ predicate on the "ProductImage" field.
func ProductImageNEQ(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductImage), v))
	})
}

// ProductImageIn applies the In predicate on the "ProductImage" field.
func ProductImageIn(vs ...string) predicate.Checkout {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductImage), v...))
	})
}

// ProductImageNotIn applies the NotIn predicate on the "ProductImage" field.
func ProductImageNotIn(vs ...string) predicate.Checkout {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checkout(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductImage), v...))
	})
}

// ProductImageGT applies the GT predicate on the "ProductImage" field.
func ProductImageGT(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductImage), v))
	})
}

// ProductImageGTE applies the GTE predicate on the "ProductImage" field.
func ProductImageGTE(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductImage), v))
	})
}

// ProductImageLT applies the LT predicate on the "ProductImage" field.
func ProductImageLT(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductImage), v))
	})
}

// ProductImageLTE applies the LTE predicate on the "ProductImage" field.
func ProductImageLTE(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductImage), v))
	})
}

// ProductImageContains applies the Contains predicate on the "ProductImage" field.
func ProductImageContains(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductImage), v))
	})
}

// ProductImageHasPrefix applies the HasPrefix predicate on the "ProductImage" field.
func ProductImageHasPrefix(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductImage), v))
	})
}

// ProductImageHasSuffix applies the HasSuffix predicate on the "ProductImage" field.
func ProductImageHasSuffix(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductImage), v))
	})
}

// ProductImageEqualFold applies the EqualFold predicate on the "ProductImage" field.
func ProductImageEqualFold(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductImage), v))
	})
}

// ProductImageContainsFold applies the ContainsFold predicate on the "ProductImage" field.
func ProductImageContainsFold(v string) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductImage), v))
	})
}

// HasUser applies the HasEdge predicate on the "User" edge.
func HasUser() predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "User" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Checkout) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Checkout) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Checkout) predicate.Checkout {
	return predicate.Checkout(func(s *sql.Selector) {
		p(s.Not())
	})
}
