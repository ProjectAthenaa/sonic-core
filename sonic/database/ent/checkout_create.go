// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/checkout"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// CheckoutCreate is the builder for creating a Checkout entity.
type CheckoutCreate struct {
	config
	mutation *CheckoutMutation
	hooks    []Hook
}

// SetDate sets the "Date" field.
func (cc *CheckoutCreate) SetDate(t time.Time) *CheckoutCreate {
	cc.mutation.SetDate(t)
	return cc
}

// SetNillableDate sets the "Date" field if the given value is not nil.
func (cc *CheckoutCreate) SetNillableDate(t *time.Time) *CheckoutCreate {
	if t != nil {
		cc.SetDate(*t)
	}
	return cc
}

// SetProductName sets the "ProductName" field.
func (cc *CheckoutCreate) SetProductName(s string) *CheckoutCreate {
	cc.mutation.SetProductName(s)
	return cc
}

// SetNillableProductName sets the "ProductName" field if the given value is not nil.
func (cc *CheckoutCreate) SetNillableProductName(s *string) *CheckoutCreate {
	if s != nil {
		cc.SetProductName(*s)
	}
	return cc
}

// SetProductPrice sets the "ProductPrice" field.
func (cc *CheckoutCreate) SetProductPrice(f float64) *CheckoutCreate {
	cc.mutation.SetProductPrice(f)
	return cc
}

// SetNillableProductPrice sets the "ProductPrice" field if the given value is not nil.
func (cc *CheckoutCreate) SetNillableProductPrice(f *float64) *CheckoutCreate {
	if f != nil {
		cc.SetProductPrice(*f)
	}
	return cc
}

// SetProductImage sets the "ProductImage" field.
func (cc *CheckoutCreate) SetProductImage(s string) *CheckoutCreate {
	cc.mutation.SetProductImage(s)
	return cc
}

// SetNillableProductImage sets the "ProductImage" field if the given value is not nil.
func (cc *CheckoutCreate) SetNillableProductImage(s *string) *CheckoutCreate {
	if s != nil {
		cc.SetProductImage(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CheckoutCreate) SetID(u uuid.UUID) *CheckoutCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetUserID sets the "User" edge to the User entity by ID.
func (cc *CheckoutCreate) SetUserID(id uuid.UUID) *CheckoutCreate {
	cc.mutation.SetUserID(id)
	return cc
}

// SetNillableUserID sets the "User" edge to the User entity by ID if the given value is not nil.
func (cc *CheckoutCreate) SetNillableUserID(id *uuid.UUID) *CheckoutCreate {
	if id != nil {
		cc = cc.SetUserID(*id)
	}
	return cc
}

// SetUser sets the "User" edge to the User entity.
func (cc *CheckoutCreate) SetUser(u *User) *CheckoutCreate {
	return cc.SetUserID(u.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cc *CheckoutCreate) Mutation() *CheckoutMutation {
	return cc.mutation
}

// Save creates the Checkout in the database.
func (cc *CheckoutCreate) Save(ctx context.Context) (*Checkout, error) {
	var (
		err  error
		node *Checkout
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CheckoutCreate) SaveX(ctx context.Context) *Checkout {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CheckoutCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CheckoutCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CheckoutCreate) defaults() {
	if _, ok := cc.mutation.Date(); !ok {
		v := checkout.DefaultDate()
		cc.mutation.SetDate(v)
	}
	if _, ok := cc.mutation.ProductName(); !ok {
		v := checkout.DefaultProductName
		cc.mutation.SetProductName(v)
	}
	if _, ok := cc.mutation.ProductPrice(); !ok {
		v := checkout.DefaultProductPrice
		cc.mutation.SetProductPrice(v)
	}
	if _, ok := cc.mutation.ProductImage(); !ok {
		v := checkout.DefaultProductImage
		cc.mutation.SetProductImage(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := checkout.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CheckoutCreate) check() error {
	if _, ok := cc.mutation.Date(); !ok {
		return &ValidationError{Name: "Date", err: errors.New(`ent: missing required field "Date"`)}
	}
	if _, ok := cc.mutation.ProductName(); !ok {
		return &ValidationError{Name: "ProductName", err: errors.New(`ent: missing required field "ProductName"`)}
	}
	if _, ok := cc.mutation.ProductPrice(); !ok {
		return &ValidationError{Name: "ProductPrice", err: errors.New(`ent: missing required field "ProductPrice"`)}
	}
	if _, ok := cc.mutation.ProductImage(); !ok {
		return &ValidationError{Name: "ProductImage", err: errors.New(`ent: missing required field "ProductImage"`)}
	}
	return nil
}

func (cc *CheckoutCreate) sqlSave(ctx context.Context) (*Checkout, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (cc *CheckoutCreate) createSpec() (*Checkout, *sqlgraph.CreateSpec) {
	var (
		_node = &Checkout{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checkout.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: checkout.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := cc.mutation.ProductName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkout.FieldProductName,
		})
		_node.ProductName = value
	}
	if value, ok := cc.mutation.ProductPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: checkout.FieldProductPrice,
		})
		_node.ProductPrice = value
	}
	if value, ok := cc.mutation.ProductImage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkout.FieldProductImage,
		})
		_node.ProductImage = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.UserTable,
			Columns: []string{checkout.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_checkouts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CheckoutCreateBulk is the builder for creating many Checkout entities in bulk.
type CheckoutCreateBulk struct {
	config
	builders []*CheckoutCreate
}

// Save creates the Checkout entities in the database.
func (ccb *CheckoutCreateBulk) Save(ctx context.Context) ([]*Checkout, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Checkout, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckoutMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CheckoutCreateBulk) SaveX(ctx context.Context) []*Checkout {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CheckoutCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CheckoutCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
