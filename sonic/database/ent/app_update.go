// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/accountgroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profilegroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxylist"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/settings"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/taskgroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where adds a new predicate for the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AppUpdate) SetCreatedAt(t time.Time) *AppUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AppUpdate) SetNillableCreatedAt(t *time.Time) *AppUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppUpdate) SetUpdatedAt(t time.Time) *AppUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUserID sets the "User" edge to the User entity by ID.
func (au *AppUpdate) SetUserID(id uuid.UUID) *AppUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetUser sets the "User" edge to the User entity.
func (au *AppUpdate) SetUser(u *User) *AppUpdate {
	return au.SetUserID(u.ID)
}

// AddSettingIDs adds the "Settings" edge to the Settings entity by IDs.
func (au *AppUpdate) AddSettingIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.AddSettingIDs(ids...)
	return au
}

// AddSettings adds the "Settings" edges to the Settings entity.
func (au *AppUpdate) AddSettings(s ...*Settings) *AppUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddSettingIDs(ids...)
}

// AddProxyListIDs adds the "ProxyLists" edge to the ProxyList entity by IDs.
func (au *AppUpdate) AddProxyListIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.AddProxyListIDs(ids...)
	return au
}

// AddProxyLists adds the "ProxyLists" edges to the ProxyList entity.
func (au *AppUpdate) AddProxyLists(p ...*ProxyList) *AppUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddProxyListIDs(ids...)
}

// AddProfileGroupIDs adds the "ProfileGroups" edge to the ProfileGroup entity by IDs.
func (au *AppUpdate) AddProfileGroupIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.AddProfileGroupIDs(ids...)
	return au
}

// AddProfileGroups adds the "ProfileGroups" edges to the ProfileGroup entity.
func (au *AppUpdate) AddProfileGroups(p ...*ProfileGroup) *AppUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddProfileGroupIDs(ids...)
}

// AddTaskGroupIDs adds the "TaskGroups" edge to the TaskGroup entity by IDs.
func (au *AppUpdate) AddTaskGroupIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.AddTaskGroupIDs(ids...)
	return au
}

// AddTaskGroups adds the "TaskGroups" edges to the TaskGroup entity.
func (au *AppUpdate) AddTaskGroups(t ...*TaskGroup) *AppUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTaskGroupIDs(ids...)
}

// AddAccountGroupIDs adds the "AccountGroups" edge to the AccountGroup entity by IDs.
func (au *AppUpdate) AddAccountGroupIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.AddAccountGroupIDs(ids...)
	return au
}

// AddAccountGroups adds the "AccountGroups" edges to the AccountGroup entity.
func (au *AppUpdate) AddAccountGroups(a ...*AccountGroup) *AppUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAccountGroupIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// ClearUser clears the "User" edge to the User entity.
func (au *AppUpdate) ClearUser() *AppUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearSettings clears all "Settings" edges to the Settings entity.
func (au *AppUpdate) ClearSettings() *AppUpdate {
	au.mutation.ClearSettings()
	return au
}

// RemoveSettingIDs removes the "Settings" edge to Settings entities by IDs.
func (au *AppUpdate) RemoveSettingIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.RemoveSettingIDs(ids...)
	return au
}

// RemoveSettings removes "Settings" edges to Settings entities.
func (au *AppUpdate) RemoveSettings(s ...*Settings) *AppUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveSettingIDs(ids...)
}

// ClearProxyLists clears all "ProxyLists" edges to the ProxyList entity.
func (au *AppUpdate) ClearProxyLists() *AppUpdate {
	au.mutation.ClearProxyLists()
	return au
}

// RemoveProxyListIDs removes the "ProxyLists" edge to ProxyList entities by IDs.
func (au *AppUpdate) RemoveProxyListIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.RemoveProxyListIDs(ids...)
	return au
}

// RemoveProxyLists removes "ProxyLists" edges to ProxyList entities.
func (au *AppUpdate) RemoveProxyLists(p ...*ProxyList) *AppUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveProxyListIDs(ids...)
}

// ClearProfileGroups clears all "ProfileGroups" edges to the ProfileGroup entity.
func (au *AppUpdate) ClearProfileGroups() *AppUpdate {
	au.mutation.ClearProfileGroups()
	return au
}

// RemoveProfileGroupIDs removes the "ProfileGroups" edge to ProfileGroup entities by IDs.
func (au *AppUpdate) RemoveProfileGroupIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.RemoveProfileGroupIDs(ids...)
	return au
}

// RemoveProfileGroups removes "ProfileGroups" edges to ProfileGroup entities.
func (au *AppUpdate) RemoveProfileGroups(p ...*ProfileGroup) *AppUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveProfileGroupIDs(ids...)
}

// ClearTaskGroups clears all "TaskGroups" edges to the TaskGroup entity.
func (au *AppUpdate) ClearTaskGroups() *AppUpdate {
	au.mutation.ClearTaskGroups()
	return au
}

// RemoveTaskGroupIDs removes the "TaskGroups" edge to TaskGroup entities by IDs.
func (au *AppUpdate) RemoveTaskGroupIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.RemoveTaskGroupIDs(ids...)
	return au
}

// RemoveTaskGroups removes "TaskGroups" edges to TaskGroup entities.
func (au *AppUpdate) RemoveTaskGroups(t ...*TaskGroup) *AppUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTaskGroupIDs(ids...)
}

// ClearAccountGroups clears all "AccountGroups" edges to the AccountGroup entity.
func (au *AppUpdate) ClearAccountGroups() *AppUpdate {
	au.mutation.ClearAccountGroups()
	return au
}

// RemoveAccountGroupIDs removes the "AccountGroups" edge to AccountGroup entities by IDs.
func (au *AppUpdate) RemoveAccountGroupIDs(ids ...uuid.UUID) *AppUpdate {
	au.mutation.RemoveAccountGroupIDs(ids...)
	return au
}

// RemoveAccountGroups removes "AccountGroups" edges to AccountGroup entities.
func (au *AppUpdate) RemoveAccountGroups(a ...*AccountGroup) *AppUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAccountGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := app.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppUpdate) check() error {
	if _, ok := au.mutation.UserID(); au.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"User\"")
	}
	return nil
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: app.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldUpdatedAt,
		})
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   app.UserTable,
			Columns: []string{app.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   app.UserTable,
			Columns: []string{app.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.SettingsTable,
			Columns: []string{app.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: settings.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSettingsIDs(); len(nodes) > 0 && !au.mutation.SettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.SettingsTable,
			Columns: []string{app.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: settings.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.SettingsTable,
			Columns: []string{app.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: settings.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ProxyListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProxyListsTable,
			Columns: app.ProxyListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedProxyListsIDs(); len(nodes) > 0 && !au.mutation.ProxyListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProxyListsTable,
			Columns: app.ProxyListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProxyListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProxyListsTable,
			Columns: app.ProxyListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ProfileGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProfileGroupsTable,
			Columns: app.ProfileGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profilegroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedProfileGroupsIDs(); len(nodes) > 0 && !au.mutation.ProfileGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProfileGroupsTable,
			Columns: app.ProfileGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profilegroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProfileGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProfileGroupsTable,
			Columns: app.ProfileGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profilegroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TaskGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.TaskGroupsTable,
			Columns: app.TaskGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taskgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTaskGroupsIDs(); len(nodes) > 0 && !au.mutation.TaskGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.TaskGroupsTable,
			Columns: app.TaskGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taskgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TaskGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.TaskGroupsTable,
			Columns: app.TaskGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taskgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AccountGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AccountGroupsTable,
			Columns: []string{app.AccountGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: accountgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAccountGroupsIDs(); len(nodes) > 0 && !au.mutation.AccountGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AccountGroupsTable,
			Columns: []string{app.AccountGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: accountgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AccountGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AccountGroupsTable,
			Columns: []string{app.AccountGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: accountgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMutation
}

// SetCreatedAt sets the "created_at" field.
func (auo *AppUpdateOne) SetCreatedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableCreatedAt(t *time.Time) *AppUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppUpdateOne) SetUpdatedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUserID sets the "User" edge to the User entity by ID.
func (auo *AppUpdateOne) SetUserID(id uuid.UUID) *AppUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetUser sets the "User" edge to the User entity.
func (auo *AppUpdateOne) SetUser(u *User) *AppUpdateOne {
	return auo.SetUserID(u.ID)
}

// AddSettingIDs adds the "Settings" edge to the Settings entity by IDs.
func (auo *AppUpdateOne) AddSettingIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.AddSettingIDs(ids...)
	return auo
}

// AddSettings adds the "Settings" edges to the Settings entity.
func (auo *AppUpdateOne) AddSettings(s ...*Settings) *AppUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddSettingIDs(ids...)
}

// AddProxyListIDs adds the "ProxyLists" edge to the ProxyList entity by IDs.
func (auo *AppUpdateOne) AddProxyListIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.AddProxyListIDs(ids...)
	return auo
}

// AddProxyLists adds the "ProxyLists" edges to the ProxyList entity.
func (auo *AppUpdateOne) AddProxyLists(p ...*ProxyList) *AppUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddProxyListIDs(ids...)
}

// AddProfileGroupIDs adds the "ProfileGroups" edge to the ProfileGroup entity by IDs.
func (auo *AppUpdateOne) AddProfileGroupIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.AddProfileGroupIDs(ids...)
	return auo
}

// AddProfileGroups adds the "ProfileGroups" edges to the ProfileGroup entity.
func (auo *AppUpdateOne) AddProfileGroups(p ...*ProfileGroup) *AppUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddProfileGroupIDs(ids...)
}

// AddTaskGroupIDs adds the "TaskGroups" edge to the TaskGroup entity by IDs.
func (auo *AppUpdateOne) AddTaskGroupIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.AddTaskGroupIDs(ids...)
	return auo
}

// AddTaskGroups adds the "TaskGroups" edges to the TaskGroup entity.
func (auo *AppUpdateOne) AddTaskGroups(t ...*TaskGroup) *AppUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTaskGroupIDs(ids...)
}

// AddAccountGroupIDs adds the "AccountGroups" edge to the AccountGroup entity by IDs.
func (auo *AppUpdateOne) AddAccountGroupIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.AddAccountGroupIDs(ids...)
	return auo
}

// AddAccountGroups adds the "AccountGroups" edges to the AccountGroup entity.
func (auo *AppUpdateOne) AddAccountGroups(a ...*AccountGroup) *AppUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAccountGroupIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// ClearUser clears the "User" edge to the User entity.
func (auo *AppUpdateOne) ClearUser() *AppUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearSettings clears all "Settings" edges to the Settings entity.
func (auo *AppUpdateOne) ClearSettings() *AppUpdateOne {
	auo.mutation.ClearSettings()
	return auo
}

// RemoveSettingIDs removes the "Settings" edge to Settings entities by IDs.
func (auo *AppUpdateOne) RemoveSettingIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.RemoveSettingIDs(ids...)
	return auo
}

// RemoveSettings removes "Settings" edges to Settings entities.
func (auo *AppUpdateOne) RemoveSettings(s ...*Settings) *AppUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveSettingIDs(ids...)
}

// ClearProxyLists clears all "ProxyLists" edges to the ProxyList entity.
func (auo *AppUpdateOne) ClearProxyLists() *AppUpdateOne {
	auo.mutation.ClearProxyLists()
	return auo
}

// RemoveProxyListIDs removes the "ProxyLists" edge to ProxyList entities by IDs.
func (auo *AppUpdateOne) RemoveProxyListIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.RemoveProxyListIDs(ids...)
	return auo
}

// RemoveProxyLists removes "ProxyLists" edges to ProxyList entities.
func (auo *AppUpdateOne) RemoveProxyLists(p ...*ProxyList) *AppUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveProxyListIDs(ids...)
}

// ClearProfileGroups clears all "ProfileGroups" edges to the ProfileGroup entity.
func (auo *AppUpdateOne) ClearProfileGroups() *AppUpdateOne {
	auo.mutation.ClearProfileGroups()
	return auo
}

// RemoveProfileGroupIDs removes the "ProfileGroups" edge to ProfileGroup entities by IDs.
func (auo *AppUpdateOne) RemoveProfileGroupIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.RemoveProfileGroupIDs(ids...)
	return auo
}

// RemoveProfileGroups removes "ProfileGroups" edges to ProfileGroup entities.
func (auo *AppUpdateOne) RemoveProfileGroups(p ...*ProfileGroup) *AppUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveProfileGroupIDs(ids...)
}

// ClearTaskGroups clears all "TaskGroups" edges to the TaskGroup entity.
func (auo *AppUpdateOne) ClearTaskGroups() *AppUpdateOne {
	auo.mutation.ClearTaskGroups()
	return auo
}

// RemoveTaskGroupIDs removes the "TaskGroups" edge to TaskGroup entities by IDs.
func (auo *AppUpdateOne) RemoveTaskGroupIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.RemoveTaskGroupIDs(ids...)
	return auo
}

// RemoveTaskGroups removes "TaskGroups" edges to TaskGroup entities.
func (auo *AppUpdateOne) RemoveTaskGroups(t ...*TaskGroup) *AppUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTaskGroupIDs(ids...)
}

// ClearAccountGroups clears all "AccountGroups" edges to the AccountGroup entity.
func (auo *AppUpdateOne) ClearAccountGroups() *AppUpdateOne {
	auo.mutation.ClearAccountGroups()
	return auo
}

// RemoveAccountGroupIDs removes the "AccountGroups" edge to AccountGroup entities by IDs.
func (auo *AppUpdateOne) RemoveAccountGroupIDs(ids ...uuid.UUID) *AppUpdateOne {
	auo.mutation.RemoveAccountGroupIDs(ids...)
	return auo
}

// RemoveAccountGroups removes "AccountGroups" edges to AccountGroup entities.
func (auo *AppUpdateOne) RemoveAccountGroups(a ...*AccountGroup) *AppUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAccountGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	var (
		err  error
		node *App
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := app.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppUpdateOne) check() error {
	if _, ok := auo.mutation.UserID(); auo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"User\"")
	}
	return nil
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: app.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing App.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldUpdatedAt,
		})
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   app.UserTable,
			Columns: []string{app.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   app.UserTable,
			Columns: []string{app.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.SettingsTable,
			Columns: []string{app.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: settings.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSettingsIDs(); len(nodes) > 0 && !auo.mutation.SettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.SettingsTable,
			Columns: []string{app.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: settings.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.SettingsTable,
			Columns: []string{app.SettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: settings.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ProxyListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProxyListsTable,
			Columns: app.ProxyListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedProxyListsIDs(); len(nodes) > 0 && !auo.mutation.ProxyListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProxyListsTable,
			Columns: app.ProxyListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProxyListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProxyListsTable,
			Columns: app.ProxyListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ProfileGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProfileGroupsTable,
			Columns: app.ProfileGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profilegroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedProfileGroupsIDs(); len(nodes) > 0 && !auo.mutation.ProfileGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProfileGroupsTable,
			Columns: app.ProfileGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profilegroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProfileGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.ProfileGroupsTable,
			Columns: app.ProfileGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profilegroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TaskGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.TaskGroupsTable,
			Columns: app.TaskGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taskgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTaskGroupsIDs(); len(nodes) > 0 && !auo.mutation.TaskGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.TaskGroupsTable,
			Columns: app.TaskGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taskgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TaskGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   app.TaskGroupsTable,
			Columns: app.TaskGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: taskgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AccountGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AccountGroupsTable,
			Columns: []string{app.AccountGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: accountgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAccountGroupsIDs(); len(nodes) > 0 && !auo.mutation.AccountGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AccountGroupsTable,
			Columns: []string{app.AccountGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: accountgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AccountGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.AccountGroupsTable,
			Columns: []string{app.AccountGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: accountgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
