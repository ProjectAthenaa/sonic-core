// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/shipping"
)

// Shipping is the model entity for the Shipping schema.
type Shipping struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FirstName holds the value of the "FirstName" field.
	FirstName string `json:"FirstName,omitempty"`
	// LastName holds the value of the "LastName" field.
	LastName string `json:"LastName,omitempty"`
	// PhoneNumber holds the value of the "PhoneNumber" field.
	PhoneNumber string `json:"PhoneNumber,omitempty"`
	// BillingIsShipping holds the value of the "BillingIsShipping" field.
	BillingIsShipping bool `json:"BillingIsShipping,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShippingQuery when eager-loading is set.
	Edges            ShippingEdges `json:"edges"`
	profile_shipping *int
}

// ShippingEdges holds the relations/edges for other nodes in the graph.
type ShippingEdges struct {
	// Profile holds the value of the Profile edge.
	Profile *Profile `json:"Profile,omitempty"`
	// ShippingAddress holds the value of the ShippingAddress edge.
	ShippingAddress []*Address `json:"ShippingAddress,omitempty"`
	// BillingAddress holds the value of the BillingAddress edge.
	BillingAddress []*Address `json:"BillingAddress,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShippingEdges) ProfileOrErr() (*Profile, error) {
	if e.loadedTypes[0] {
		if e.Profile == nil {
			// The edge Profile was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: profile.Label}
		}
		return e.Profile, nil
	}
	return nil, &NotLoadedError{edge: "Profile"}
}

// ShippingAddressOrErr returns the ShippingAddress value or an error if the edge
// was not loaded in eager-loading.
func (e ShippingEdges) ShippingAddressOrErr() ([]*Address, error) {
	if e.loadedTypes[1] {
		return e.ShippingAddress, nil
	}
	return nil, &NotLoadedError{edge: "ShippingAddress"}
}

// BillingAddressOrErr returns the BillingAddress value or an error if the edge
// was not loaded in eager-loading.
func (e ShippingEdges) BillingAddressOrErr() ([]*Address, error) {
	if e.loadedTypes[2] {
		return e.BillingAddress, nil
	}
	return nil, &NotLoadedError{edge: "BillingAddress"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shipping) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipping.FieldBillingIsShipping:
			values[i] = new(sql.NullBool)
		case shipping.FieldID:
			values[i] = new(sql.NullInt64)
		case shipping.FieldFirstName, shipping.FieldLastName, shipping.FieldPhoneNumber:
			values[i] = new(sql.NullString)
		case shipping.ForeignKeys[0]: // profile_shipping
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Shipping", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shipping fields.
func (s *Shipping) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shipping.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FirstName", values[i])
			} else if value.Valid {
				s.FirstName = value.String
			}
		case shipping.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LastName", values[i])
			} else if value.Valid {
				s.LastName = value.String
			}
		case shipping.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PhoneNumber", values[i])
			} else if value.Valid {
				s.PhoneNumber = value.String
			}
		case shipping.FieldBillingIsShipping:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field BillingIsShipping", values[i])
			} else if value.Valid {
				s.BillingIsShipping = value.Bool
			}
		case shipping.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_shipping", value)
			} else if value.Valid {
				s.profile_shipping = new(int)
				*s.profile_shipping = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProfile queries the "Profile" edge of the Shipping entity.
func (s *Shipping) QueryProfile() *ProfileQuery {
	return (&ShippingClient{config: s.config}).QueryProfile(s)
}

// QueryShippingAddress queries the "ShippingAddress" edge of the Shipping entity.
func (s *Shipping) QueryShippingAddress() *AddressQuery {
	return (&ShippingClient{config: s.config}).QueryShippingAddress(s)
}

// QueryBillingAddress queries the "BillingAddress" edge of the Shipping entity.
func (s *Shipping) QueryBillingAddress() *AddressQuery {
	return (&ShippingClient{config: s.config}).QueryBillingAddress(s)
}

// Update returns a builder for updating this Shipping.
// Note that you need to call Shipping.Unwrap() before calling this method if this Shipping
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shipping) Update() *ShippingUpdateOne {
	return (&ShippingClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Shipping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shipping) Unwrap() *Shipping {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shipping is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shipping) String() string {
	var builder strings.Builder
	builder.WriteString("Shipping(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", FirstName=")
	builder.WriteString(s.FirstName)
	builder.WriteString(", LastName=")
	builder.WriteString(s.LastName)
	builder.WriteString(", PhoneNumber=")
	builder.WriteString(s.PhoneNumber)
	builder.WriteString(", BillingIsShipping=")
	builder.WriteString(fmt.Sprintf("%v", s.BillingIsShipping))
	builder.WriteByte(')')
	return builder.String()
}

// Shippings is a parsable slice of Shipping.
type Shippings []*Shipping

func (s Shippings) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
