// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/taskgroup"
)

// TaskGroup is the model entity for the TaskGroup schema.
type TaskGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskGroupQuery when eager-loading is set.
	Edges TaskGroupEdges `json:"edges"`
}

// TaskGroupEdges holds the relations/edges for other nodes in the graph.
type TaskGroupEdges struct {
	// App holds the value of the App edge.
	App []*App `json:"App,omitempty"`
	// Tasks holds the value of the Tasks edge.
	Tasks []*Task `json:"Tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e TaskGroupEdges) AppOrErr() ([]*App, error) {
	if e.loadedTypes[0] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "App"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e TaskGroupEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "Tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskgroup.FieldID:
			values[i] = new(sql.NullInt64)
		case taskgroup.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskGroup fields.
func (tg *TaskGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tg.ID = int(value.Int64)
		case taskgroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				tg.Name = value.String
			}
		}
	}
	return nil
}

// QueryApp queries the "App" edge of the TaskGroup entity.
func (tg *TaskGroup) QueryApp() *AppQuery {
	return (&TaskGroupClient{config: tg.config}).QueryApp(tg)
}

// QueryTasks queries the "Tasks" edge of the TaskGroup entity.
func (tg *TaskGroup) QueryTasks() *TaskQuery {
	return (&TaskGroupClient{config: tg.config}).QueryTasks(tg)
}

// Update returns a builder for updating this TaskGroup.
// Note that you need to call TaskGroup.Unwrap() before calling this method if this TaskGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (tg *TaskGroup) Update() *TaskGroupUpdateOne {
	return (&TaskGroupClient{config: tg.config}).UpdateOne(tg)
}

// Unwrap unwraps the TaskGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tg *TaskGroup) Unwrap() *TaskGroup {
	tx, ok := tg.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskGroup is not a transactional entity")
	}
	tg.config.driver = tx.drv
	return tg
}

// String implements the fmt.Stringer.
func (tg *TaskGroup) String() string {
	var builder strings.Builder
	builder.WriteString("TaskGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", tg.ID))
	builder.WriteString(", Name=")
	builder.WriteString(tg.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TaskGroups is a parsable slice of TaskGroup.
type TaskGroups []*TaskGroup

func (tg TaskGroups) config(cfg config) {
	for _i := range tg {
		tg[_i].config = cfg
	}
}
