// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// License is the model entity for the License schema.
type License struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Key holds the value of the "Key" field.
	Key string `json:"Key,omitempty"`
	// HardwareID holds the value of the "HardwareID" field.
	HardwareID string `json:"HardwareID,omitempty"`
	// MobileHardwareID holds the value of the "MobileHardwareID" field.
	MobileHardwareID string `json:"MobileHardwareID,omitempty"`
	// Type holds the value of the "Type" field.
	Type license.Type `json:"Type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LicenseQuery when eager-loading is set.
	Edges        LicenseEdges `json:"edges"`
	user_license *uuid.UUID
}

// LicenseEdges holds the relations/edges for other nodes in the graph.
type LicenseEdges struct {
	// User holds the value of the User edge.
	User *User `json:"User,omitempty"`
	// Stripe holds the value of the Stripe edge.
	Stripe []*Stripe `json:"Stripe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LicenseEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge User was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "User"}
}

// StripeOrErr returns the Stripe value or an error if the edge
// was not loaded in eager-loading.
func (e LicenseEdges) StripeOrErr() ([]*Stripe, error) {
	if e.loadedTypes[1] {
		return e.Stripe, nil
	}
	return nil, &NotLoadedError{edge: "Stripe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*License) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case license.FieldKey, license.FieldHardwareID, license.FieldMobileHardwareID, license.FieldType:
			values[i] = new(sql.NullString)
		case license.FieldCreatedAt, license.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case license.FieldID:
			values[i] = new(uuid.UUID)
		case license.ForeignKeys[0]: // user_license
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type License", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the License fields.
func (l *License) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case license.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case license.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case license.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case license.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Key", values[i])
			} else if value.Valid {
				l.Key = value.String
			}
		case license.FieldHardwareID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HardwareID", values[i])
			} else if value.Valid {
				l.HardwareID = value.String
			}
		case license.FieldMobileHardwareID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobileHardwareID", values[i])
			} else if value.Valid {
				l.MobileHardwareID = value.String
			}
		case license.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				l.Type = license.Type(value.String)
			}
		case license.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_license", values[i])
			} else if value != nil {
				l.user_license = value
			}
		}
	}
	return nil
}

// QueryUser queries the "User" edge of the License entity.
func (l *License) QueryUser() *UserQuery {
	return (&LicenseClient{config: l.config}).QueryUser(l)
}

// QueryStripe queries the "Stripe" edge of the License entity.
func (l *License) QueryStripe() *StripeQuery {
	return (&LicenseClient{config: l.config}).QueryStripe(l)
}

// Update returns a builder for updating this License.
// Note that you need to call License.Unwrap() before calling this method if this License
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *License) Update() *LicenseUpdateOne {
	return (&LicenseClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the License entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *License) Unwrap() *License {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: License is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *License) String() string {
	var builder strings.Builder
	builder.WriteString("License(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", Key=")
	builder.WriteString(l.Key)
	builder.WriteString(", HardwareID=")
	builder.WriteString(l.HardwareID)
	builder.WriteString(", MobileHardwareID=")
	builder.WriteString(l.MobileHardwareID)
	builder.WriteString(", Type=")
	builder.WriteString(fmt.Sprintf("%v", l.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Licenses is a parsable slice of License.
type Licenses []*License

func (l Licenses) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
