// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/calendar"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/product"
	"github.com/google/uuid"
)

// CalendarUpdate is the builder for updating Calendar entities.
type CalendarUpdate struct {
	config
	hooks    []Hook
	mutation *CalendarMutation
}

// Where adds a new predicate for the CalendarUpdate builder.
func (cu *CalendarUpdate) Where(ps ...predicate.Calendar) *CalendarUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CalendarUpdate) SetCreatedAt(t time.Time) *CalendarUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CalendarUpdate) SetNillableCreatedAt(t *time.Time) *CalendarUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CalendarUpdate) SetUpdatedAt(t time.Time) *CalendarUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetReleaseDate sets the "ReleaseDate" field.
func (cu *CalendarUpdate) SetReleaseDate(t time.Time) *CalendarUpdate {
	cu.mutation.SetReleaseDate(t)
	return cu
}

// SetProductImage sets the "ProductImage" field.
func (cu *CalendarUpdate) SetProductImage(s string) *CalendarUpdate {
	cu.mutation.SetProductImage(s)
	return cu
}

// SetNillableProductImage sets the "ProductImage" field if the given value is not nil.
func (cu *CalendarUpdate) SetNillableProductImage(s *string) *CalendarUpdate {
	if s != nil {
		cu.SetProductImage(*s)
	}
	return cu
}

// SetProductName sets the "ProductName" field.
func (cu *CalendarUpdate) SetProductName(s string) *CalendarUpdate {
	cu.mutation.SetProductName(s)
	return cu
}

// SetHypedRelease sets the "HypedRelease" field.
func (cu *CalendarUpdate) SetHypedRelease(b bool) *CalendarUpdate {
	cu.mutation.SetHypedRelease(b)
	return cu
}

// SetUsersRunning sets the "UsersRunning" field.
func (cu *CalendarUpdate) SetUsersRunning(i int) *CalendarUpdate {
	cu.mutation.ResetUsersRunning()
	cu.mutation.SetUsersRunning(i)
	return cu
}

// AddUsersRunning adds i to the "UsersRunning" field.
func (cu *CalendarUpdate) AddUsersRunning(i int) *CalendarUpdate {
	cu.mutation.AddUsersRunning(i)
	return cu
}

// SetQuickTaskID sets the "QuickTask" edge to the Product entity by ID.
func (cu *CalendarUpdate) SetQuickTaskID(id uuid.UUID) *CalendarUpdate {
	cu.mutation.SetQuickTaskID(id)
	return cu
}

// SetNillableQuickTaskID sets the "QuickTask" edge to the Product entity by ID if the given value is not nil.
func (cu *CalendarUpdate) SetNillableQuickTaskID(id *uuid.UUID) *CalendarUpdate {
	if id != nil {
		cu = cu.SetQuickTaskID(*id)
	}
	return cu
}

// SetQuickTask sets the "QuickTask" edge to the Product entity.
func (cu *CalendarUpdate) SetQuickTask(p *Product) *CalendarUpdate {
	return cu.SetQuickTaskID(p.ID)
}

// Mutation returns the CalendarMutation object of the builder.
func (cu *CalendarUpdate) Mutation() *CalendarMutation {
	return cu.mutation
}

// ClearQuickTask clears the "QuickTask" edge to the Product entity.
func (cu *CalendarUpdate) ClearQuickTask() *CalendarUpdate {
	cu.mutation.ClearQuickTask()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CalendarUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CalendarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CalendarUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CalendarUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CalendarUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CalendarUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := calendar.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CalendarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   calendar.Table,
			Columns: calendar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: calendar.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: calendar.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: calendar.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: calendar.FieldReleaseDate,
		})
	}
	if value, ok := cu.mutation.ProductImage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calendar.FieldProductImage,
		})
	}
	if value, ok := cu.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calendar.FieldProductName,
		})
	}
	if value, ok := cu.mutation.HypedRelease(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: calendar.FieldHypedRelease,
		})
	}
	if value, ok := cu.mutation.UsersRunning(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calendar.FieldUsersRunning,
		})
	}
	if value, ok := cu.mutation.AddedUsersRunning(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calendar.FieldUsersRunning,
		})
	}
	if cu.mutation.QuickTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   calendar.QuickTaskTable,
			Columns: []string{calendar.QuickTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.QuickTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   calendar.QuickTaskTable,
			Columns: []string{calendar.QuickTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{calendar.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CalendarUpdateOne is the builder for updating a single Calendar entity.
type CalendarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CalendarMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CalendarUpdateOne) SetCreatedAt(t time.Time) *CalendarUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CalendarUpdateOne) SetNillableCreatedAt(t *time.Time) *CalendarUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CalendarUpdateOne) SetUpdatedAt(t time.Time) *CalendarUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetReleaseDate sets the "ReleaseDate" field.
func (cuo *CalendarUpdateOne) SetReleaseDate(t time.Time) *CalendarUpdateOne {
	cuo.mutation.SetReleaseDate(t)
	return cuo
}

// SetProductImage sets the "ProductImage" field.
func (cuo *CalendarUpdateOne) SetProductImage(s string) *CalendarUpdateOne {
	cuo.mutation.SetProductImage(s)
	return cuo
}

// SetNillableProductImage sets the "ProductImage" field if the given value is not nil.
func (cuo *CalendarUpdateOne) SetNillableProductImage(s *string) *CalendarUpdateOne {
	if s != nil {
		cuo.SetProductImage(*s)
	}
	return cuo
}

// SetProductName sets the "ProductName" field.
func (cuo *CalendarUpdateOne) SetProductName(s string) *CalendarUpdateOne {
	cuo.mutation.SetProductName(s)
	return cuo
}

// SetHypedRelease sets the "HypedRelease" field.
func (cuo *CalendarUpdateOne) SetHypedRelease(b bool) *CalendarUpdateOne {
	cuo.mutation.SetHypedRelease(b)
	return cuo
}

// SetUsersRunning sets the "UsersRunning" field.
func (cuo *CalendarUpdateOne) SetUsersRunning(i int) *CalendarUpdateOne {
	cuo.mutation.ResetUsersRunning()
	cuo.mutation.SetUsersRunning(i)
	return cuo
}

// AddUsersRunning adds i to the "UsersRunning" field.
func (cuo *CalendarUpdateOne) AddUsersRunning(i int) *CalendarUpdateOne {
	cuo.mutation.AddUsersRunning(i)
	return cuo
}

// SetQuickTaskID sets the "QuickTask" edge to the Product entity by ID.
func (cuo *CalendarUpdateOne) SetQuickTaskID(id uuid.UUID) *CalendarUpdateOne {
	cuo.mutation.SetQuickTaskID(id)
	return cuo
}

// SetNillableQuickTaskID sets the "QuickTask" edge to the Product entity by ID if the given value is not nil.
func (cuo *CalendarUpdateOne) SetNillableQuickTaskID(id *uuid.UUID) *CalendarUpdateOne {
	if id != nil {
		cuo = cuo.SetQuickTaskID(*id)
	}
	return cuo
}

// SetQuickTask sets the "QuickTask" edge to the Product entity.
func (cuo *CalendarUpdateOne) SetQuickTask(p *Product) *CalendarUpdateOne {
	return cuo.SetQuickTaskID(p.ID)
}

// Mutation returns the CalendarMutation object of the builder.
func (cuo *CalendarUpdateOne) Mutation() *CalendarMutation {
	return cuo.mutation
}

// ClearQuickTask clears the "QuickTask" edge to the Product entity.
func (cuo *CalendarUpdateOne) ClearQuickTask() *CalendarUpdateOne {
	cuo.mutation.ClearQuickTask()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CalendarUpdateOne) Select(field string, fields ...string) *CalendarUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Calendar entity.
func (cuo *CalendarUpdateOne) Save(ctx context.Context) (*Calendar, error) {
	var (
		err  error
		node *Calendar
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CalendarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CalendarUpdateOne) SaveX(ctx context.Context) *Calendar {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CalendarUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CalendarUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CalendarUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := calendar.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CalendarUpdateOne) sqlSave(ctx context.Context) (_node *Calendar, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   calendar.Table,
			Columns: calendar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: calendar.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Calendar.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, calendar.FieldID)
		for _, f := range fields {
			if !calendar.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != calendar.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: calendar.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: calendar.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: calendar.FieldReleaseDate,
		})
	}
	if value, ok := cuo.mutation.ProductImage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calendar.FieldProductImage,
		})
	}
	if value, ok := cuo.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: calendar.FieldProductName,
		})
	}
	if value, ok := cuo.mutation.HypedRelease(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: calendar.FieldHypedRelease,
		})
	}
	if value, ok := cuo.mutation.UsersRunning(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calendar.FieldUsersRunning,
		})
	}
	if value, ok := cuo.mutation.AddedUsersRunning(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: calendar.FieldUsersRunning,
		})
	}
	if cuo.mutation.QuickTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   calendar.QuickTaskTable,
			Columns: []string{calendar.QuickTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.QuickTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   calendar.QuickTaskTable,
			Columns: []string{calendar.QuickTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Calendar{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{calendar.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
