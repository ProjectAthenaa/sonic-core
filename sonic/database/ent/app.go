// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// App is the model entity for the App schema.
type App struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FirstLogin holds the value of the "first_login" field.
	FirstLogin bool `json:"first_login,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppQuery when eager-loading is set.
	Edges    AppEdges `json:"edges"`
	user_app *uuid.UUID
}

// AppEdges holds the relations/edges for other nodes in the graph.
type AppEdges struct {
	// User holds the value of the User edge.
	User *User `json:"User,omitempty"`
	// Settings holds the value of the Settings edge.
	Settings []*Settings `json:"Settings,omitempty"`
	// ProxyLists holds the value of the ProxyLists edge.
	ProxyLists []*ProxyList `json:"ProxyLists,omitempty"`
	// ProfileGroups holds the value of the ProfileGroups edge.
	ProfileGroups []*ProfileGroup `json:"ProfileGroups,omitempty"`
	// TaskGroups holds the value of the TaskGroups edge.
	TaskGroups []*TaskGroup `json:"TaskGroups,omitempty"`
	// AccountGroups holds the value of the AccountGroups edge.
	AccountGroups []*AccountGroup `json:"AccountGroups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge User was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "User"}
}

// SettingsOrErr returns the Settings value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) SettingsOrErr() ([]*Settings, error) {
	if e.loadedTypes[1] {
		return e.Settings, nil
	}
	return nil, &NotLoadedError{edge: "Settings"}
}

// ProxyListsOrErr returns the ProxyLists value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) ProxyListsOrErr() ([]*ProxyList, error) {
	if e.loadedTypes[2] {
		return e.ProxyLists, nil
	}
	return nil, &NotLoadedError{edge: "ProxyLists"}
}

// ProfileGroupsOrErr returns the ProfileGroups value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) ProfileGroupsOrErr() ([]*ProfileGroup, error) {
	if e.loadedTypes[3] {
		return e.ProfileGroups, nil
	}
	return nil, &NotLoadedError{edge: "ProfileGroups"}
}

// TaskGroupsOrErr returns the TaskGroups value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) TaskGroupsOrErr() ([]*TaskGroup, error) {
	if e.loadedTypes[4] {
		return e.TaskGroups, nil
	}
	return nil, &NotLoadedError{edge: "TaskGroups"}
}

// AccountGroupsOrErr returns the AccountGroups value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) AccountGroupsOrErr() ([]*AccountGroup, error) {
	if e.loadedTypes[5] {
		return e.AccountGroups, nil
	}
	return nil, &NotLoadedError{edge: "AccountGroups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*App) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case app.FieldFirstLogin:
			values[i] = new(sql.NullBool)
		case app.FieldCreatedAt, app.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case app.FieldID:
			values[i] = new(uuid.UUID)
		case app.ForeignKeys[0]: // user_app
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type App", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the App fields.
func (a *App) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case app.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case app.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case app.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case app.FieldFirstLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field first_login", values[i])
			} else if value.Valid {
				a.FirstLogin = value.Bool
			}
		case app.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_app", values[i])
			} else if value != nil {
				a.user_app = value
			}
		}
	}
	return nil
}

// QueryUser queries the "User" edge of the App entity.
func (a *App) QueryUser() *UserQuery {
	return (&AppClient{config: a.config}).QueryUser(a)
}

// QuerySettings queries the "Settings" edge of the App entity.
func (a *App) QuerySettings() *SettingsQuery {
	return (&AppClient{config: a.config}).QuerySettings(a)
}

// QueryProxyLists queries the "ProxyLists" edge of the App entity.
func (a *App) QueryProxyLists() *ProxyListQuery {
	return (&AppClient{config: a.config}).QueryProxyLists(a)
}

// QueryProfileGroups queries the "ProfileGroups" edge of the App entity.
func (a *App) QueryProfileGroups() *ProfileGroupQuery {
	return (&AppClient{config: a.config}).QueryProfileGroups(a)
}

// QueryTaskGroups queries the "TaskGroups" edge of the App entity.
func (a *App) QueryTaskGroups() *TaskGroupQuery {
	return (&AppClient{config: a.config}).QueryTaskGroups(a)
}

// QueryAccountGroups queries the "AccountGroups" edge of the App entity.
func (a *App) QueryAccountGroups() *AccountGroupQuery {
	return (&AppClient{config: a.config}).QueryAccountGroups(a)
}

// Update returns a builder for updating this App.
// Note that you need to call App.Unwrap() before calling this method if this App
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *App) Update() *AppUpdateOne {
	return (&AppClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the App entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *App) Unwrap() *App {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: App is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *App) String() string {
	var builder strings.Builder
	builder.WriteString("App(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", first_login=")
	builder.WriteString(fmt.Sprintf("%v", a.FirstLogin))
	builder.WriteByte(')')
	return builder.String()
}

// Apps is a parsable slice of App.
type Apps []*App

func (a Apps) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
