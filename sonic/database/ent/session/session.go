// Code generated by entc, DO NOT EDIT.

package session

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the session type in the database.
	Label = "session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeviceName holds the string denoting the devicename field in the database.
	FieldDeviceName = "device_name"
	// FieldOS holds the string denoting the os field in the database.
	FieldOS = "os"
	// FieldDeviceType holds the string denoting the devicetype field in the database.
	FieldDeviceType = "device_type"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldExpired holds the string denoting the expired field in the database.
	FieldExpired = "expired"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the session in the database.
	Table = "sessions"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "sessions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_sessions"
)

// Columns holds all SQL columns for session fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeviceName,
	FieldOS,
	FieldDeviceType,
	FieldIP,
	FieldExpired,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sessions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_sessions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultDeviceName holds the default value on creation for the "DeviceName" field.
	DefaultDeviceName string
	// DefaultOS holds the default value on creation for the "OS" field.
	DefaultOS string
	// DefaultIP holds the default value on creation for the "IP" field.
	DefaultIP string
	// DefaultExpired holds the default value on creation for the "Expired" field.
	DefaultExpired bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// DeviceType defines the type for the "DeviceType" enum field.
type DeviceType string

// DeviceTypeUnknown is the default value of the DeviceType enum.
const DefaultDeviceType = DeviceTypeUnknown

// DeviceType values.
const (
	DeviceTypeUnknown DeviceType = "Unknown"
	DeviceTypePhone   DeviceType = "Phone"
	DeviceTypeTablet  DeviceType = "Tablet"
	DeviceTypePC      DeviceType = "PC"
	DeviceTypeLaptop  DeviceType = "Laptop"
)

func (_devicetype DeviceType) String() string {
	return string(_devicetype)
}

// DeviceTypeValidator is a validator for the "DeviceType" field enum values. It is called by the builders before save.
func DeviceTypeValidator(_devicetype DeviceType) error {
	switch _devicetype {
	case DeviceTypeUnknown, DeviceTypePhone, DeviceTypeTablet, DeviceTypePC, DeviceTypeLaptop:
		return nil
	default:
		return fmt.Errorf("session: invalid enum value for DeviceType field: %q", _devicetype)
	}
}
