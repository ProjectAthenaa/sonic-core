// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/billing"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
)

// BillingUpdate is the builder for updating Billing entities.
type BillingUpdate struct {
	config
	hooks    []Hook
	mutation *BillingMutation
}

// Where adds a new predicate for the BillingUpdate builder.
func (bu *BillingUpdate) Where(ps ...predicate.Billing) *BillingUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetCardholderName sets the "CardholderName" field.
func (bu *BillingUpdate) SetCardholderName(s string) *BillingUpdate {
	bu.mutation.SetCardholderName(s)
	return bu
}

// SetCardNumber sets the "CardNumber" field.
func (bu *BillingUpdate) SetCardNumber(s string) *BillingUpdate {
	bu.mutation.SetCardNumber(s)
	return bu
}

// SetExpiryMonth sets the "ExpiryMonth" field.
func (bu *BillingUpdate) SetExpiryMonth(s string) *BillingUpdate {
	bu.mutation.SetExpiryMonth(s)
	return bu
}

// SetExpiryYear sets the "ExpiryYear" field.
func (bu *BillingUpdate) SetExpiryYear(s string) *BillingUpdate {
	bu.mutation.SetExpiryYear(s)
	return bu
}

// SetCVV sets the "CVV" field.
func (bu *BillingUpdate) SetCVV(s string) *BillingUpdate {
	bu.mutation.SetCVV(s)
	return bu
}

// AddProfileIDs adds the "Profile" edge to the Profile entity by IDs.
func (bu *BillingUpdate) AddProfileIDs(ids ...int) *BillingUpdate {
	bu.mutation.AddProfileIDs(ids...)
	return bu
}

// AddProfile adds the "Profile" edges to the Profile entity.
func (bu *BillingUpdate) AddProfile(p ...*Profile) *BillingUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddProfileIDs(ids...)
}

// Mutation returns the BillingMutation object of the builder.
func (bu *BillingUpdate) Mutation() *BillingMutation {
	return bu.mutation
}

// ClearProfile clears all "Profile" edges to the Profile entity.
func (bu *BillingUpdate) ClearProfile() *BillingUpdate {
	bu.mutation.ClearProfile()
	return bu
}

// RemoveProfileIDs removes the "Profile" edge to Profile entities by IDs.
func (bu *BillingUpdate) RemoveProfileIDs(ids ...int) *BillingUpdate {
	bu.mutation.RemoveProfileIDs(ids...)
	return bu
}

// RemoveProfile removes "Profile" edges to Profile entities.
func (bu *BillingUpdate) RemoveProfile(p ...*Profile) *BillingUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemoveProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillingUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillingUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillingUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BillingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   billing.Table,
			Columns: billing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: billing.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CardholderName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCardholderName,
		})
	}
	if value, ok := bu.mutation.CardNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCardNumber,
		})
	}
	if value, ok := bu.mutation.ExpiryMonth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldExpiryMonth,
		})
	}
	if value, ok := bu.mutation.ExpiryYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldExpiryYear,
		})
	}
	if value, ok := bu.mutation.CVV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCVV,
		})
	}
	if bu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   billing.ProfileTable,
			Columns: billing.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedProfileIDs(); len(nodes) > 0 && !bu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   billing.ProfileTable,
			Columns: billing.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   billing.ProfileTable,
			Columns: billing.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billing.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BillingUpdateOne is the builder for updating a single Billing entity.
type BillingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingMutation
}

// SetCardholderName sets the "CardholderName" field.
func (buo *BillingUpdateOne) SetCardholderName(s string) *BillingUpdateOne {
	buo.mutation.SetCardholderName(s)
	return buo
}

// SetCardNumber sets the "CardNumber" field.
func (buo *BillingUpdateOne) SetCardNumber(s string) *BillingUpdateOne {
	buo.mutation.SetCardNumber(s)
	return buo
}

// SetExpiryMonth sets the "ExpiryMonth" field.
func (buo *BillingUpdateOne) SetExpiryMonth(s string) *BillingUpdateOne {
	buo.mutation.SetExpiryMonth(s)
	return buo
}

// SetExpiryYear sets the "ExpiryYear" field.
func (buo *BillingUpdateOne) SetExpiryYear(s string) *BillingUpdateOne {
	buo.mutation.SetExpiryYear(s)
	return buo
}

// SetCVV sets the "CVV" field.
func (buo *BillingUpdateOne) SetCVV(s string) *BillingUpdateOne {
	buo.mutation.SetCVV(s)
	return buo
}

// AddProfileIDs adds the "Profile" edge to the Profile entity by IDs.
func (buo *BillingUpdateOne) AddProfileIDs(ids ...int) *BillingUpdateOne {
	buo.mutation.AddProfileIDs(ids...)
	return buo
}

// AddProfile adds the "Profile" edges to the Profile entity.
func (buo *BillingUpdateOne) AddProfile(p ...*Profile) *BillingUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddProfileIDs(ids...)
}

// Mutation returns the BillingMutation object of the builder.
func (buo *BillingUpdateOne) Mutation() *BillingMutation {
	return buo.mutation
}

// ClearProfile clears all "Profile" edges to the Profile entity.
func (buo *BillingUpdateOne) ClearProfile() *BillingUpdateOne {
	buo.mutation.ClearProfile()
	return buo
}

// RemoveProfileIDs removes the "Profile" edge to Profile entities by IDs.
func (buo *BillingUpdateOne) RemoveProfileIDs(ids ...int) *BillingUpdateOne {
	buo.mutation.RemoveProfileIDs(ids...)
	return buo
}

// RemoveProfile removes "Profile" edges to Profile entities.
func (buo *BillingUpdateOne) RemoveProfile(p ...*Profile) *BillingUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemoveProfileIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillingUpdateOne) Select(field string, fields ...string) *BillingUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Billing entity.
func (buo *BillingUpdateOne) Save(ctx context.Context) (*Billing, error) {
	var (
		err  error
		node *Billing
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillingUpdateOne) SaveX(ctx context.Context) *Billing {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillingUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillingUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BillingUpdateOne) sqlSave(ctx context.Context) (_node *Billing, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   billing.Table,
			Columns: billing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: billing.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Billing.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billing.FieldID)
		for _, f := range fields {
			if !billing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.CardholderName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCardholderName,
		})
	}
	if value, ok := buo.mutation.CardNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCardNumber,
		})
	}
	if value, ok := buo.mutation.ExpiryMonth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldExpiryMonth,
		})
	}
	if value, ok := buo.mutation.ExpiryYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldExpiryYear,
		})
	}
	if value, ok := buo.mutation.CVV(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: billing.FieldCVV,
		})
	}
	if buo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   billing.ProfileTable,
			Columns: billing.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedProfileIDs(); len(nodes) > 0 && !buo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   billing.ProfileTable,
			Columns: billing.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   billing.ProfileTable,
			Columns: billing.ProfilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Billing{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billing.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
