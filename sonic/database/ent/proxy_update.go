// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxy"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxylist"
	"github.com/google/uuid"
)

// ProxyUpdate is the builder for updating Proxy entities.
type ProxyUpdate struct {
	config
	hooks    []Hook
	mutation *ProxyMutation
}

// Where appends a list predicates to the ProxyUpdate builder.
func (pu *ProxyUpdate) Where(ps ...predicate.Proxy) *ProxyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProxyUpdate) SetCreatedAt(t time.Time) *ProxyUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillableCreatedAt(t *time.Time) *ProxyUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProxyUpdate) SetUpdatedAt(t time.Time) *ProxyUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUsername sets the "Username" field.
func (pu *ProxyUpdate) SetUsername(s string) *ProxyUpdate {
	pu.mutation.SetUsername(s)
	return pu
}

// SetNillableUsername sets the "Username" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillableUsername(s *string) *ProxyUpdate {
	if s != nil {
		pu.SetUsername(*s)
	}
	return pu
}

// ClearUsername clears the value of the "Username" field.
func (pu *ProxyUpdate) ClearUsername() *ProxyUpdate {
	pu.mutation.ClearUsername()
	return pu
}

// SetPassword sets the "Password" field.
func (pu *ProxyUpdate) SetPassword(s string) *ProxyUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (pu *ProxyUpdate) SetNillablePassword(s *string) *ProxyUpdate {
	if s != nil {
		pu.SetPassword(*s)
	}
	return pu
}

// ClearPassword clears the value of the "Password" field.
func (pu *ProxyUpdate) ClearPassword() *ProxyUpdate {
	pu.mutation.ClearPassword()
	return pu
}

// SetIP sets the "IP" field.
func (pu *ProxyUpdate) SetIP(s string) *ProxyUpdate {
	pu.mutation.SetIP(s)
	return pu
}

// SetPort sets the "Port" field.
func (pu *ProxyUpdate) SetPort(s string) *ProxyUpdate {
	pu.mutation.SetPort(s)
	return pu
}

// SetProxyListID sets the "ProxyList" edge to the ProxyList entity by ID.
func (pu *ProxyUpdate) SetProxyListID(id uuid.UUID) *ProxyUpdate {
	pu.mutation.SetProxyListID(id)
	return pu
}

// SetNillableProxyListID sets the "ProxyList" edge to the ProxyList entity by ID if the given value is not nil.
func (pu *ProxyUpdate) SetNillableProxyListID(id *uuid.UUID) *ProxyUpdate {
	if id != nil {
		pu = pu.SetProxyListID(*id)
	}
	return pu
}

// SetProxyList sets the "ProxyList" edge to the ProxyList entity.
func (pu *ProxyUpdate) SetProxyList(p *ProxyList) *ProxyUpdate {
	return pu.SetProxyListID(p.ID)
}

// Mutation returns the ProxyMutation object of the builder.
func (pu *ProxyUpdate) Mutation() *ProxyMutation {
	return pu.mutation
}

// ClearProxyList clears the "ProxyList" edge to the ProxyList entity.
func (pu *ProxyUpdate) ClearProxyList() *ProxyUpdate {
	pu.mutation.ClearProxyList()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProxyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProxyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProxyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProxyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProxyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProxyUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := proxy.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProxyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   proxy.Table,
			Columns: proxy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: proxy.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxy.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxy.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldUsername,
		})
	}
	if pu.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: proxy.FieldUsername,
		})
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldPassword,
		})
	}
	if pu.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: proxy.FieldPassword,
		})
	}
	if value, ok := pu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldIP,
		})
	}
	if value, ok := pu.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldPort,
		})
	}
	if pu.mutation.ProxyListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.ProxyListTable,
			Columns: []string{proxy.ProxyListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProxyListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.ProxyListTable,
			Columns: []string{proxy.ProxyListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProxyUpdateOne is the builder for updating a single Proxy entity.
type ProxyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProxyMutation
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProxyUpdateOne) SetCreatedAt(t time.Time) *ProxyUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableCreatedAt(t *time.Time) *ProxyUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProxyUpdateOne) SetUpdatedAt(t time.Time) *ProxyUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUsername sets the "Username" field.
func (puo *ProxyUpdateOne) SetUsername(s string) *ProxyUpdateOne {
	puo.mutation.SetUsername(s)
	return puo
}

// SetNillableUsername sets the "Username" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableUsername(s *string) *ProxyUpdateOne {
	if s != nil {
		puo.SetUsername(*s)
	}
	return puo
}

// ClearUsername clears the value of the "Username" field.
func (puo *ProxyUpdateOne) ClearUsername() *ProxyUpdateOne {
	puo.mutation.ClearUsername()
	return puo
}

// SetPassword sets the "Password" field.
func (puo *ProxyUpdateOne) SetPassword(s string) *ProxyUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillablePassword(s *string) *ProxyUpdateOne {
	if s != nil {
		puo.SetPassword(*s)
	}
	return puo
}

// ClearPassword clears the value of the "Password" field.
func (puo *ProxyUpdateOne) ClearPassword() *ProxyUpdateOne {
	puo.mutation.ClearPassword()
	return puo
}

// SetIP sets the "IP" field.
func (puo *ProxyUpdateOne) SetIP(s string) *ProxyUpdateOne {
	puo.mutation.SetIP(s)
	return puo
}

// SetPort sets the "Port" field.
func (puo *ProxyUpdateOne) SetPort(s string) *ProxyUpdateOne {
	puo.mutation.SetPort(s)
	return puo
}

// SetProxyListID sets the "ProxyList" edge to the ProxyList entity by ID.
func (puo *ProxyUpdateOne) SetProxyListID(id uuid.UUID) *ProxyUpdateOne {
	puo.mutation.SetProxyListID(id)
	return puo
}

// SetNillableProxyListID sets the "ProxyList" edge to the ProxyList entity by ID if the given value is not nil.
func (puo *ProxyUpdateOne) SetNillableProxyListID(id *uuid.UUID) *ProxyUpdateOne {
	if id != nil {
		puo = puo.SetProxyListID(*id)
	}
	return puo
}

// SetProxyList sets the "ProxyList" edge to the ProxyList entity.
func (puo *ProxyUpdateOne) SetProxyList(p *ProxyList) *ProxyUpdateOne {
	return puo.SetProxyListID(p.ID)
}

// Mutation returns the ProxyMutation object of the builder.
func (puo *ProxyUpdateOne) Mutation() *ProxyMutation {
	return puo.mutation
}

// ClearProxyList clears the "ProxyList" edge to the ProxyList entity.
func (puo *ProxyUpdateOne) ClearProxyList() *ProxyUpdateOne {
	puo.mutation.ClearProxyList()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProxyUpdateOne) Select(field string, fields ...string) *ProxyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Proxy entity.
func (puo *ProxyUpdateOne) Save(ctx context.Context) (*Proxy, error) {
	var (
		err  error
		node *Proxy
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProxyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProxyUpdateOne) SaveX(ctx context.Context) *Proxy {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProxyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProxyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProxyUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := proxy.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProxyUpdateOne) sqlSave(ctx context.Context) (_node *Proxy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   proxy.Table,
			Columns: proxy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: proxy.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Proxy.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, proxy.FieldID)
		for _, f := range fields {
			if !proxy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != proxy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxy.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxy.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldUsername,
		})
	}
	if puo.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: proxy.FieldUsername,
		})
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldPassword,
		})
	}
	if puo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: proxy.FieldPassword,
		})
	}
	if value, ok := puo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldIP,
		})
	}
	if value, ok := puo.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldPort,
		})
	}
	if puo.mutation.ProxyListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.ProxyListTable,
			Columns: []string{proxy.ProxyListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProxyListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.ProxyListTable,
			Columns: []string{proxy.ProxyListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Proxy{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{proxy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
