// Code generated by entc, DO NOT EDIT.

package settings

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// SuccessWebhook applies equality check predicate on the "SuccessWebhook" field. It's identical to SuccessWebhookEQ.
func SuccessWebhook(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuccessWebhook), v))
	})
}

// DeclineWebhook applies equality check predicate on the "DeclineWebhook" field. It's identical to DeclineWebhookEQ.
func DeclineWebhook(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclineWebhook), v))
	})
}

// CheckoutDelay applies equality check predicate on the "CheckoutDelay" field. It's identical to CheckoutDelayEQ.
func CheckoutDelay(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckoutDelay), v))
	})
}

// ATCDelay applies equality check predicate on the "ATCDelay" field. It's identical to ATCDelayEQ.
func ATCDelay(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldATCDelay), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// SuccessWebhookEQ applies the EQ predicate on the "SuccessWebhook" field.
func SuccessWebhookEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookNEQ applies the NEQ predicate on the "SuccessWebhook" field.
func SuccessWebhookNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookIn applies the In predicate on the "SuccessWebhook" field.
func SuccessWebhookIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuccessWebhook), v...))
	})
}

// SuccessWebhookNotIn applies the NotIn predicate on the "SuccessWebhook" field.
func SuccessWebhookNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuccessWebhook), v...))
	})
}

// SuccessWebhookGT applies the GT predicate on the "SuccessWebhook" field.
func SuccessWebhookGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookGTE applies the GTE predicate on the "SuccessWebhook" field.
func SuccessWebhookGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookLT applies the LT predicate on the "SuccessWebhook" field.
func SuccessWebhookLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookLTE applies the LTE predicate on the "SuccessWebhook" field.
func SuccessWebhookLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookContains applies the Contains predicate on the "SuccessWebhook" field.
func SuccessWebhookContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookHasPrefix applies the HasPrefix predicate on the "SuccessWebhook" field.
func SuccessWebhookHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookHasSuffix applies the HasSuffix predicate on the "SuccessWebhook" field.
func SuccessWebhookHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookEqualFold applies the EqualFold predicate on the "SuccessWebhook" field.
func SuccessWebhookEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSuccessWebhook), v))
	})
}

// SuccessWebhookContainsFold applies the ContainsFold predicate on the "SuccessWebhook" field.
func SuccessWebhookContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSuccessWebhook), v))
	})
}

// DeclineWebhookEQ applies the EQ predicate on the "DeclineWebhook" field.
func DeclineWebhookEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookNEQ applies the NEQ predicate on the "DeclineWebhook" field.
func DeclineWebhookNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookIn applies the In predicate on the "DeclineWebhook" field.
func DeclineWebhookIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeclineWebhook), v...))
	})
}

// DeclineWebhookNotIn applies the NotIn predicate on the "DeclineWebhook" field.
func DeclineWebhookNotIn(vs ...string) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeclineWebhook), v...))
	})
}

// DeclineWebhookGT applies the GT predicate on the "DeclineWebhook" field.
func DeclineWebhookGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookGTE applies the GTE predicate on the "DeclineWebhook" field.
func DeclineWebhookGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookLT applies the LT predicate on the "DeclineWebhook" field.
func DeclineWebhookLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookLTE applies the LTE predicate on the "DeclineWebhook" field.
func DeclineWebhookLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookContains applies the Contains predicate on the "DeclineWebhook" field.
func DeclineWebhookContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookHasPrefix applies the HasPrefix predicate on the "DeclineWebhook" field.
func DeclineWebhookHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookHasSuffix applies the HasSuffix predicate on the "DeclineWebhook" field.
func DeclineWebhookHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookEqualFold applies the EqualFold predicate on the "DeclineWebhook" field.
func DeclineWebhookEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeclineWebhook), v))
	})
}

// DeclineWebhookContainsFold applies the ContainsFold predicate on the "DeclineWebhook" field.
func DeclineWebhookContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeclineWebhook), v))
	})
}

// CheckoutDelayEQ applies the EQ predicate on the "CheckoutDelay" field.
func CheckoutDelayEQ(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckoutDelay), v))
	})
}

// CheckoutDelayNEQ applies the NEQ predicate on the "CheckoutDelay" field.
func CheckoutDelayNEQ(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckoutDelay), v))
	})
}

// CheckoutDelayIn applies the In predicate on the "CheckoutDelay" field.
func CheckoutDelayIn(vs ...int) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCheckoutDelay), v...))
	})
}

// CheckoutDelayNotIn applies the NotIn predicate on the "CheckoutDelay" field.
func CheckoutDelayNotIn(vs ...int) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCheckoutDelay), v...))
	})
}

// CheckoutDelayGT applies the GT predicate on the "CheckoutDelay" field.
func CheckoutDelayGT(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckoutDelay), v))
	})
}

// CheckoutDelayGTE applies the GTE predicate on the "CheckoutDelay" field.
func CheckoutDelayGTE(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckoutDelay), v))
	})
}

// CheckoutDelayLT applies the LT predicate on the "CheckoutDelay" field.
func CheckoutDelayLT(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckoutDelay), v))
	})
}

// CheckoutDelayLTE applies the LTE predicate on the "CheckoutDelay" field.
func CheckoutDelayLTE(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckoutDelay), v))
	})
}

// ATCDelayEQ applies the EQ predicate on the "ATCDelay" field.
func ATCDelayEQ(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldATCDelay), v))
	})
}

// ATCDelayNEQ applies the NEQ predicate on the "ATCDelay" field.
func ATCDelayNEQ(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldATCDelay), v))
	})
}

// ATCDelayIn applies the In predicate on the "ATCDelay" field.
func ATCDelayIn(vs ...int) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldATCDelay), v...))
	})
}

// ATCDelayNotIn applies the NotIn predicate on the "ATCDelay" field.
func ATCDelayNotIn(vs ...int) predicate.Settings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldATCDelay), v...))
	})
}

// ATCDelayGT applies the GT predicate on the "ATCDelay" field.
func ATCDelayGT(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldATCDelay), v))
	})
}

// ATCDelayGTE applies the GTE predicate on the "ATCDelay" field.
func ATCDelayGTE(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldATCDelay), v))
	})
}

// ATCDelayLT applies the LT predicate on the "ATCDelay" field.
func ATCDelayLT(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldATCDelay), v))
	})
}

// ATCDelayLTE applies the LTE predicate on the "ATCDelay" field.
func ATCDelayLTE(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldATCDelay), v))
	})
}

// HasApp applies the HasEdge predicate on the "App" edge.
func HasApp() predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppTable, AppColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "App" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppTable, AppColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		p(s.Not())
	})
}
