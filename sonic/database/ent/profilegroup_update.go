// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profile"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/profilegroup"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/task"
	"github.com/google/uuid"
)

// ProfileGroupUpdate is the builder for updating ProfileGroup entities.
type ProfileGroupUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileGroupMutation
}

// Where appends a list predicates to the ProfileGroupUpdate builder.
func (pgu *ProfileGroupUpdate) Where(ps ...predicate.ProfileGroup) *ProfileGroupUpdate {
	pgu.mutation.Where(ps...)
	return pgu
}

// SetCreatedAt sets the "created_at" field.
func (pgu *ProfileGroupUpdate) SetCreatedAt(t time.Time) *ProfileGroupUpdate {
	pgu.mutation.SetCreatedAt(t)
	return pgu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgu *ProfileGroupUpdate) SetNillableCreatedAt(t *time.Time) *ProfileGroupUpdate {
	if t != nil {
		pgu.SetCreatedAt(*t)
	}
	return pgu
}

// SetUpdatedAt sets the "updated_at" field.
func (pgu *ProfileGroupUpdate) SetUpdatedAt(t time.Time) *ProfileGroupUpdate {
	pgu.mutation.SetUpdatedAt(t)
	return pgu
}

// SetName sets the "Name" field.
func (pgu *ProfileGroupUpdate) SetName(s string) *ProfileGroupUpdate {
	pgu.mutation.SetName(s)
	return pgu
}

// AddProfileIDs adds the "Profiles" edge to the Profile entity by IDs.
func (pgu *ProfileGroupUpdate) AddProfileIDs(ids ...uuid.UUID) *ProfileGroupUpdate {
	pgu.mutation.AddProfileIDs(ids...)
	return pgu
}

// AddProfiles adds the "Profiles" edges to the Profile entity.
func (pgu *ProfileGroupUpdate) AddProfiles(p ...*Profile) *ProfileGroupUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pgu.AddProfileIDs(ids...)
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (pgu *ProfileGroupUpdate) AddAppIDs(ids ...uuid.UUID) *ProfileGroupUpdate {
	pgu.mutation.AddAppIDs(ids...)
	return pgu
}

// AddApp adds the "App" edges to the App entity.
func (pgu *ProfileGroupUpdate) AddApp(a ...*App) *ProfileGroupUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pgu.AddAppIDs(ids...)
}

// AddProfileGroupIDs adds the "ProfileGroup" edge to the Task entity by IDs.
func (pgu *ProfileGroupUpdate) AddProfileGroupIDs(ids ...uuid.UUID) *ProfileGroupUpdate {
	pgu.mutation.AddProfileGroupIDs(ids...)
	return pgu
}

// AddProfileGroup adds the "ProfileGroup" edges to the Task entity.
func (pgu *ProfileGroupUpdate) AddProfileGroup(t ...*Task) *ProfileGroupUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pgu.AddProfileGroupIDs(ids...)
}

// Mutation returns the ProfileGroupMutation object of the builder.
func (pgu *ProfileGroupUpdate) Mutation() *ProfileGroupMutation {
	return pgu.mutation
}

// ClearProfiles clears all "Profiles" edges to the Profile entity.
func (pgu *ProfileGroupUpdate) ClearProfiles() *ProfileGroupUpdate {
	pgu.mutation.ClearProfiles()
	return pgu
}

// RemoveProfileIDs removes the "Profiles" edge to Profile entities by IDs.
func (pgu *ProfileGroupUpdate) RemoveProfileIDs(ids ...uuid.UUID) *ProfileGroupUpdate {
	pgu.mutation.RemoveProfileIDs(ids...)
	return pgu
}

// RemoveProfiles removes "Profiles" edges to Profile entities.
func (pgu *ProfileGroupUpdate) RemoveProfiles(p ...*Profile) *ProfileGroupUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pgu.RemoveProfileIDs(ids...)
}

// ClearApp clears all "App" edges to the App entity.
func (pgu *ProfileGroupUpdate) ClearApp() *ProfileGroupUpdate {
	pgu.mutation.ClearApp()
	return pgu
}

// RemoveAppIDs removes the "App" edge to App entities by IDs.
func (pgu *ProfileGroupUpdate) RemoveAppIDs(ids ...uuid.UUID) *ProfileGroupUpdate {
	pgu.mutation.RemoveAppIDs(ids...)
	return pgu
}

// RemoveApp removes "App" edges to App entities.
func (pgu *ProfileGroupUpdate) RemoveApp(a ...*App) *ProfileGroupUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pgu.RemoveAppIDs(ids...)
}

// ClearProfileGroup clears all "ProfileGroup" edges to the Task entity.
func (pgu *ProfileGroupUpdate) ClearProfileGroup() *ProfileGroupUpdate {
	pgu.mutation.ClearProfileGroup()
	return pgu
}

// RemoveProfileGroupIDs removes the "ProfileGroup" edge to Task entities by IDs.
func (pgu *ProfileGroupUpdate) RemoveProfileGroupIDs(ids ...uuid.UUID) *ProfileGroupUpdate {
	pgu.mutation.RemoveProfileGroupIDs(ids...)
	return pgu
}

// RemoveProfileGroup removes "ProfileGroup" edges to Task entities.
func (pgu *ProfileGroupUpdate) RemoveProfileGroup(t ...*Task) *ProfileGroupUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pgu.RemoveProfileGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pgu *ProfileGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pgu.defaults()
	if len(pgu.hooks) == 0 {
		affected, err = pgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pgu.mutation = mutation
			affected, err = pgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pgu.hooks) - 1; i >= 0; i-- {
			if pgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pgu *ProfileGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := pgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pgu *ProfileGroupUpdate) Exec(ctx context.Context) error {
	_, err := pgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgu *ProfileGroupUpdate) ExecX(ctx context.Context) {
	if err := pgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgu *ProfileGroupUpdate) defaults() {
	if _, ok := pgu.mutation.UpdatedAt(); !ok {
		v := profilegroup.UpdateDefaultUpdatedAt()
		pgu.mutation.SetUpdatedAt(v)
	}
}

func (pgu *ProfileGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profilegroup.Table,
			Columns: profilegroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profilegroup.FieldID,
			},
		},
	}
	if ps := pgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pgu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profilegroup.FieldCreatedAt,
		})
	}
	if value, ok := pgu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profilegroup.FieldUpdatedAt,
		})
	}
	if value, ok := pgu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profilegroup.FieldName,
		})
	}
	if pgu.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfilesTable,
			Columns: []string{profilegroup.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !pgu.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfilesTable,
			Columns: []string{profilegroup.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfilesTable,
			Columns: []string{profilegroup.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pgu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profilegroup.AppTable,
			Columns: profilegroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.RemovedAppIDs(); len(nodes) > 0 && !pgu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profilegroup.AppTable,
			Columns: profilegroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profilegroup.AppTable,
			Columns: profilegroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pgu.mutation.ProfileGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfileGroupTable,
			Columns: []string{profilegroup.ProfileGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.RemovedProfileGroupIDs(); len(nodes) > 0 && !pgu.mutation.ProfileGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfileGroupTable,
			Columns: []string{profilegroup.ProfileGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.ProfileGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfileGroupTable,
			Columns: []string{profilegroup.ProfileGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profilegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProfileGroupUpdateOne is the builder for updating a single ProfileGroup entity.
type ProfileGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileGroupMutation
}

// SetCreatedAt sets the "created_at" field.
func (pguo *ProfileGroupUpdateOne) SetCreatedAt(t time.Time) *ProfileGroupUpdateOne {
	pguo.mutation.SetCreatedAt(t)
	return pguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pguo *ProfileGroupUpdateOne) SetNillableCreatedAt(t *time.Time) *ProfileGroupUpdateOne {
	if t != nil {
		pguo.SetCreatedAt(*t)
	}
	return pguo
}

// SetUpdatedAt sets the "updated_at" field.
func (pguo *ProfileGroupUpdateOne) SetUpdatedAt(t time.Time) *ProfileGroupUpdateOne {
	pguo.mutation.SetUpdatedAt(t)
	return pguo
}

// SetName sets the "Name" field.
func (pguo *ProfileGroupUpdateOne) SetName(s string) *ProfileGroupUpdateOne {
	pguo.mutation.SetName(s)
	return pguo
}

// AddProfileIDs adds the "Profiles" edge to the Profile entity by IDs.
func (pguo *ProfileGroupUpdateOne) AddProfileIDs(ids ...uuid.UUID) *ProfileGroupUpdateOne {
	pguo.mutation.AddProfileIDs(ids...)
	return pguo
}

// AddProfiles adds the "Profiles" edges to the Profile entity.
func (pguo *ProfileGroupUpdateOne) AddProfiles(p ...*Profile) *ProfileGroupUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pguo.AddProfileIDs(ids...)
}

// AddAppIDs adds the "App" edge to the App entity by IDs.
func (pguo *ProfileGroupUpdateOne) AddAppIDs(ids ...uuid.UUID) *ProfileGroupUpdateOne {
	pguo.mutation.AddAppIDs(ids...)
	return pguo
}

// AddApp adds the "App" edges to the App entity.
func (pguo *ProfileGroupUpdateOne) AddApp(a ...*App) *ProfileGroupUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pguo.AddAppIDs(ids...)
}

// AddProfileGroupIDs adds the "ProfileGroup" edge to the Task entity by IDs.
func (pguo *ProfileGroupUpdateOne) AddProfileGroupIDs(ids ...uuid.UUID) *ProfileGroupUpdateOne {
	pguo.mutation.AddProfileGroupIDs(ids...)
	return pguo
}

// AddProfileGroup adds the "ProfileGroup" edges to the Task entity.
func (pguo *ProfileGroupUpdateOne) AddProfileGroup(t ...*Task) *ProfileGroupUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pguo.AddProfileGroupIDs(ids...)
}

// Mutation returns the ProfileGroupMutation object of the builder.
func (pguo *ProfileGroupUpdateOne) Mutation() *ProfileGroupMutation {
	return pguo.mutation
}

// ClearProfiles clears all "Profiles" edges to the Profile entity.
func (pguo *ProfileGroupUpdateOne) ClearProfiles() *ProfileGroupUpdateOne {
	pguo.mutation.ClearProfiles()
	return pguo
}

// RemoveProfileIDs removes the "Profiles" edge to Profile entities by IDs.
func (pguo *ProfileGroupUpdateOne) RemoveProfileIDs(ids ...uuid.UUID) *ProfileGroupUpdateOne {
	pguo.mutation.RemoveProfileIDs(ids...)
	return pguo
}

// RemoveProfiles removes "Profiles" edges to Profile entities.
func (pguo *ProfileGroupUpdateOne) RemoveProfiles(p ...*Profile) *ProfileGroupUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pguo.RemoveProfileIDs(ids...)
}

// ClearApp clears all "App" edges to the App entity.
func (pguo *ProfileGroupUpdateOne) ClearApp() *ProfileGroupUpdateOne {
	pguo.mutation.ClearApp()
	return pguo
}

// RemoveAppIDs removes the "App" edge to App entities by IDs.
func (pguo *ProfileGroupUpdateOne) RemoveAppIDs(ids ...uuid.UUID) *ProfileGroupUpdateOne {
	pguo.mutation.RemoveAppIDs(ids...)
	return pguo
}

// RemoveApp removes "App" edges to App entities.
func (pguo *ProfileGroupUpdateOne) RemoveApp(a ...*App) *ProfileGroupUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pguo.RemoveAppIDs(ids...)
}

// ClearProfileGroup clears all "ProfileGroup" edges to the Task entity.
func (pguo *ProfileGroupUpdateOne) ClearProfileGroup() *ProfileGroupUpdateOne {
	pguo.mutation.ClearProfileGroup()
	return pguo
}

// RemoveProfileGroupIDs removes the "ProfileGroup" edge to Task entities by IDs.
func (pguo *ProfileGroupUpdateOne) RemoveProfileGroupIDs(ids ...uuid.UUID) *ProfileGroupUpdateOne {
	pguo.mutation.RemoveProfileGroupIDs(ids...)
	return pguo
}

// RemoveProfileGroup removes "ProfileGroup" edges to Task entities.
func (pguo *ProfileGroupUpdateOne) RemoveProfileGroup(t ...*Task) *ProfileGroupUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pguo.RemoveProfileGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pguo *ProfileGroupUpdateOne) Select(field string, fields ...string) *ProfileGroupUpdateOne {
	pguo.fields = append([]string{field}, fields...)
	return pguo
}

// Save executes the query and returns the updated ProfileGroup entity.
func (pguo *ProfileGroupUpdateOne) Save(ctx context.Context) (*ProfileGroup, error) {
	var (
		err  error
		node *ProfileGroup
	)
	pguo.defaults()
	if len(pguo.hooks) == 0 {
		node, err = pguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pguo.mutation = mutation
			node, err = pguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pguo.hooks) - 1; i >= 0; i-- {
			if pguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pguo *ProfileGroupUpdateOne) SaveX(ctx context.Context) *ProfileGroup {
	node, err := pguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pguo *ProfileGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := pguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pguo *ProfileGroupUpdateOne) ExecX(ctx context.Context) {
	if err := pguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pguo *ProfileGroupUpdateOne) defaults() {
	if _, ok := pguo.mutation.UpdatedAt(); !ok {
		v := profilegroup.UpdateDefaultUpdatedAt()
		pguo.mutation.SetUpdatedAt(v)
	}
}

func (pguo *ProfileGroupUpdateOne) sqlSave(ctx context.Context) (_node *ProfileGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profilegroup.Table,
			Columns: profilegroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profilegroup.FieldID,
			},
		},
	}
	id, ok := pguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProfileGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profilegroup.FieldID)
		for _, f := range fields {
			if !profilegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profilegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pguo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profilegroup.FieldCreatedAt,
		})
	}
	if value, ok := pguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profilegroup.FieldUpdatedAt,
		})
	}
	if value, ok := pguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profilegroup.FieldName,
		})
	}
	if pguo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfilesTable,
			Columns: []string{profilegroup.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !pguo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfilesTable,
			Columns: []string{profilegroup.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfilesTable,
			Columns: []string{profilegroup.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pguo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profilegroup.AppTable,
			Columns: profilegroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.RemovedAppIDs(); len(nodes) > 0 && !pguo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profilegroup.AppTable,
			Columns: profilegroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   profilegroup.AppTable,
			Columns: profilegroup.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pguo.mutation.ProfileGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfileGroupTable,
			Columns: []string{profilegroup.ProfileGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.RemovedProfileGroupIDs(); len(nodes) > 0 && !pguo.mutation.ProfileGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfileGroupTable,
			Columns: []string{profilegroup.ProfileGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.ProfileGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profilegroup.ProfileGroupTable,
			Columns: []string{profilegroup.ProfileGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProfileGroup{config: pguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profilegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
