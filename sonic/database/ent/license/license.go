// Code generated by entc, DO NOT EDIT.

package license

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the license type in the database.
	Label = "license"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldHardwareID holds the string denoting the hardwareid field in the database.
	FieldHardwareID = "hardware_id"
	// FieldMobileHardwareID holds the string denoting the mobilehardwareid field in the database.
	FieldMobileHardwareID = "mobile_hardware_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "User"
	// EdgeStripe holds the string denoting the stripe edge name in mutations.
	EdgeStripe = "Stripe"
	// Table holds the table name of the license in the database.
	Table = "licenses"
	// UserTable is the table that holds the User relation/edge.
	UserTable = "licenses"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the User relation/edge.
	UserColumn = "user_license"
	// StripeTable is the table that holds the Stripe relation/edge.
	StripeTable = "stripes"
	// StripeInverseTable is the table name for the Stripe entity.
	// It exists in this package in order to avoid circular dependency with the "stripe" package.
	StripeInverseTable = "stripes"
	// StripeColumn is the table column denoting the Stripe relation/edge.
	StripeColumn = "license_stripe"
)

// Columns holds all SQL columns for license fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldKey,
	FieldHardwareID,
	FieldMobileHardwareID,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "licenses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_license",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "Type" enum field.
type Type string

// Type values.
const (
	TypeUnlocked Type = "Unlocked"
	TypeLifetime Type = "Lifetime"
	TypeRenewal  Type = "Renewal"
	TypeBeta     Type = "Beta"
	TypeWeekly   Type = "Weekly"
	TypeFNF      Type = "FNF"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "Type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUnlocked, TypeLifetime, TypeRenewal, TypeBeta, TypeWeekly, TypeFNF:
		return nil
	default:
		return fmt.Errorf("license: invalid enum value for Type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
