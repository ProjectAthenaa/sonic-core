// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxy"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxylist"
	"github.com/google/uuid"
)

// ProxyCreate is the builder for creating a Proxy entity.
type ProxyCreate struct {
	config
	mutation *ProxyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProxyCreate) SetCreatedAt(t time.Time) *ProxyCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProxyCreate) SetNillableCreatedAt(t *time.Time) *ProxyCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProxyCreate) SetUpdatedAt(t time.Time) *ProxyCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProxyCreate) SetNillableUpdatedAt(t *time.Time) *ProxyCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUsername sets the "Username" field.
func (pc *ProxyCreate) SetUsername(s string) *ProxyCreate {
	pc.mutation.SetUsername(s)
	return pc
}

// SetNillableUsername sets the "Username" field if the given value is not nil.
func (pc *ProxyCreate) SetNillableUsername(s *string) *ProxyCreate {
	if s != nil {
		pc.SetUsername(*s)
	}
	return pc
}

// SetPassword sets the "Password" field.
func (pc *ProxyCreate) SetPassword(s string) *ProxyCreate {
	pc.mutation.SetPassword(s)
	return pc
}

// SetNillablePassword sets the "Password" field if the given value is not nil.
func (pc *ProxyCreate) SetNillablePassword(s *string) *ProxyCreate {
	if s != nil {
		pc.SetPassword(*s)
	}
	return pc
}

// SetIP sets the "IP" field.
func (pc *ProxyCreate) SetIP(s string) *ProxyCreate {
	pc.mutation.SetIP(s)
	return pc
}

// SetPort sets the "Port" field.
func (pc *ProxyCreate) SetPort(s string) *ProxyCreate {
	pc.mutation.SetPort(s)
	return pc
}

// SetID sets the "id" field.
func (pc *ProxyCreate) SetID(u uuid.UUID) *ProxyCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetProxyListID sets the "ProxyList" edge to the ProxyList entity by ID.
func (pc *ProxyCreate) SetProxyListID(id uuid.UUID) *ProxyCreate {
	pc.mutation.SetProxyListID(id)
	return pc
}

// SetNillableProxyListID sets the "ProxyList" edge to the ProxyList entity by ID if the given value is not nil.
func (pc *ProxyCreate) SetNillableProxyListID(id *uuid.UUID) *ProxyCreate {
	if id != nil {
		pc = pc.SetProxyListID(*id)
	}
	return pc
}

// SetProxyList sets the "ProxyList" edge to the ProxyList entity.
func (pc *ProxyCreate) SetProxyList(p *ProxyList) *ProxyCreate {
	return pc.SetProxyListID(p.ID)
}

// Mutation returns the ProxyMutation object of the builder.
func (pc *ProxyCreate) Mutation() *ProxyMutation {
	return pc.mutation
}

// Save creates the Proxy in the database.
func (pc *ProxyCreate) Save(ctx context.Context) (*Proxy, error) {
	var (
		err  error
		node *Proxy
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProxyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProxyCreate) SaveX(ctx context.Context) *Proxy {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pc *ProxyCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := proxy.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := proxy.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := proxy.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProxyCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := pc.mutation.IP(); !ok {
		return &ValidationError{Name: "IP", err: errors.New("ent: missing required field \"IP\"")}
	}
	if _, ok := pc.mutation.Port(); !ok {
		return &ValidationError{Name: "Port", err: errors.New("ent: missing required field \"Port\"")}
	}
	return nil
}

func (pc *ProxyCreate) sqlSave(ctx context.Context) (*Proxy, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (pc *ProxyCreate) createSpec() (*Proxy, *sqlgraph.CreateSpec) {
	var (
		_node = &Proxy{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: proxy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: proxy.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxy.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: proxy.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := pc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := pc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := pc.mutation.Port(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: proxy.FieldPort,
		})
		_node.Port = value
	}
	if nodes := pc.mutation.ProxyListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   proxy.ProxyListTable,
			Columns: []string{proxy.ProxyListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: proxylist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.proxy_list_proxies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProxyCreateBulk is the builder for creating many Proxy entities in bulk.
type ProxyCreateBulk struct {
	config
	builders []*ProxyCreate
}

// Save creates the Proxy entities in the database.
func (pcb *ProxyCreateBulk) Save(ctx context.Context) ([]*Proxy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Proxy, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProxyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProxyCreateBulk) SaveX(ctx context.Context) []*Proxy {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
