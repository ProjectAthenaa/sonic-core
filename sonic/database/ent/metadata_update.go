// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/metadata"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// MetadataUpdate is the builder for updating Metadata entities.
type MetadataUpdate struct {
	config
	hooks    []Hook
	mutation *MetadataMutation
}

// Where adds a new predicate for the MetadataUpdate builder.
func (mu *MetadataUpdate) Where(ps ...predicate.Metadata) *MetadataUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MetadataUpdate) SetCreatedAt(t time.Time) *MetadataUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableCreatedAt(t *time.Time) *MetadataUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MetadataUpdate) SetUpdatedAt(t time.Time) *MetadataUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetFirstLogin sets the "FirstLogin" field.
func (mu *MetadataUpdate) SetFirstLogin(b bool) *MetadataUpdate {
	mu.mutation.SetFirstLogin(b)
	return mu
}

// SetNillableFirstLogin sets the "FirstLogin" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableFirstLogin(b *bool) *MetadataUpdate {
	if b != nil {
		mu.SetFirstLogin(*b)
	}
	return mu
}

// SetFirstLoginMobile sets the "FirstLoginMobile" field.
func (mu *MetadataUpdate) SetFirstLoginMobile(b bool) *MetadataUpdate {
	mu.mutation.SetFirstLoginMobile(b)
	return mu
}

// SetNillableFirstLoginMobile sets the "FirstLoginMobile" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableFirstLoginMobile(b *bool) *MetadataUpdate {
	if b != nil {
		mu.SetFirstLoginMobile(*b)
	}
	return mu
}

// SetTheme sets the "Theme" field.
func (mu *MetadataUpdate) SetTheme(m metadata.Theme) *MetadataUpdate {
	mu.mutation.SetTheme(m)
	return mu
}

// SetNillableTheme sets the "Theme" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableTheme(m *metadata.Theme) *MetadataUpdate {
	if m != nil {
		mu.SetTheme(*m)
	}
	return mu
}

// SetDiscordID sets the "DiscordID" field.
func (mu *MetadataUpdate) SetDiscordID(s string) *MetadataUpdate {
	mu.mutation.SetDiscordID(s)
	return mu
}

// SetNillableDiscordID sets the "DiscordID" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableDiscordID(s *string) *MetadataUpdate {
	if s != nil {
		mu.SetDiscordID(*s)
	}
	return mu
}

// SetDiscordAccessToken sets the "DiscordAccessToken" field.
func (mu *MetadataUpdate) SetDiscordAccessToken(s string) *MetadataUpdate {
	mu.mutation.SetDiscordAccessToken(s)
	return mu
}

// SetNillableDiscordAccessToken sets the "DiscordAccessToken" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableDiscordAccessToken(s *string) *MetadataUpdate {
	if s != nil {
		mu.SetDiscordAccessToken(*s)
	}
	return mu
}

// SetDiscordRefreshToken sets the "DiscordRefreshToken" field.
func (mu *MetadataUpdate) SetDiscordRefreshToken(s string) *MetadataUpdate {
	mu.mutation.SetDiscordRefreshToken(s)
	return mu
}

// SetNillableDiscordRefreshToken sets the "DiscordRefreshToken" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableDiscordRefreshToken(s *string) *MetadataUpdate {
	if s != nil {
		mu.SetDiscordRefreshToken(*s)
	}
	return mu
}

// SetDiscordUsername sets the "DiscordUsername" field.
func (mu *MetadataUpdate) SetDiscordUsername(s string) *MetadataUpdate {
	mu.mutation.SetDiscordUsername(s)
	return mu
}

// SetNillableDiscordUsername sets the "DiscordUsername" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableDiscordUsername(s *string) *MetadataUpdate {
	if s != nil {
		mu.SetDiscordUsername(*s)
	}
	return mu
}

// SetDiscordAvatar sets the "DiscordAvatar" field.
func (mu *MetadataUpdate) SetDiscordAvatar(s string) *MetadataUpdate {
	mu.mutation.SetDiscordAvatar(s)
	return mu
}

// SetNillableDiscordAvatar sets the "DiscordAvatar" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableDiscordAvatar(s *string) *MetadataUpdate {
	if s != nil {
		mu.SetDiscordAvatar(*s)
	}
	return mu
}

// SetDiscordDiscriminator sets the "DiscordDiscriminator" field.
func (mu *MetadataUpdate) SetDiscordDiscriminator(s string) *MetadataUpdate {
	mu.mutation.SetDiscordDiscriminator(s)
	return mu
}

// SetNillableDiscordDiscriminator sets the "DiscordDiscriminator" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableDiscordDiscriminator(s *string) *MetadataUpdate {
	if s != nil {
		mu.SetDiscordDiscriminator(*s)
	}
	return mu
}

// SetDiscordExpiryTime sets the "DiscordExpiryTime" field.
func (mu *MetadataUpdate) SetDiscordExpiryTime(t time.Time) *MetadataUpdate {
	mu.mutation.SetDiscordExpiryTime(t)
	return mu
}

// SetNillableDiscordExpiryTime sets the "DiscordExpiryTime" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableDiscordExpiryTime(t *time.Time) *MetadataUpdate {
	if t != nil {
		mu.SetDiscordExpiryTime(*t)
	}
	return mu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MetadataUpdate) SetUserID(id uuid.UUID) *MetadataUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MetadataUpdate) SetUser(u *User) *MetadataUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MetadataMutation object of the builder.
func (mu *MetadataUpdate) Mutation() *MetadataMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MetadataUpdate) ClearUser() *MetadataUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetadataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mu.defaults()
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetadataUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetadataUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MetadataUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := metadata.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MetadataUpdate) check() error {
	if v, ok := mu.mutation.Theme(); ok {
		if err := metadata.ThemeValidator(v); err != nil {
			return &ValidationError{Name: "Theme", err: fmt.Errorf("ent: validator failed for field \"Theme\": %w", err)}
		}
	}
	if _, ok := mu.mutation.UserID(); mu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (mu *MetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metadata.Table,
			Columns: metadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: metadata.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.FirstLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metadata.FieldFirstLogin,
		})
	}
	if value, ok := mu.mutation.FirstLoginMobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metadata.FieldFirstLoginMobile,
		})
	}
	if value, ok := mu.mutation.Theme(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: metadata.FieldTheme,
		})
	}
	if value, ok := mu.mutation.DiscordID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordID,
		})
	}
	if value, ok := mu.mutation.DiscordAccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordAccessToken,
		})
	}
	if value, ok := mu.mutation.DiscordRefreshToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordRefreshToken,
		})
	}
	if value, ok := mu.mutation.DiscordUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordUsername,
		})
	}
	if value, ok := mu.mutation.DiscordAvatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordAvatar,
		})
	}
	if value, ok := mu.mutation.DiscordDiscriminator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordDiscriminator,
		})
	}
	if value, ok := mu.mutation.DiscordExpiryTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldDiscordExpiryTime,
		})
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metadata.UserTable,
			Columns: []string{metadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metadata.UserTable,
			Columns: []string{metadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadata.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MetadataUpdateOne is the builder for updating a single Metadata entity.
type MetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetadataMutation
}

// SetCreatedAt sets the "created_at" field.
func (muo *MetadataUpdateOne) SetCreatedAt(t time.Time) *MetadataUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableCreatedAt(t *time.Time) *MetadataUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MetadataUpdateOne) SetUpdatedAt(t time.Time) *MetadataUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetFirstLogin sets the "FirstLogin" field.
func (muo *MetadataUpdateOne) SetFirstLogin(b bool) *MetadataUpdateOne {
	muo.mutation.SetFirstLogin(b)
	return muo
}

// SetNillableFirstLogin sets the "FirstLogin" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableFirstLogin(b *bool) *MetadataUpdateOne {
	if b != nil {
		muo.SetFirstLogin(*b)
	}
	return muo
}

// SetFirstLoginMobile sets the "FirstLoginMobile" field.
func (muo *MetadataUpdateOne) SetFirstLoginMobile(b bool) *MetadataUpdateOne {
	muo.mutation.SetFirstLoginMobile(b)
	return muo
}

// SetNillableFirstLoginMobile sets the "FirstLoginMobile" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableFirstLoginMobile(b *bool) *MetadataUpdateOne {
	if b != nil {
		muo.SetFirstLoginMobile(*b)
	}
	return muo
}

// SetTheme sets the "Theme" field.
func (muo *MetadataUpdateOne) SetTheme(m metadata.Theme) *MetadataUpdateOne {
	muo.mutation.SetTheme(m)
	return muo
}

// SetNillableTheme sets the "Theme" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableTheme(m *metadata.Theme) *MetadataUpdateOne {
	if m != nil {
		muo.SetTheme(*m)
	}
	return muo
}

// SetDiscordID sets the "DiscordID" field.
func (muo *MetadataUpdateOne) SetDiscordID(s string) *MetadataUpdateOne {
	muo.mutation.SetDiscordID(s)
	return muo
}

// SetNillableDiscordID sets the "DiscordID" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableDiscordID(s *string) *MetadataUpdateOne {
	if s != nil {
		muo.SetDiscordID(*s)
	}
	return muo
}

// SetDiscordAccessToken sets the "DiscordAccessToken" field.
func (muo *MetadataUpdateOne) SetDiscordAccessToken(s string) *MetadataUpdateOne {
	muo.mutation.SetDiscordAccessToken(s)
	return muo
}

// SetNillableDiscordAccessToken sets the "DiscordAccessToken" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableDiscordAccessToken(s *string) *MetadataUpdateOne {
	if s != nil {
		muo.SetDiscordAccessToken(*s)
	}
	return muo
}

// SetDiscordRefreshToken sets the "DiscordRefreshToken" field.
func (muo *MetadataUpdateOne) SetDiscordRefreshToken(s string) *MetadataUpdateOne {
	muo.mutation.SetDiscordRefreshToken(s)
	return muo
}

// SetNillableDiscordRefreshToken sets the "DiscordRefreshToken" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableDiscordRefreshToken(s *string) *MetadataUpdateOne {
	if s != nil {
		muo.SetDiscordRefreshToken(*s)
	}
	return muo
}

// SetDiscordUsername sets the "DiscordUsername" field.
func (muo *MetadataUpdateOne) SetDiscordUsername(s string) *MetadataUpdateOne {
	muo.mutation.SetDiscordUsername(s)
	return muo
}

// SetNillableDiscordUsername sets the "DiscordUsername" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableDiscordUsername(s *string) *MetadataUpdateOne {
	if s != nil {
		muo.SetDiscordUsername(*s)
	}
	return muo
}

// SetDiscordAvatar sets the "DiscordAvatar" field.
func (muo *MetadataUpdateOne) SetDiscordAvatar(s string) *MetadataUpdateOne {
	muo.mutation.SetDiscordAvatar(s)
	return muo
}

// SetNillableDiscordAvatar sets the "DiscordAvatar" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableDiscordAvatar(s *string) *MetadataUpdateOne {
	if s != nil {
		muo.SetDiscordAvatar(*s)
	}
	return muo
}

// SetDiscordDiscriminator sets the "DiscordDiscriminator" field.
func (muo *MetadataUpdateOne) SetDiscordDiscriminator(s string) *MetadataUpdateOne {
	muo.mutation.SetDiscordDiscriminator(s)
	return muo
}

// SetNillableDiscordDiscriminator sets the "DiscordDiscriminator" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableDiscordDiscriminator(s *string) *MetadataUpdateOne {
	if s != nil {
		muo.SetDiscordDiscriminator(*s)
	}
	return muo
}

// SetDiscordExpiryTime sets the "DiscordExpiryTime" field.
func (muo *MetadataUpdateOne) SetDiscordExpiryTime(t time.Time) *MetadataUpdateOne {
	muo.mutation.SetDiscordExpiryTime(t)
	return muo
}

// SetNillableDiscordExpiryTime sets the "DiscordExpiryTime" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableDiscordExpiryTime(t *time.Time) *MetadataUpdateOne {
	if t != nil {
		muo.SetDiscordExpiryTime(*t)
	}
	return muo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MetadataUpdateOne) SetUserID(id uuid.UUID) *MetadataUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MetadataUpdateOne) SetUser(u *User) *MetadataUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MetadataMutation object of the builder.
func (muo *MetadataUpdateOne) Mutation() *MetadataMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MetadataUpdateOne) ClearUser() *MetadataUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetadataUpdateOne) Select(field string, fields ...string) *MetadataUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Metadata entity.
func (muo *MetadataUpdateOne) Save(ctx context.Context) (*Metadata, error) {
	var (
		err  error
		node *Metadata
	)
	muo.defaults()
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetadataUpdateOne) SaveX(ctx context.Context) *Metadata {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetadataUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MetadataUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := metadata.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MetadataUpdateOne) check() error {
	if v, ok := muo.mutation.Theme(); ok {
		if err := metadata.ThemeValidator(v); err != nil {
			return &ValidationError{Name: "Theme", err: fmt.Errorf("ent: validator failed for field \"Theme\": %w", err)}
		}
	}
	if _, ok := muo.mutation.UserID(); muo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (muo *MetadataUpdateOne) sqlSave(ctx context.Context) (_node *Metadata, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metadata.Table,
			Columns: metadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: metadata.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Metadata.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metadata.FieldID)
		for _, f := range fields {
			if !metadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.FirstLogin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metadata.FieldFirstLogin,
		})
	}
	if value, ok := muo.mutation.FirstLoginMobile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: metadata.FieldFirstLoginMobile,
		})
	}
	if value, ok := muo.mutation.Theme(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: metadata.FieldTheme,
		})
	}
	if value, ok := muo.mutation.DiscordID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordID,
		})
	}
	if value, ok := muo.mutation.DiscordAccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordAccessToken,
		})
	}
	if value, ok := muo.mutation.DiscordRefreshToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordRefreshToken,
		})
	}
	if value, ok := muo.mutation.DiscordUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordUsername,
		})
	}
	if value, ok := muo.mutation.DiscordAvatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordAvatar,
		})
	}
	if value, ok := muo.mutation.DiscordDiscriminator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldDiscordDiscriminator,
		})
	}
	if value, ok := muo.mutation.DiscordExpiryTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldDiscordExpiryTime,
		})
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metadata.UserTable,
			Columns: []string{metadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metadata.UserTable,
			Columns: []string{metadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Metadata{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadata.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
