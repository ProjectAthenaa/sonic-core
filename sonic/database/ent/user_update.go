// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/app"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/checkout"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/license"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/metadata"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/predicate"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/release"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/session"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/user"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDisabled sets the "Disabled" field.
func (uu *UserUpdate) SetDisabled(b bool) *UserUpdate {
	uu.mutation.SetDisabled(b)
	return uu
}

// SetNillableDisabled sets the "Disabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetDisabled(*b)
	}
	return uu
}

// SetTasksRan sets the "TasksRan" field.
func (uu *UserUpdate) SetTasksRan(i int) *UserUpdate {
	uu.mutation.ResetTasksRan()
	uu.mutation.SetTasksRan(i)
	return uu
}

// SetNillableTasksRan sets the "TasksRan" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTasksRan(i *int) *UserUpdate {
	if i != nil {
		uu.SetTasksRan(*i)
	}
	return uu
}

// AddTasksRan adds i to the "TasksRan" field.
func (uu *UserUpdate) AddTasksRan(i int) *UserUpdate {
	uu.mutation.AddTasksRan(i)
	return uu
}

// SetTotalDeclines sets the "TotalDeclines" field.
func (uu *UserUpdate) SetTotalDeclines(i int) *UserUpdate {
	uu.mutation.ResetTotalDeclines()
	uu.mutation.SetTotalDeclines(i)
	return uu
}

// SetNillableTotalDeclines sets the "TotalDeclines" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTotalDeclines(i *int) *UserUpdate {
	if i != nil {
		uu.SetTotalDeclines(*i)
	}
	return uu
}

// AddTotalDeclines adds i to the "TotalDeclines" field.
func (uu *UserUpdate) AddTotalDeclines(i int) *UserUpdate {
	uu.mutation.AddTotalDeclines(i)
	return uu
}

// SetMoneySpent sets the "MoneySpent" field.
func (uu *UserUpdate) SetMoneySpent(f float64) *UserUpdate {
	uu.mutation.ResetMoneySpent()
	uu.mutation.SetMoneySpent(f)
	return uu
}

// SetNillableMoneySpent sets the "MoneySpent" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMoneySpent(f *float64) *UserUpdate {
	if f != nil {
		uu.SetMoneySpent(*f)
	}
	return uu
}

// AddMoneySpent adds f to the "MoneySpent" field.
func (uu *UserUpdate) AddMoneySpent(f float64) *UserUpdate {
	uu.mutation.AddMoneySpent(f)
	return uu
}

// SetTotalCheckouts sets the "TotalCheckouts" field.
func (uu *UserUpdate) SetTotalCheckouts(i int) *UserUpdate {
	uu.mutation.ResetTotalCheckouts()
	uu.mutation.SetTotalCheckouts(i)
	return uu
}

// SetNillableTotalCheckouts sets the "TotalCheckouts" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTotalCheckouts(i *int) *UserUpdate {
	if i != nil {
		uu.SetTotalCheckouts(*i)
	}
	return uu
}

// AddTotalCheckouts adds i to the "TotalCheckouts" field.
func (uu *UserUpdate) AddTotalCheckouts(i int) *UserUpdate {
	uu.mutation.AddTotalCheckouts(i)
	return uu
}

// SetLicenseID sets the "License" edge to the License entity by ID.
func (uu *UserUpdate) SetLicenseID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetLicenseID(id)
	return uu
}

// SetNillableLicenseID sets the "License" edge to the License entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableLicenseID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetLicenseID(*id)
	}
	return uu
}

// SetLicense sets the "License" edge to the License entity.
func (uu *UserUpdate) SetLicense(l *License) *UserUpdate {
	return uu.SetLicenseID(l.ID)
}

// AddCheckoutIDs adds the "Checkouts" edge to the Checkout entity by IDs.
func (uu *UserUpdate) AddCheckoutIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddCheckoutIDs(ids...)
	return uu
}

// AddCheckouts adds the "Checkouts" edges to the Checkout entity.
func (uu *UserUpdate) AddCheckouts(c ...*Checkout) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCheckoutIDs(ids...)
}

// SetAppID sets the "App" edge to the App entity by ID.
func (uu *UserUpdate) SetAppID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetAppID(id)
	return uu
}

// SetNillableAppID sets the "App" edge to the App entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableAppID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetAppID(*id)
	}
	return uu
}

// SetApp sets the "App" edge to the App entity.
func (uu *UserUpdate) SetApp(a *App) *UserUpdate {
	return uu.SetAppID(a.ID)
}

// SetMetadataID sets the "Metadata" edge to the Metadata entity by ID.
func (uu *UserUpdate) SetMetadataID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetMetadataID(id)
	return uu
}

// SetNillableMetadataID sets the "Metadata" edge to the Metadata entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableMetadataID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetMetadataID(*id)
	}
	return uu
}

// SetMetadata sets the "Metadata" edge to the Metadata entity.
func (uu *UserUpdate) SetMetadata(m *Metadata) *UserUpdate {
	return uu.SetMetadataID(m.ID)
}

// AddSessionIDs adds the "Sessions" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "Sessions" edges to the Session entity.
func (uu *UserUpdate) AddSessions(s ...*Session) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// SetReleaseID sets the "Release" edge to the Release entity by ID.
func (uu *UserUpdate) SetReleaseID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetReleaseID(id)
	return uu
}

// SetNillableReleaseID sets the "Release" edge to the Release entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableReleaseID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetReleaseID(*id)
	}
	return uu
}

// SetRelease sets the "Release" edge to the Release entity.
func (uu *UserUpdate) SetRelease(r *Release) *UserUpdate {
	return uu.SetReleaseID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearLicense clears the "License" edge to the License entity.
func (uu *UserUpdate) ClearLicense() *UserUpdate {
	uu.mutation.ClearLicense()
	return uu
}

// ClearCheckouts clears all "Checkouts" edges to the Checkout entity.
func (uu *UserUpdate) ClearCheckouts() *UserUpdate {
	uu.mutation.ClearCheckouts()
	return uu
}

// RemoveCheckoutIDs removes the "Checkouts" edge to Checkout entities by IDs.
func (uu *UserUpdate) RemoveCheckoutIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveCheckoutIDs(ids...)
	return uu
}

// RemoveCheckouts removes "Checkouts" edges to Checkout entities.
func (uu *UserUpdate) RemoveCheckouts(c ...*Checkout) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCheckoutIDs(ids...)
}

// ClearApp clears the "App" edge to the App entity.
func (uu *UserUpdate) ClearApp() *UserUpdate {
	uu.mutation.ClearApp()
	return uu
}

// ClearMetadata clears the "Metadata" edge to the Metadata entity.
func (uu *UserUpdate) ClearMetadata() *UserUpdate {
	uu.mutation.ClearMetadata()
	return uu
}

// ClearSessions clears all "Sessions" edges to the Session entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "Sessions" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "Sessions" edges to Session entities.
func (uu *UserUpdate) RemoveSessions(s ...*Session) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearRelease clears the "Release" edge to the Release entity.
func (uu *UserUpdate) ClearRelease() *UserUpdate {
	uu.mutation.ClearRelease()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uu.defaults()
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uu.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldDisabled,
		})
	}
	if value, ok := uu.mutation.TasksRan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTasksRan,
		})
	}
	if value, ok := uu.mutation.AddedTasksRan(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTasksRan,
		})
	}
	if value, ok := uu.mutation.TotalDeclines(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTotalDeclines,
		})
	}
	if value, ok := uu.mutation.AddedTotalDeclines(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTotalDeclines,
		})
	}
	if value, ok := uu.mutation.MoneySpent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: user.FieldMoneySpent,
		})
	}
	if value, ok := uu.mutation.AddedMoneySpent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: user.FieldMoneySpent,
		})
	}
	if value, ok := uu.mutation.TotalCheckouts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTotalCheckouts,
		})
	}
	if value, ok := uu.mutation.AddedTotalCheckouts(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTotalCheckouts,
		})
	}
	if uu.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LicenseTable,
			Columns: []string{user.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LicenseTable,
			Columns: []string{user.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCheckoutsIDs(); len(nodes) > 0 && !uu.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MetadataTable,
			Columns: []string{user.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MetadataTable,
			Columns: []string{user.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ReleaseTable,
			Columns: []string{user.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ReleaseTable,
			Columns: []string{user.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDisabled sets the "Disabled" field.
func (uuo *UserUpdateOne) SetDisabled(b bool) *UserUpdateOne {
	uuo.mutation.SetDisabled(b)
	return uuo
}

// SetNillableDisabled sets the "Disabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetDisabled(*b)
	}
	return uuo
}

// SetTasksRan sets the "TasksRan" field.
func (uuo *UserUpdateOne) SetTasksRan(i int) *UserUpdateOne {
	uuo.mutation.ResetTasksRan()
	uuo.mutation.SetTasksRan(i)
	return uuo
}

// SetNillableTasksRan sets the "TasksRan" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTasksRan(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetTasksRan(*i)
	}
	return uuo
}

// AddTasksRan adds i to the "TasksRan" field.
func (uuo *UserUpdateOne) AddTasksRan(i int) *UserUpdateOne {
	uuo.mutation.AddTasksRan(i)
	return uuo
}

// SetTotalDeclines sets the "TotalDeclines" field.
func (uuo *UserUpdateOne) SetTotalDeclines(i int) *UserUpdateOne {
	uuo.mutation.ResetTotalDeclines()
	uuo.mutation.SetTotalDeclines(i)
	return uuo
}

// SetNillableTotalDeclines sets the "TotalDeclines" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTotalDeclines(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetTotalDeclines(*i)
	}
	return uuo
}

// AddTotalDeclines adds i to the "TotalDeclines" field.
func (uuo *UserUpdateOne) AddTotalDeclines(i int) *UserUpdateOne {
	uuo.mutation.AddTotalDeclines(i)
	return uuo
}

// SetMoneySpent sets the "MoneySpent" field.
func (uuo *UserUpdateOne) SetMoneySpent(f float64) *UserUpdateOne {
	uuo.mutation.ResetMoneySpent()
	uuo.mutation.SetMoneySpent(f)
	return uuo
}

// SetNillableMoneySpent sets the "MoneySpent" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMoneySpent(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetMoneySpent(*f)
	}
	return uuo
}

// AddMoneySpent adds f to the "MoneySpent" field.
func (uuo *UserUpdateOne) AddMoneySpent(f float64) *UserUpdateOne {
	uuo.mutation.AddMoneySpent(f)
	return uuo
}

// SetTotalCheckouts sets the "TotalCheckouts" field.
func (uuo *UserUpdateOne) SetTotalCheckouts(i int) *UserUpdateOne {
	uuo.mutation.ResetTotalCheckouts()
	uuo.mutation.SetTotalCheckouts(i)
	return uuo
}

// SetNillableTotalCheckouts sets the "TotalCheckouts" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTotalCheckouts(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetTotalCheckouts(*i)
	}
	return uuo
}

// AddTotalCheckouts adds i to the "TotalCheckouts" field.
func (uuo *UserUpdateOne) AddTotalCheckouts(i int) *UserUpdateOne {
	uuo.mutation.AddTotalCheckouts(i)
	return uuo
}

// SetLicenseID sets the "License" edge to the License entity by ID.
func (uuo *UserUpdateOne) SetLicenseID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetLicenseID(id)
	return uuo
}

// SetNillableLicenseID sets the "License" edge to the License entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLicenseID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetLicenseID(*id)
	}
	return uuo
}

// SetLicense sets the "License" edge to the License entity.
func (uuo *UserUpdateOne) SetLicense(l *License) *UserUpdateOne {
	return uuo.SetLicenseID(l.ID)
}

// AddCheckoutIDs adds the "Checkouts" edge to the Checkout entity by IDs.
func (uuo *UserUpdateOne) AddCheckoutIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddCheckoutIDs(ids...)
	return uuo
}

// AddCheckouts adds the "Checkouts" edges to the Checkout entity.
func (uuo *UserUpdateOne) AddCheckouts(c ...*Checkout) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCheckoutIDs(ids...)
}

// SetAppID sets the "App" edge to the App entity by ID.
func (uuo *UserUpdateOne) SetAppID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetAppID(id)
	return uuo
}

// SetNillableAppID sets the "App" edge to the App entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAppID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetAppID(*id)
	}
	return uuo
}

// SetApp sets the "App" edge to the App entity.
func (uuo *UserUpdateOne) SetApp(a *App) *UserUpdateOne {
	return uuo.SetAppID(a.ID)
}

// SetMetadataID sets the "Metadata" edge to the Metadata entity by ID.
func (uuo *UserUpdateOne) SetMetadataID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetMetadataID(id)
	return uuo
}

// SetNillableMetadataID sets the "Metadata" edge to the Metadata entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMetadataID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetMetadataID(*id)
	}
	return uuo
}

// SetMetadata sets the "Metadata" edge to the Metadata entity.
func (uuo *UserUpdateOne) SetMetadata(m *Metadata) *UserUpdateOne {
	return uuo.SetMetadataID(m.ID)
}

// AddSessionIDs adds the "Sessions" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "Sessions" edges to the Session entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Session) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// SetReleaseID sets the "Release" edge to the Release entity by ID.
func (uuo *UserUpdateOne) SetReleaseID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetReleaseID(id)
	return uuo
}

// SetNillableReleaseID sets the "Release" edge to the Release entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableReleaseID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetReleaseID(*id)
	}
	return uuo
}

// SetRelease sets the "Release" edge to the Release entity.
func (uuo *UserUpdateOne) SetRelease(r *Release) *UserUpdateOne {
	return uuo.SetReleaseID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearLicense clears the "License" edge to the License entity.
func (uuo *UserUpdateOne) ClearLicense() *UserUpdateOne {
	uuo.mutation.ClearLicense()
	return uuo
}

// ClearCheckouts clears all "Checkouts" edges to the Checkout entity.
func (uuo *UserUpdateOne) ClearCheckouts() *UserUpdateOne {
	uuo.mutation.ClearCheckouts()
	return uuo
}

// RemoveCheckoutIDs removes the "Checkouts" edge to Checkout entities by IDs.
func (uuo *UserUpdateOne) RemoveCheckoutIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveCheckoutIDs(ids...)
	return uuo
}

// RemoveCheckouts removes "Checkouts" edges to Checkout entities.
func (uuo *UserUpdateOne) RemoveCheckouts(c ...*Checkout) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCheckoutIDs(ids...)
}

// ClearApp clears the "App" edge to the App entity.
func (uuo *UserUpdateOne) ClearApp() *UserUpdateOne {
	uuo.mutation.ClearApp()
	return uuo
}

// ClearMetadata clears the "Metadata" edge to the Metadata entity.
func (uuo *UserUpdateOne) ClearMetadata() *UserUpdateOne {
	uuo.mutation.ClearMetadata()
	return uuo
}

// ClearSessions clears all "Sessions" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "Sessions" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "Sessions" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Session) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearRelease clears the "Release" edge to the Release entity.
func (uuo *UserUpdateOne) ClearRelease() *UserUpdateOne {
	uuo.mutation.ClearRelease()
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uuo.defaults()
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uuo.mutation.Disabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldDisabled,
		})
	}
	if value, ok := uuo.mutation.TasksRan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTasksRan,
		})
	}
	if value, ok := uuo.mutation.AddedTasksRan(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTasksRan,
		})
	}
	if value, ok := uuo.mutation.TotalDeclines(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTotalDeclines,
		})
	}
	if value, ok := uuo.mutation.AddedTotalDeclines(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTotalDeclines,
		})
	}
	if value, ok := uuo.mutation.MoneySpent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: user.FieldMoneySpent,
		})
	}
	if value, ok := uuo.mutation.AddedMoneySpent(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: user.FieldMoneySpent,
		})
	}
	if value, ok := uuo.mutation.TotalCheckouts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTotalCheckouts,
		})
	}
	if value, ok := uuo.mutation.AddedTotalCheckouts(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldTotalCheckouts,
		})
	}
	if uuo.mutation.LicenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LicenseTable,
			Columns: []string{user.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: license.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LicenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LicenseTable,
			Columns: []string{user.LicenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: license.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCheckoutsIDs(); len(nodes) > 0 && !uuo.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MetadataTable,
			Columns: []string{user.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MetadataTable,
			Columns: []string{user.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ReleaseTable,
			Columns: []string{user.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: release.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ReleaseTable,
			Columns: []string{user.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: release.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
