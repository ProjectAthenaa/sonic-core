// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/product"
	"github.com/ProjectAthenaa/sonic-core/sonic/database/ent/proxylist"
)

type AccountGroupInput struct {
	Name     string                 `json:"Name"`
	Site     product.Site           `json:"Site"`
	Accounts map[string]interface{} `json:"Accounts"`
}

type NewAddress struct {
	AddressLine  string  `json:"AddressLine"`
	AddressLine2 *string `json:"AddressLine2"`
	Country      string  `json:"Country"`
	State        string  `json:"State"`
	StateCode    *string `json:"StateCode"`
	City         string  `json:"City"`
	Zip          string  `json:"ZIP"`
}

type NewBilling struct {
	CardHolderName string `json:"CardHolderName"`
	CardNumber     string `json:"CardNumber"`
	ExpiryMonth    string `json:"ExpiryMonth"`
	ExpiryYear     string `json:"ExpiryYear"`
	Cvv            string `json:"CVV"`
}

type NewProfile struct {
	GroupID  string       `json:"GroupID"`
	Name     string       `json:"Name"`
	Email    string       `json:"Email"`
	Shipping *NewShipping `json:"Shipping"`
	Billing  *NewBilling  `json:"Billing"`
}

type NewProfileGroup struct {
	Name     string   `json:"Name"`
	Profiles []string `json:"Profiles"`
}

type NewProxy struct {
	Username *string `json:"Username"`
	Password *string `json:"Password"`
	IP       string  `json:"IP"`
	Port     string  `json:"Port"`
}

type NewProxyList struct {
	Name    string         `json:"Name"`
	Type    proxylist.Type `json:"Type"`
	Proxies []*NewProxy    `json:"Proxies"`
}

type NewShipping struct {
	FirstName         string      `json:"FirstName"`
	LastName          string      `json:"LastName"`
	PhoneNumber       string      `json:"PhoneNumber"`
	ShippingAddress   *NewAddress `json:"ShippingAddress"`
	BillingAddress    *NewAddress `json:"BillingAddress"`
	BillingIsShipping bool        `json:"BillingIsShipping"`
}

type NewTask struct {
	StartTime      *time.Time `json:"StartTime"`
	Product        *ProductIn `json:"Product"`
	ProxyListID    string     `json:"ProxyListID"`
	ProfileGroupID string     `json:"ProfileGroupID"`
	TaskGroupID    string     `json:"TaskGroupID"`
}

type NewTaskGroup struct {
	Name  string   `json:"Name"`
	Tasks []string `json:"Tasks"`
}

type ProductIn struct {
	Name             string                 `json:"Name"`
	Image            *string                `json:"Image"`
	LookupType       product.LookupType     `json:"LookupType"`
	PositiveKeywords []string               `json:"PositiveKeywords"`
	NegativeKeywords []string               `json:"NegativeKeywords"`
	Link             *string                `json:"Link"`
	Quantity         *int                   `json:"Quantity"`
	Sizes            []string               `json:"Sizes"`
	Colors           []string               `json:"Colors"`
	Site             product.Site           `json:"Site"`
	Metadata         map[string]interface{} `json:"Metadata"`
}

type ProxyTest struct {
	Latency int             `json:"Latency"`
	Status  ProxyTestStatus `json:"Status"`
	ProxyID string          `json:"ProxyID"`
}

type UpdatedTask struct {
	StartTime      *time.Time `json:"StartTime"`
	ProductID      *string    `json:"ProductID"`
	ProxyListID    *string    `json:"ProxyListID"`
	ProfileGroupID *string    `json:"ProfileGroupID"`
	TaskGroupID    *string    `json:"TaskGroupID"`
}

type ProxyTestStatus string

const (
	ProxyTestStatusPinging    ProxyTestStatus = "Pinging"
	ProxyTestStatusNotPinging ProxyTestStatus = "NotPinging"
)

var AllProxyTestStatus = []ProxyTestStatus{
	ProxyTestStatusPinging,
	ProxyTestStatusNotPinging,
}

func (e ProxyTestStatus) IsValid() bool {
	switch e {
	case ProxyTestStatusPinging, ProxyTestStatusNotPinging:
		return true
	}
	return false
}

func (e ProxyTestStatus) String() string {
	return string(e)
}

func (e *ProxyTestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProxyTestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProxyTestStatus", str)
	}
	return nil
}

func (e ProxyTestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
