// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package perimeterx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PerimeterXClient is the client API for PerimeterX service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerimeterXClient interface {
	ConstructPayload(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*ConstructPayloadResponse, error)
	GetCookie(ctx context.Context, in *GetCookieRequest, opts ...grpc.CallOption) (*Cookie, error)
}

type perimeterXClient struct {
	cc grpc.ClientConnInterface
}

func NewPerimeterXClient(cc grpc.ClientConnInterface) PerimeterXClient {
	return &perimeterXClient{cc}
}

func (c *perimeterXClient) ConstructPayload(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*ConstructPayloadResponse, error) {
	out := new(ConstructPayloadResponse)
	err := c.cc.Invoke(ctx, "/perimeterx.PerimeterX/ConstructPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perimeterXClient) GetCookie(ctx context.Context, in *GetCookieRequest, opts ...grpc.CallOption) (*Cookie, error) {
	out := new(Cookie)
	err := c.cc.Invoke(ctx, "/perimeterx.PerimeterX/GetCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerimeterXServer is the server API for PerimeterX service.
// All implementations must embed UnimplementedPerimeterXServer
// for forward compatibility
type PerimeterXServer interface {
	ConstructPayload(context.Context, *Payload) (*ConstructPayloadResponse, error)
	GetCookie(context.Context, *GetCookieRequest) (*Cookie, error)
	mustEmbedUnimplementedPerimeterXServer()
}

// UnimplementedPerimeterXServer must be embedded to have forward compatible implementations.
type UnimplementedPerimeterXServer struct {
}

func (UnimplementedPerimeterXServer) ConstructPayload(context.Context, *Payload) (*ConstructPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConstructPayload not implemented")
}
func (UnimplementedPerimeterXServer) GetCookie(context.Context, *GetCookieRequest) (*Cookie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookie not implemented")
}
func (UnimplementedPerimeterXServer) mustEmbedUnimplementedPerimeterXServer() {}

// UnsafePerimeterXServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerimeterXServer will
// result in compilation errors.
type UnsafePerimeterXServer interface {
	mustEmbedUnimplementedPerimeterXServer()
}

func RegisterPerimeterXServer(s grpc.ServiceRegistrar, srv PerimeterXServer) {
	s.RegisterService(&PerimeterX_ServiceDesc, srv)
}

func _PerimeterX_ConstructPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerimeterXServer).ConstructPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perimeterx.PerimeterX/ConstructPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerimeterXServer).ConstructPayload(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerimeterX_GetCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerimeterXServer).GetCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perimeterx.PerimeterX/GetCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerimeterXServer).GetCookie(ctx, req.(*GetCookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PerimeterX_ServiceDesc is the grpc.ServiceDesc for PerimeterX service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerimeterX_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perimeterx.PerimeterX",
	HandlerType: (*PerimeterXServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConstructPayload",
			Handler:    _PerimeterX_ConstructPayload_Handler,
		},
		{
			MethodName: "GetCookie",
			Handler:    _PerimeterX_GetCookie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PerimeterX.proto",
}
