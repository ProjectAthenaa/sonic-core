// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package webhooks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebhooksClient is the client API for Webhooks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhooksClient interface {
	Success(ctx context.Context, in *SuccessRequest, opts ...grpc.CallOption) (*Status, error)
	Decline(ctx context.Context, in *DeclineRequest, opts ...grpc.CallOption) (*Status, error)
}

type webhooksClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhooksClient(cc grpc.ClientConnInterface) WebhooksClient {
	return &webhooksClient{cc}
}

func (c *webhooksClient) Success(ctx context.Context, in *SuccessRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Webhooks/Success", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhooksClient) Decline(ctx context.Context, in *DeclineRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Webhooks/Decline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhooksServer is the server API for Webhooks service.
// All implementations must embed UnimplementedWebhooksServer
// for forward compatibility
type WebhooksServer interface {
	Success(context.Context, *SuccessRequest) (*Status, error)
	Decline(context.Context, *DeclineRequest) (*Status, error)
	mustEmbedUnimplementedWebhooksServer()
}

// UnimplementedWebhooksServer must be embedded to have forward compatible implementations.
type UnimplementedWebhooksServer struct {
}

func (UnimplementedWebhooksServer) Success(context.Context, *SuccessRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Success not implemented")
}
func (UnimplementedWebhooksServer) Decline(context.Context, *DeclineRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decline not implemented")
}
func (UnimplementedWebhooksServer) mustEmbedUnimplementedWebhooksServer() {}

// UnsafeWebhooksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhooksServer will
// result in compilation errors.
type UnsafeWebhooksServer interface {
	mustEmbedUnimplementedWebhooksServer()
}

func RegisterWebhooksServer(s grpc.ServiceRegistrar, srv WebhooksServer) {
	s.RegisterService(&Webhooks_ServiceDesc, srv)
}

func _Webhooks_Success_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhooksServer).Success(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Webhooks/Success",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhooksServer).Success(ctx, req.(*SuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhooks_Decline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhooksServer).Decline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Webhooks/Decline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhooksServer).Decline(ctx, req.(*DeclineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Webhooks_ServiceDesc is the grpc.ServiceDesc for Webhooks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Webhooks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Webhooks",
	HandlerType: (*WebhooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Success",
			Handler:    _Webhooks_Success_Handler,
		},
		{
			MethodName: "Decline",
			Handler:    _Webhooks_Decline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Webhooks.proto",
}
